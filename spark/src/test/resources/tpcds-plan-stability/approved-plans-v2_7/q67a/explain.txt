== Physical Plan ==
TakeOrderedAndProject (69)
+- * Filter (68)
   +- Window (67)
      +- * ColumnarToRow (66)
         +- CometSort (65)
            +- CometColumnarExchange (64)
               +- CometUnion (63)
                  :- CometHashAggregate (22)
                  :  +- CometColumnarExchange (21)
                  :     +- RowToColumnar (20)
                  :        +- * HashAggregate (19)
                  :           +- * Project (18)
                  :              +- * BroadcastHashJoin Inner BuildRight (17)
                  :                 :- * Project (12)
                  :                 :  +- * BroadcastHashJoin Inner BuildRight (11)
                  :                 :     :- * Project (6)
                  :                 :     :  +- * BroadcastHashJoin Inner BuildRight (5)
                  :                 :     :     :- * ColumnarToRow (3)
                  :                 :     :     :  +- CometFilter (2)
                  :                 :     :     :     +- CometScan parquet spark_catalog.default.store_sales (1)
                  :                 :     :     +- ReusedExchange (4)
                  :                 :     +- BroadcastExchange (10)
                  :                 :        +- * ColumnarToRow (9)
                  :                 :           +- CometFilter (8)
                  :                 :              +- CometScan parquet spark_catalog.default.store (7)
                  :                 +- BroadcastExchange (16)
                  :                    +- * ColumnarToRow (15)
                  :                       +- CometFilter (14)
                  :                          +- CometScan parquet spark_catalog.default.item (13)
                  :- CometHashAggregate (27)
                  :  +- CometColumnarExchange (26)
                  :     +- CometHashAggregate (25)
                  :        +- CometHashAggregate (24)
                  :           +- ReusedExchange (23)
                  :- CometHashAggregate (32)
                  :  +- CometColumnarExchange (31)
                  :     +- CometHashAggregate (30)
                  :        +- CometHashAggregate (29)
                  :           +- ReusedExchange (28)
                  :- CometHashAggregate (37)
                  :  +- CometColumnarExchange (36)
                  :     +- CometHashAggregate (35)
                  :        +- CometHashAggregate (34)
                  :           +- ReusedExchange (33)
                  :- CometHashAggregate (42)
                  :  +- CometColumnarExchange (41)
                  :     +- CometHashAggregate (40)
                  :        +- CometHashAggregate (39)
                  :           +- ReusedExchange (38)
                  :- CometHashAggregate (47)
                  :  +- CometColumnarExchange (46)
                  :     +- CometHashAggregate (45)
                  :        +- CometHashAggregate (44)
                  :           +- ReusedExchange (43)
                  :- CometHashAggregate (52)
                  :  +- CometColumnarExchange (51)
                  :     +- CometHashAggregate (50)
                  :        +- CometHashAggregate (49)
                  :           +- ReusedExchange (48)
                  :- CometHashAggregate (57)
                  :  +- CometColumnarExchange (56)
                  :     +- CometHashAggregate (55)
                  :        +- CometHashAggregate (54)
                  :           +- ReusedExchange (53)
                  +- CometHashAggregate (62)
                     +- CometColumnarExchange (61)
                        +- CometHashAggregate (60)
                           +- CometHashAggregate (59)
                              +- ReusedExchange (58)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(2) CometFilter
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1))

(3) ColumnarToRow [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]

(4) ReusedExchange [Reuses operator id: 74]
Output [4]: [d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join type: Inner
Join condition: None

(6) Project [codegen id : 4]
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5, d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]

(unknown) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#11, s_store_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(8) CometFilter
Input [2]: [s_store_sk#11, s_store_id#12]
Condition : isnotnull(s_store_sk#11)

(9) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#11, s_store_id#12]

(10) BroadcastExchange
Input [2]: [s_store_sk#11, s_store_id#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#11]
Join type: Inner
Join condition: None

(12) Project [codegen id : 4]
Output [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_sk#11, s_store_id#12]

(unknown) Scan parquet spark_catalog.default.item
Output [5]: [i_item_sk#13, i_brand#14, i_class#15, i_category#16, i_product_name#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(14) CometFilter
Input [5]: [i_item_sk#13, i_brand#14, i_class#15, i_category#16, i_product_name#17]
Condition : isnotnull(i_item_sk#13)

(15) ColumnarToRow [codegen id : 3]
Input [5]: [i_item_sk#13, i_brand#14, i_class#15, i_category#16, i_product_name#17]

(16) BroadcastExchange
Input [5]: [i_item_sk#13, i_brand#14, i_class#15, i_category#16, i_product_name#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#13]
Join type: Inner
Join condition: None

(18) Project [codegen id : 4]
Output [10]: [ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12, i_brand#14, i_class#15, i_category#16, i_product_name#17]
Input [12]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12, i_item_sk#13, i_brand#14, i_class#15, i_category#16, i_product_name#17]

(19) HashAggregate [codegen id : 4]
Input [10]: [ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12, i_brand#14, i_class#15, i_category#16, i_product_name#17]
Keys [8]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [partial_sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]
Aggregate Attributes [2]: [sum#18, isEmpty#19]
Results [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#20, isEmpty#21]

(20) RowToColumnar
Input [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#20, isEmpty#21]

(21) CometColumnarExchange
Input [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#20, isEmpty#21]
Arguments: hashpartitioning(i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(22) CometHashAggregate
Input [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#20, isEmpty#21]
Keys [8]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]

(23) ReusedExchange [Reuses operator id: 21]
Output [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#22, isEmpty#23]

(24) CometHashAggregate
Input [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#22, isEmpty#23]
Keys [8]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]

(25) CometHashAggregate
Input [8]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, sumsales#24]
Keys [7]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9]
Functions [1]: [partial_sum(sumsales#24)]

(26) CometColumnarExchange
Input [9]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, sum#25, isEmpty#26]
Arguments: hashpartitioning(i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(27) CometHashAggregate
Input [9]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, sum#25, isEmpty#26]
Keys [7]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9]
Functions [1]: [sum(sumsales#24)]

(28) ReusedExchange [Reuses operator id: 21]
Output [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#27, isEmpty#28]

(29) CometHashAggregate
Input [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#27, isEmpty#28]
Keys [8]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]

(30) CometHashAggregate
Input [7]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, sumsales#24]
Keys [6]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10]
Functions [1]: [partial_sum(sumsales#24)]

(31) CometColumnarExchange
Input [8]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, sum#29, isEmpty#30]
Arguments: hashpartitioning(i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(32) CometHashAggregate
Input [8]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, sum#29, isEmpty#30]
Keys [6]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10]
Functions [1]: [sum(sumsales#24)]

(33) ReusedExchange [Reuses operator id: 21]
Output [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#31, isEmpty#32]

(34) CometHashAggregate
Input [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#31, isEmpty#32]
Keys [8]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]

(35) CometHashAggregate
Input [6]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, sumsales#24]
Keys [5]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8]
Functions [1]: [partial_sum(sumsales#24)]

(36) CometColumnarExchange
Input [7]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, sum#33, isEmpty#34]
Arguments: hashpartitioning(i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(37) CometHashAggregate
Input [7]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, sum#33, isEmpty#34]
Keys [5]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8]
Functions [1]: [sum(sumsales#24)]

(38) ReusedExchange [Reuses operator id: 21]
Output [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#35, isEmpty#36]

(39) CometHashAggregate
Input [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#35, isEmpty#36]
Keys [8]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]

(40) CometHashAggregate
Input [5]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, sumsales#24]
Keys [4]: [i_category#16, i_class#15, i_brand#14, i_product_name#17]
Functions [1]: [partial_sum(sumsales#24)]

(41) CometColumnarExchange
Input [6]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, sum#37, isEmpty#38]
Arguments: hashpartitioning(i_category#16, i_class#15, i_brand#14, i_product_name#17, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(42) CometHashAggregate
Input [6]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, sum#37, isEmpty#38]
Keys [4]: [i_category#16, i_class#15, i_brand#14, i_product_name#17]
Functions [1]: [sum(sumsales#24)]

(43) ReusedExchange [Reuses operator id: 21]
Output [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#39, isEmpty#40]

(44) CometHashAggregate
Input [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#39, isEmpty#40]
Keys [8]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]

(45) CometHashAggregate
Input [4]: [i_category#16, i_class#15, i_brand#14, sumsales#24]
Keys [3]: [i_category#16, i_class#15, i_brand#14]
Functions [1]: [partial_sum(sumsales#24)]

(46) CometColumnarExchange
Input [5]: [i_category#16, i_class#15, i_brand#14, sum#41, isEmpty#42]
Arguments: hashpartitioning(i_category#16, i_class#15, i_brand#14, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=8]

(47) CometHashAggregate
Input [5]: [i_category#16, i_class#15, i_brand#14, sum#41, isEmpty#42]
Keys [3]: [i_category#16, i_class#15, i_brand#14]
Functions [1]: [sum(sumsales#24)]

(48) ReusedExchange [Reuses operator id: 21]
Output [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#43, isEmpty#44]

(49) CometHashAggregate
Input [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#43, isEmpty#44]
Keys [8]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]

(50) CometHashAggregate
Input [3]: [i_category#16, i_class#15, sumsales#24]
Keys [2]: [i_category#16, i_class#15]
Functions [1]: [partial_sum(sumsales#24)]

(51) CometColumnarExchange
Input [4]: [i_category#16, i_class#15, sum#45, isEmpty#46]
Arguments: hashpartitioning(i_category#16, i_class#15, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(52) CometHashAggregate
Input [4]: [i_category#16, i_class#15, sum#45, isEmpty#46]
Keys [2]: [i_category#16, i_class#15]
Functions [1]: [sum(sumsales#24)]

(53) ReusedExchange [Reuses operator id: 21]
Output [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#47, isEmpty#48]

(54) CometHashAggregate
Input [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#47, isEmpty#48]
Keys [8]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]

(55) CometHashAggregate
Input [2]: [i_category#16, sumsales#24]
Keys [1]: [i_category#16]
Functions [1]: [partial_sum(sumsales#24)]

(56) CometColumnarExchange
Input [3]: [i_category#16, sum#49, isEmpty#50]
Arguments: hashpartitioning(i_category#16, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(57) CometHashAggregate
Input [3]: [i_category#16, sum#49, isEmpty#50]
Keys [1]: [i_category#16]
Functions [1]: [sum(sumsales#24)]

(58) ReusedExchange [Reuses operator id: 21]
Output [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#51, isEmpty#52]

(59) CometHashAggregate
Input [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#51, isEmpty#52]
Keys [8]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]

(60) CometHashAggregate
Input [1]: [sumsales#24]
Keys: []
Functions [1]: [partial_sum(sumsales#24)]

(61) CometColumnarExchange
Input [2]: [sum#53, isEmpty#54]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=11]

(62) CometHashAggregate
Input [2]: [sum#53, isEmpty#54]
Keys: []
Functions [1]: [sum(sumsales#24)]

(63) CometUnion
Child 0 Input [9]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#55]
Child 1 Input [9]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#56, sumsales#57]
Child 2 Input [9]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#58, s_store_id#59, sumsales#60]
Child 3 Input [9]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#61, d_moy#62, s_store_id#63, sumsales#64]
Child 4 Input [9]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#65, d_qoy#66, d_moy#67, s_store_id#68, sumsales#69]
Child 5 Input [9]: [i_category#16, i_class#15, i_brand#14, i_product_name#70, d_year#71, d_qoy#72, d_moy#73, s_store_id#74, sumsales#75]
Child 6 Input [9]: [i_category#16, i_class#15, i_brand#76, i_product_name#77, d_year#78, d_qoy#79, d_moy#80, s_store_id#81, sumsales#82]
Child 7 Input [9]: [i_category#16, i_class#83, i_brand#84, i_product_name#85, d_year#86, d_qoy#87, d_moy#88, s_store_id#89, sumsales#90]
Child 8 Input [9]: [i_category#91, i_class#92, i_brand#93, i_product_name#94, d_year#95, d_qoy#96, d_moy#97, s_store_id#98, sumsales#99]

(64) CometColumnarExchange
Input [9]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#55]
Arguments: hashpartitioning(i_category#16, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=12]

(65) CometSort
Input [9]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#55]
Arguments: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#55], [i_category#16 ASC NULLS FIRST, sumsales#55 DESC NULLS LAST]

(66) ColumnarToRow [codegen id : 37]
Input [9]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#55]

(67) Window
Input [9]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#55]
Arguments: [rank(sumsales#55) windowspecdefinition(i_category#16, sumsales#55 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#100], [i_category#16], [sumsales#55 DESC NULLS LAST]

(68) Filter [codegen id : 38]
Input [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#55, rk#100]
Condition : (rk#100 <= 100)

(69) TakeOrderedAndProject
Input [10]: [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#55, rk#100]
Arguments: 100, [i_category#16 ASC NULLS FIRST, i_class#15 ASC NULLS FIRST, i_brand#14 ASC NULLS FIRST, i_product_name#17 ASC NULLS FIRST, d_year#8 ASC NULLS FIRST, d_qoy#10 ASC NULLS FIRST, d_moy#9 ASC NULLS FIRST, s_store_id#12 ASC NULLS FIRST, sumsales#55 ASC NULLS FIRST, rk#100 ASC NULLS FIRST], [i_category#16, i_class#15, i_brand#14, i_product_name#17, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#55, rk#100]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (74)
+- * ColumnarToRow (73)
   +- CometProject (72)
      +- CometFilter (71)
         +- CometScan parquet spark_catalog.default.date_dim (70)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [5]: [d_date_sk#7, d_month_seq#101, d_year#8, d_moy#9, d_qoy#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_year:int,d_moy:int,d_qoy:int>

(71) CometFilter
Input [5]: [d_date_sk#7, d_month_seq#101, d_year#8, d_moy#9, d_qoy#10]
Condition : (((isnotnull(d_month_seq#101) AND (d_month_seq#101 >= 1212)) AND (d_month_seq#101 <= 1223)) AND isnotnull(d_date_sk#7))

(72) CometProject
Input [5]: [d_date_sk#7, d_month_seq#101, d_year#8, d_moy#9, d_qoy#10]
Arguments: [d_date_sk#7, d_year#8, d_moy#9, d_qoy#10], [d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]

(73) ColumnarToRow [codegen id : 1]
Input [4]: [d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]

(74) BroadcastExchange
Input [4]: [d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]


