== Physical Plan ==
TakeOrderedAndProject (90)
+- * BroadcastHashJoin Inner BuildRight (89)
   :- * Filter (70)
   :  +- * HashAggregate (69)
   :     +- * ColumnarToRow (68)
   :        +- CometColumnarExchange (67)
   :           +- RowToColumnar (66)
   :              +- * HashAggregate (65)
   :                 +- * Project (64)
   :                    +- * BroadcastHashJoin Inner BuildRight (63)
   :                       :- * Project (61)
   :                       :  +- * BroadcastHashJoin Inner BuildRight (60)
   :                       :     :- * BroadcastHashJoin LeftSemi BuildRight (53)
   :                       :     :  :- * ColumnarToRow (3)
   :                       :     :  :  +- CometFilter (2)
   :                       :     :  :     +- CometScan parquet spark_catalog.default.store_sales (1)
   :                       :     :  +- BroadcastExchange (52)
   :                       :     :     +- * Project (51)
   :                       :     :        +- * BroadcastHashJoin Inner BuildRight (50)
   :                       :     :           :- * ColumnarToRow (6)
   :                       :     :           :  +- CometFilter (5)
   :                       :     :           :     +- CometScan parquet spark_catalog.default.item (4)
   :                       :     :           +- BroadcastExchange (49)
   :                       :     :              +- * BroadcastHashJoin LeftSemi BuildRight (48)
   :                       :     :                 :- * ColumnarToRow (37)
   :                       :     :                 :  +- CometHashAggregate (36)
   :                       :     :                 :     +- CometColumnarExchange (35)
   :                       :     :                 :        +- RowToColumnar (34)
   :                       :     :                 :           +- * HashAggregate (33)
   :                       :     :                 :              +- * Project (32)
   :                       :     :                 :                 +- * BroadcastHashJoin Inner BuildRight (31)
   :                       :     :                 :                    :- * Project (29)
   :                       :     :                 :                    :  +- * BroadcastHashJoin Inner BuildRight (28)
   :                       :     :                 :                    :     :- * ColumnarToRow (9)
   :                       :     :                 :                    :     :  +- CometFilter (8)
   :                       :     :                 :                    :     :     +- CometScan parquet spark_catalog.default.store_sales (7)
   :                       :     :                 :                    :     +- BroadcastExchange (27)
   :                       :     :                 :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (26)
   :                       :     :                 :                    :           :- * ColumnarToRow (12)
   :                       :     :                 :                    :           :  +- CometFilter (11)
   :                       :     :                 :                    :           :     +- CometScan parquet spark_catalog.default.item (10)
   :                       :     :                 :                    :           +- BroadcastExchange (25)
   :                       :     :                 :                    :              +- * Project (24)
   :                       :     :                 :                    :                 +- * BroadcastHashJoin Inner BuildRight (23)
   :                       :     :                 :                    :                    :- * Project (21)
   :                       :     :                 :                    :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
   :                       :     :                 :                    :                    :     :- * ColumnarToRow (15)
   :                       :     :                 :                    :                    :     :  +- CometFilter (14)
   :                       :     :                 :                    :                    :     :     +- CometScan parquet spark_catalog.default.catalog_sales (13)
   :                       :     :                 :                    :                    :     +- BroadcastExchange (19)
   :                       :     :                 :                    :                    :        +- * ColumnarToRow (18)
   :                       :     :                 :                    :                    :           +- CometFilter (17)
   :                       :     :                 :                    :                    :              +- CometScan parquet spark_catalog.default.item (16)
   :                       :     :                 :                    :                    +- ReusedExchange (22)
   :                       :     :                 :                    +- ReusedExchange (30)
   :                       :     :                 +- BroadcastExchange (47)
   :                       :     :                    +- * Project (46)
   :                       :     :                       +- * BroadcastHashJoin Inner BuildRight (45)
   :                       :     :                          :- * Project (43)
   :                       :     :                          :  +- * BroadcastHashJoin Inner BuildRight (42)
   :                       :     :                          :     :- * ColumnarToRow (40)
   :                       :     :                          :     :  +- CometFilter (39)
   :                       :     :                          :     :     +- CometScan parquet spark_catalog.default.web_sales (38)
   :                       :     :                          :     +- ReusedExchange (41)
   :                       :     :                          +- ReusedExchange (44)
   :                       :     +- BroadcastExchange (59)
   :                       :        +- * BroadcastHashJoin LeftSemi BuildRight (58)
   :                       :           :- * ColumnarToRow (56)
   :                       :           :  +- CometFilter (55)
   :                       :           :     +- CometScan parquet spark_catalog.default.item (54)
   :                       :           +- ReusedExchange (57)
   :                       +- ReusedExchange (62)
   +- BroadcastExchange (88)
      +- * Filter (87)
         +- * HashAggregate (86)
            +- * ColumnarToRow (85)
               +- CometColumnarExchange (84)
                  +- RowToColumnar (83)
                     +- * HashAggregate (82)
                        +- * Project (81)
                           +- * BroadcastHashJoin Inner BuildRight (80)
                              :- * Project (78)
                              :  +- * BroadcastHashJoin Inner BuildRight (77)
                              :     :- * BroadcastHashJoin LeftSemi BuildRight (75)
                              :     :  :- * ColumnarToRow (73)
                              :     :  :  +- CometFilter (72)
                              :     :  :     +- CometScan parquet spark_catalog.default.store_sales (71)
                              :     :  +- ReusedExchange (74)
                              :     +- ReusedExchange (76)
                              +- ReusedExchange (79)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(3) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(unknown) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) CometFilter
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(6) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) CometFilter
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(9) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(unknown) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) CometFilter
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(12) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#19)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) CometFilter
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(15) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]

(unknown) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) CometFilter
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Condition : isnotnull(i_item_sk#20)

(18) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]

(19) BroadcastExchange
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#20]
Join type: Inner
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]

(22) ReusedExchange [Reuses operator id: 125]
Output [1]: [d_date_sk#24]

(23) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#24]
Join type: Inner
Join condition: None

(24) Project [codegen id : 3]
Output [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Input [5]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23, d_date_sk#24]

(25) BroadcastExchange
Input [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=2]

(26) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)]
Right keys [6]: [coalesce(i_brand_id#21, 0), isnull(i_brand_id#21), coalesce(i_class_id#22, 0), isnull(i_class_id#22), coalesce(i_category_id#23, 0), isnull(i_category_id#23)]
Join type: LeftSemi
Join condition: None

(27) BroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#13]
Join type: Inner
Join condition: None

(29) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(30) ReusedExchange [Reuses operator id: 125]
Output [1]: [d_date_sk#25]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#25]
Join type: Inner
Join condition: None

(32) Project [codegen id : 6]
Output [3]: [i_brand_id#14 AS brand_id#26, i_class_id#15 AS class_id#27, i_category_id#16 AS category_id#28]
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#25]

(33) HashAggregate [codegen id : 6]
Input [3]: [brand_id#26, class_id#27, category_id#28]
Keys [3]: [brand_id#26, class_id#27, category_id#28]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#26, class_id#27, category_id#28]

(34) RowToColumnar
Input [3]: [brand_id#26, class_id#27, category_id#28]

(35) CometColumnarExchange
Input [3]: [brand_id#26, class_id#27, category_id#28]
Arguments: hashpartitioning(brand_id#26, class_id#27, category_id#28, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(36) CometHashAggregate
Input [3]: [brand_id#26, class_id#27, category_id#28]
Keys [3]: [brand_id#26, class_id#27, category_id#28]
Functions: []

(37) ColumnarToRow [codegen id : 10]
Input [3]: [brand_id#26, class_id#27, category_id#28]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#29, ws_sold_date_sk#30]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#30), dynamicpruningexpression(ws_sold_date_sk#30 IN dynamicpruning#31)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(39) CometFilter
Input [2]: [ws_item_sk#29, ws_sold_date_sk#30]
Condition : isnotnull(ws_item_sk#29)

(40) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#29, ws_sold_date_sk#30]

(41) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#32, i_brand_id#33, i_class_id#34, i_category_id#35]

(42) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#29]
Right keys [1]: [i_item_sk#32]
Join type: Inner
Join condition: None

(43) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#30, i_brand_id#33, i_class_id#34, i_category_id#35]
Input [6]: [ws_item_sk#29, ws_sold_date_sk#30, i_item_sk#32, i_brand_id#33, i_class_id#34, i_category_id#35]

(44) ReusedExchange [Reuses operator id: 125]
Output [1]: [d_date_sk#36]

(45) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#30]
Right keys [1]: [d_date_sk#36]
Join type: Inner
Join condition: None

(46) Project [codegen id : 9]
Output [3]: [i_brand_id#33, i_class_id#34, i_category_id#35]
Input [5]: [ws_sold_date_sk#30, i_brand_id#33, i_class_id#34, i_category_id#35, d_date_sk#36]

(47) BroadcastExchange
Input [3]: [i_brand_id#33, i_class_id#34, i_category_id#35]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=5]

(48) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#26, 0), isnull(brand_id#26), coalesce(class_id#27, 0), isnull(class_id#27), coalesce(category_id#28, 0), isnull(category_id#28)]
Right keys [6]: [coalesce(i_brand_id#33, 0), isnull(i_brand_id#33), coalesce(i_class_id#34, 0), isnull(i_class_id#34), coalesce(i_category_id#35, 0), isnull(i_category_id#35)]
Join type: LeftSemi
Join condition: None

(49) BroadcastExchange
Input [3]: [brand_id#26, class_id#27, category_id#28]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=6]

(50) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#26, class_id#27, category_id#28]
Join type: Inner
Join condition: None

(51) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#37]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#26, class_id#27, category_id#28]

(52) BroadcastExchange
Input [1]: [ss_item_sk#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(53) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#37]
Join type: LeftSemi
Join condition: None

(unknown) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(55) CometFilter
Input [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]
Condition : (((isnotnull(i_item_sk#38) AND isnotnull(i_brand_id#39)) AND isnotnull(i_class_id#40)) AND isnotnull(i_category_id#41))

(56) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(57) ReusedExchange [Reuses operator id: 52]
Output [1]: [ss_item_sk#37]

(58) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#38]
Right keys [1]: [ss_item_sk#37]
Join type: LeftSemi
Join condition: None

(59) BroadcastExchange
Input [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(60) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#38]
Join type: Inner
Join condition: None

(61) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#39, i_class_id#40, i_category_id#41]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(62) ReusedExchange [Reuses operator id: 116]
Output [1]: [d_date_sk#42]

(63) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#42]
Join type: Inner
Join condition: None

(64) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#39, i_class_id#40, i_category_id#41]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#39, i_class_id#40, i_category_id#41, d_date_sk#42]

(65) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#39, i_class_id#40, i_category_id#41]
Keys [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#43, isEmpty#44, count#45]
Results [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]

(66) RowToColumnar
Input [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]

(67) CometColumnarExchange
Input [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]
Arguments: hashpartitioning(i_brand_id#39, i_class_id#40, i_category_id#41, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(68) ColumnarToRow [codegen id : 52]
Input [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]

(69) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]
Keys [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#49, count(1)#50]
Results [6]: [store AS channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#49 AS sales#52, count(1)#50 AS number_sales#53]

(70) Filter [codegen id : 52]
Input [6]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sales#52, number_sales#53]
Condition : (isnotnull(sales#52) AND (cast(sales#52 as decimal(32,6)) > cast(Subquery scalar-subquery#54, [id=#55] as decimal(32,6))))

(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#56, ss_quantity#57, ss_list_price#58, ss_sold_date_sk#59]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#59), dynamicpruningexpression(ss_sold_date_sk#59 IN dynamicpruning#60)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(72) CometFilter
Input [4]: [ss_item_sk#56, ss_quantity#57, ss_list_price#58, ss_sold_date_sk#59]
Condition : isnotnull(ss_item_sk#56)

(73) ColumnarToRow [codegen id : 50]
Input [4]: [ss_item_sk#56, ss_quantity#57, ss_list_price#58, ss_sold_date_sk#59]

(74) ReusedExchange [Reuses operator id: 52]
Output [1]: [ss_item_sk#37]

(75) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ss_item_sk#56]
Right keys [1]: [ss_item_sk#37]
Join type: LeftSemi
Join condition: None

(76) ReusedExchange [Reuses operator id: 59]
Output [4]: [i_item_sk#61, i_brand_id#62, i_class_id#63, i_category_id#64]

(77) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ss_item_sk#56]
Right keys [1]: [i_item_sk#61]
Join type: Inner
Join condition: None

(78) Project [codegen id : 50]
Output [6]: [ss_quantity#57, ss_list_price#58, ss_sold_date_sk#59, i_brand_id#62, i_class_id#63, i_category_id#64]
Input [8]: [ss_item_sk#56, ss_quantity#57, ss_list_price#58, ss_sold_date_sk#59, i_item_sk#61, i_brand_id#62, i_class_id#63, i_category_id#64]

(79) ReusedExchange [Reuses operator id: 130]
Output [1]: [d_date_sk#65]

(80) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ss_sold_date_sk#59]
Right keys [1]: [d_date_sk#65]
Join type: Inner
Join condition: None

(81) Project [codegen id : 50]
Output [5]: [ss_quantity#57, ss_list_price#58, i_brand_id#62, i_class_id#63, i_category_id#64]
Input [7]: [ss_quantity#57, ss_list_price#58, ss_sold_date_sk#59, i_brand_id#62, i_class_id#63, i_category_id#64, d_date_sk#65]

(82) HashAggregate [codegen id : 50]
Input [5]: [ss_quantity#57, ss_list_price#58, i_brand_id#62, i_class_id#63, i_category_id#64]
Keys [3]: [i_brand_id#62, i_class_id#63, i_category_id#64]
Functions [2]: [partial_sum((cast(ss_quantity#57 as decimal(10,0)) * ss_list_price#58)), partial_count(1)]
Aggregate Attributes [3]: [sum#66, isEmpty#67, count#68]
Results [6]: [i_brand_id#62, i_class_id#63, i_category_id#64, sum#69, isEmpty#70, count#71]

(83) RowToColumnar
Input [6]: [i_brand_id#62, i_class_id#63, i_category_id#64, sum#69, isEmpty#70, count#71]

(84) CometColumnarExchange
Input [6]: [i_brand_id#62, i_class_id#63, i_category_id#64, sum#69, isEmpty#70, count#71]
Arguments: hashpartitioning(i_brand_id#62, i_class_id#63, i_category_id#64, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(85) ColumnarToRow [codegen id : 51]
Input [6]: [i_brand_id#62, i_class_id#63, i_category_id#64, sum#69, isEmpty#70, count#71]

(86) HashAggregate [codegen id : 51]
Input [6]: [i_brand_id#62, i_class_id#63, i_category_id#64, sum#69, isEmpty#70, count#71]
Keys [3]: [i_brand_id#62, i_class_id#63, i_category_id#64]
Functions [2]: [sum((cast(ss_quantity#57 as decimal(10,0)) * ss_list_price#58)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#57 as decimal(10,0)) * ss_list_price#58))#72, count(1)#73]
Results [6]: [store AS channel#74, i_brand_id#62, i_class_id#63, i_category_id#64, sum((cast(ss_quantity#57 as decimal(10,0)) * ss_list_price#58))#72 AS sales#75, count(1)#73 AS number_sales#76]

(87) Filter [codegen id : 51]
Input [6]: [channel#74, i_brand_id#62, i_class_id#63, i_category_id#64, sales#75, number_sales#76]
Condition : (isnotnull(sales#75) AND (cast(sales#75 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#54, [id=#55] as decimal(32,6))))

(88) BroadcastExchange
Input [6]: [channel#74, i_brand_id#62, i_class_id#63, i_category_id#64, sales#75, number_sales#76]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [plan_id=11]

(89) BroadcastHashJoin [codegen id : 52]
Left keys [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Right keys [3]: [i_brand_id#62, i_class_id#63, i_category_id#64]
Join type: Inner
Join condition: None

(90) TakeOrderedAndProject
Input [12]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sales#52, number_sales#53, channel#74, i_brand_id#62, i_class_id#63, i_category_id#64, sales#75, number_sales#76]
Arguments: 100, [i_brand_id#39 ASC NULLS FIRST, i_class_id#40 ASC NULLS FIRST, i_category_id#41 ASC NULLS FIRST], [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sales#52, number_sales#53, channel#74, i_brand_id#62, i_class_id#63, i_category_id#64, sales#75, number_sales#76]

===== Subqueries =====

Subquery:1 Hosting operator id = 70 Hosting Expression = Subquery scalar-subquery#54, [id=#55]
* HashAggregate (111)
+- * ColumnarToRow (110)
   +- CometColumnarExchange (109)
      +- RowToColumnar (108)
         +- * HashAggregate (107)
            +- Union (106)
               :- * Project (95)
               :  +- * BroadcastHashJoin Inner BuildRight (94)
               :     :- * ColumnarToRow (92)
               :     :  +- CometScan parquet spark_catalog.default.store_sales (91)
               :     +- ReusedExchange (93)
               :- * Project (100)
               :  +- * BroadcastHashJoin Inner BuildRight (99)
               :     :- * ColumnarToRow (97)
               :     :  +- CometScan parquet spark_catalog.default.catalog_sales (96)
               :     +- ReusedExchange (98)
               +- * Project (105)
                  +- * BroadcastHashJoin Inner BuildRight (104)
                     :- * ColumnarToRow (102)
                     :  +- CometScan parquet spark_catalog.default.web_sales (101)
                     +- ReusedExchange (103)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#77, ss_list_price#78, ss_sold_date_sk#79]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#79), dynamicpruningexpression(ss_sold_date_sk#79 IN dynamicpruning#80)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(92) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#77, ss_list_price#78, ss_sold_date_sk#79]

(93) ReusedExchange [Reuses operator id: 125]
Output [1]: [d_date_sk#81]

(94) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#79]
Right keys [1]: [d_date_sk#81]
Join type: Inner
Join condition: None

(95) Project [codegen id : 2]
Output [2]: [ss_quantity#77 AS quantity#82, ss_list_price#78 AS list_price#83]
Input [4]: [ss_quantity#77, ss_list_price#78, ss_sold_date_sk#79, d_date_sk#81]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#84, cs_list_price#85, cs_sold_date_sk#86]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#86), dynamicpruningexpression(cs_sold_date_sk#86 IN dynamicpruning#87)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(97) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#84, cs_list_price#85, cs_sold_date_sk#86]

(98) ReusedExchange [Reuses operator id: 125]
Output [1]: [d_date_sk#88]

(99) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#86]
Right keys [1]: [d_date_sk#88]
Join type: Inner
Join condition: None

(100) Project [codegen id : 4]
Output [2]: [cs_quantity#84 AS quantity#89, cs_list_price#85 AS list_price#90]
Input [4]: [cs_quantity#84, cs_list_price#85, cs_sold_date_sk#86, d_date_sk#88]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#91, ws_list_price#92, ws_sold_date_sk#93]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#93), dynamicpruningexpression(ws_sold_date_sk#93 IN dynamicpruning#94)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(102) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#91, ws_list_price#92, ws_sold_date_sk#93]

(103) ReusedExchange [Reuses operator id: 125]
Output [1]: [d_date_sk#95]

(104) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#93]
Right keys [1]: [d_date_sk#95]
Join type: Inner
Join condition: None

(105) Project [codegen id : 6]
Output [2]: [ws_quantity#91 AS quantity#96, ws_list_price#92 AS list_price#97]
Input [4]: [ws_quantity#91, ws_list_price#92, ws_sold_date_sk#93, d_date_sk#95]

(106) Union

(107) HashAggregate [codegen id : 7]
Input [2]: [quantity#82, list_price#83]
Keys: []
Functions [1]: [partial_avg((cast(quantity#82 as decimal(10,0)) * list_price#83))]
Aggregate Attributes [2]: [sum#98, count#99]
Results [2]: [sum#100, count#101]

(108) RowToColumnar
Input [2]: [sum#100, count#101]

(109) CometColumnarExchange
Input [2]: [sum#100, count#101]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=12]

(110) ColumnarToRow [codegen id : 8]
Input [2]: [sum#100, count#101]

(111) HashAggregate [codegen id : 8]
Input [2]: [sum#100, count#101]
Keys: []
Functions [1]: [avg((cast(quantity#82 as decimal(10,0)) * list_price#83))]
Aggregate Attributes [1]: [avg((cast(quantity#82 as decimal(10,0)) * list_price#83))#102]
Results [1]: [avg((cast(quantity#82 as decimal(10,0)) * list_price#83))#102 AS average_sales#103]

Subquery:2 Hosting operator id = 91 Hosting Expression = ss_sold_date_sk#79 IN dynamicpruning#12

Subquery:3 Hosting operator id = 96 Hosting Expression = cs_sold_date_sk#86 IN dynamicpruning#12

Subquery:4 Hosting operator id = 101 Hosting Expression = ws_sold_date_sk#93 IN dynamicpruning#12

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (116)
+- * ColumnarToRow (115)
   +- CometProject (114)
      +- CometFilter (113)
         +- CometScan parquet spark_catalog.default.date_dim (112)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#42, d_week_seq#104]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(113) CometFilter
Input [2]: [d_date_sk#42, d_week_seq#104]
Condition : ((isnotnull(d_week_seq#104) AND (d_week_seq#104 = Subquery scalar-subquery#105, [id=#106])) AND isnotnull(d_date_sk#42))

(114) CometProject
Input [2]: [d_date_sk#42, d_week_seq#104]
Arguments: [d_date_sk#42], [d_date_sk#42]

(115) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#42]

(116) BroadcastExchange
Input [1]: [d_date_sk#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:6 Hosting operator id = 113 Hosting Expression = Subquery scalar-subquery#105, [id=#106]
* ColumnarToRow (120)
+- CometProject (119)
   +- CometFilter (118)
      +- CometScan parquet spark_catalog.default.date_dim (117)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_week_seq#107, d_year#108, d_moy#109, d_dom#110]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(118) CometFilter
Input [4]: [d_week_seq#107, d_year#108, d_moy#109, d_dom#110]
Condition : (((((isnotnull(d_year#108) AND isnotnull(d_moy#109)) AND isnotnull(d_dom#110)) AND (d_year#108 = 1999)) AND (d_moy#109 = 12)) AND (d_dom#110 = 16))

(119) CometProject
Input [4]: [d_week_seq#107, d_year#108, d_moy#109, d_dom#110]
Arguments: [d_week_seq#107], [d_week_seq#107]

(120) ColumnarToRow [codegen id : 1]
Input [1]: [d_week_seq#107]

Subquery:7 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (125)
+- * ColumnarToRow (124)
   +- CometProject (123)
      +- CometFilter (122)
         +- CometScan parquet spark_catalog.default.date_dim (121)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#25, d_year#111]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(122) CometFilter
Input [2]: [d_date_sk#25, d_year#111]
Condition : (((isnotnull(d_year#111) AND (d_year#111 >= 1998)) AND (d_year#111 <= 2000)) AND isnotnull(d_date_sk#25))

(123) CometProject
Input [2]: [d_date_sk#25, d_year#111]
Arguments: [d_date_sk#25], [d_date_sk#25]

(124) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#25]

(125) BroadcastExchange
Input [1]: [d_date_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

Subquery:8 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:9 Hosting operator id = 38 Hosting Expression = ws_sold_date_sk#30 IN dynamicpruning#12

Subquery:10 Hosting operator id = 87 Hosting Expression = ReusedSubquery Subquery scalar-subquery#54, [id=#55]

Subquery:11 Hosting operator id = 71 Hosting Expression = ss_sold_date_sk#59 IN dynamicpruning#60
BroadcastExchange (130)
+- * ColumnarToRow (129)
   +- CometProject (128)
      +- CometFilter (127)
         +- CometScan parquet spark_catalog.default.date_dim (126)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#65, d_week_seq#112]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(127) CometFilter
Input [2]: [d_date_sk#65, d_week_seq#112]
Condition : ((isnotnull(d_week_seq#112) AND (d_week_seq#112 = Subquery scalar-subquery#113, [id=#114])) AND isnotnull(d_date_sk#65))

(128) CometProject
Input [2]: [d_date_sk#65, d_week_seq#112]
Arguments: [d_date_sk#65], [d_date_sk#65]

(129) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#65]

(130) BroadcastExchange
Input [1]: [d_date_sk#65]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15]

Subquery:12 Hosting operator id = 127 Hosting Expression = Subquery scalar-subquery#113, [id=#114]
* ColumnarToRow (134)
+- CometProject (133)
   +- CometFilter (132)
      +- CometScan parquet spark_catalog.default.date_dim (131)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_week_seq#115, d_year#116, d_moy#117, d_dom#118]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1998), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(132) CometFilter
Input [4]: [d_week_seq#115, d_year#116, d_moy#117, d_dom#118]
Condition : (((((isnotnull(d_year#116) AND isnotnull(d_moy#117)) AND isnotnull(d_dom#118)) AND (d_year#116 = 1998)) AND (d_moy#117 = 12)) AND (d_dom#118 = 16))

(133) CometProject
Input [4]: [d_week_seq#115, d_year#116, d_moy#117, d_dom#118]
Arguments: [d_week_seq#115], [d_week_seq#115]

(134) ColumnarToRow [codegen id : 1]
Input [1]: [d_week_seq#115]


