== Physical Plan ==
* ColumnarToRow (47)
+- CometTakeOrderedAndProject (46)
   +- CometUnion (45)
      :- CometHashAggregate (24)
      :  +- CometHashAggregate (23)
      :     +- CometHashAggregate (22)
      :        +- CometColumnarExchange (21)
      :           +- RowToColumnar (20)
      :              +- * HashAggregate (19)
      :                 +- * Project (18)
      :                    +- * BroadcastHashJoin Inner BuildRight (17)
      :                       :- * Project (12)
      :                       :  +- * BroadcastHashJoin Inner BuildRight (11)
      :                       :     :- * Project (6)
      :                       :     :  +- * BroadcastHashJoin Inner BuildRight (5)
      :                       :     :     :- * ColumnarToRow (3)
      :                       :     :     :  +- CometFilter (2)
      :                       :     :     :     +- CometScan parquet spark_catalog.default.inventory (1)
      :                       :     :     +- ReusedExchange (4)
      :                       :     +- BroadcastExchange (10)
      :                       :        +- * ColumnarToRow (9)
      :                       :           +- CometFilter (8)
      :                       :              +- CometScan parquet spark_catalog.default.item (7)
      :                       +- BroadcastExchange (16)
      :                          +- * ColumnarToRow (15)
      :                             +- CometFilter (14)
      :                                +- CometScan parquet spark_catalog.default.warehouse (13)
      :- CometHashAggregate (29)
      :  +- CometColumnarExchange (28)
      :     +- CometHashAggregate (27)
      :        +- CometHashAggregate (26)
      :           +- ReusedExchange (25)
      :- CometHashAggregate (34)
      :  +- CometColumnarExchange (33)
      :     +- CometHashAggregate (32)
      :        +- CometHashAggregate (31)
      :           +- ReusedExchange (30)
      :- CometHashAggregate (39)
      :  +- CometColumnarExchange (38)
      :     +- CometHashAggregate (37)
      :        +- CometHashAggregate (36)
      :           +- ReusedExchange (35)
      +- CometHashAggregate (44)
         +- CometColumnarExchange (43)
            +- CometHashAggregate (42)
               +- CometHashAggregate (41)
                  +- ReusedExchange (40)


(unknown) Scan parquet spark_catalog.default.inventory
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#4), dynamicpruningexpression(inv_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) CometFilter
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Condition : (isnotnull(inv_item_sk#1) AND isnotnull(inv_warehouse_sk#2))

(3) ColumnarToRow [codegen id : 4]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]

(4) ReusedExchange [Reuses operator id: 52]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(6) Project [codegen id : 4]
Output [3]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3]
Input [5]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, d_date_sk#6]

(unknown) Scan parquet spark_catalog.default.item
Output [5]: [i_item_sk#7, i_brand#8, i_class#9, i_category#10, i_product_name#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(8) CometFilter
Input [5]: [i_item_sk#7, i_brand#8, i_class#9, i_category#10, i_product_name#11]
Condition : isnotnull(i_item_sk#7)

(9) ColumnarToRow [codegen id : 2]
Input [5]: [i_item_sk#7, i_brand#8, i_class#9, i_category#10, i_product_name#11]

(10) BroadcastExchange
Input [5]: [i_item_sk#7, i_brand#8, i_class#9, i_category#10, i_product_name#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join type: Inner
Join condition: None

(12) Project [codegen id : 4]
Output [6]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, i_brand#8, i_class#9, i_category#10, i_product_name#11]
Input [8]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, i_item_sk#7, i_brand#8, i_class#9, i_category#10, i_product_name#11]

(unknown) Scan parquet spark_catalog.default.warehouse
Output [1]: [w_warehouse_sk#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int>

(14) CometFilter
Input [1]: [w_warehouse_sk#12]
Condition : isnotnull(w_warehouse_sk#12)

(15) ColumnarToRow [codegen id : 3]
Input [1]: [w_warehouse_sk#12]

(16) BroadcastExchange
Input [1]: [w_warehouse_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_warehouse_sk#2]
Right keys [1]: [w_warehouse_sk#12]
Join type: Inner
Join condition: None

(18) Project [codegen id : 4]
Output [5]: [inv_quantity_on_hand#3, i_brand#8, i_class#9, i_category#10, i_product_name#11]
Input [7]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, i_brand#8, i_class#9, i_category#10, i_product_name#11, w_warehouse_sk#12]

(19) HashAggregate [codegen id : 4]
Input [5]: [inv_quantity_on_hand#3, i_brand#8, i_class#9, i_category#10, i_product_name#11]
Keys [4]: [i_product_name#11, i_brand#8, i_class#9, i_category#10]
Functions [1]: [partial_avg(inv_quantity_on_hand#3)]
Aggregate Attributes [2]: [sum#13, count#14]
Results [6]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, sum#15, count#16]

(20) RowToColumnar
Input [6]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, sum#15, count#16]

(21) CometColumnarExchange
Input [6]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, sum#15, count#16]
Arguments: hashpartitioning(i_product_name#11, i_brand#8, i_class#9, i_category#10, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(22) CometHashAggregate
Input [6]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, sum#15, count#16]
Keys [4]: [i_product_name#11, i_brand#8, i_class#9, i_category#10]
Functions [1]: [avg(inv_quantity_on_hand#3)]

(23) CometHashAggregate
Input [5]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, qoh#17]
Keys [4]: [i_product_name#11, i_brand#8, i_class#9, i_category#10]
Functions [1]: [partial_avg(qoh#17)]

(24) CometHashAggregate
Input [6]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, sum#18, count#19]
Keys [4]: [i_product_name#11, i_brand#8, i_class#9, i_category#10]
Functions [1]: [avg(qoh#17)]

(25) ReusedExchange [Reuses operator id: 21]
Output [6]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, sum#15, count#16]

(26) CometHashAggregate
Input [6]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, sum#15, count#16]
Keys [4]: [i_product_name#11, i_brand#8, i_class#9, i_category#10]
Functions [1]: [avg(inv_quantity_on_hand#3)]

(27) CometHashAggregate
Input [4]: [i_product_name#11, i_brand#8, i_class#9, qoh#17]
Keys [3]: [i_product_name#11, i_brand#8, i_class#9]
Functions [1]: [partial_avg(qoh#17)]

(28) CometColumnarExchange
Input [5]: [i_product_name#11, i_brand#8, i_class#9, sum#20, count#21]
Arguments: hashpartitioning(i_product_name#11, i_brand#8, i_class#9, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(29) CometHashAggregate
Input [5]: [i_product_name#11, i_brand#8, i_class#9, sum#20, count#21]
Keys [3]: [i_product_name#11, i_brand#8, i_class#9]
Functions [1]: [avg(qoh#17)]

(30) ReusedExchange [Reuses operator id: 21]
Output [6]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, sum#15, count#16]

(31) CometHashAggregate
Input [6]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, sum#15, count#16]
Keys [4]: [i_product_name#11, i_brand#8, i_class#9, i_category#10]
Functions [1]: [avg(inv_quantity_on_hand#3)]

(32) CometHashAggregate
Input [3]: [i_product_name#11, i_brand#8, qoh#17]
Keys [2]: [i_product_name#11, i_brand#8]
Functions [1]: [partial_avg(qoh#17)]

(33) CometColumnarExchange
Input [4]: [i_product_name#11, i_brand#8, sum#22, count#23]
Arguments: hashpartitioning(i_product_name#11, i_brand#8, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(34) CometHashAggregate
Input [4]: [i_product_name#11, i_brand#8, sum#22, count#23]
Keys [2]: [i_product_name#11, i_brand#8]
Functions [1]: [avg(qoh#17)]

(35) ReusedExchange [Reuses operator id: 21]
Output [6]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, sum#15, count#16]

(36) CometHashAggregate
Input [6]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, sum#15, count#16]
Keys [4]: [i_product_name#11, i_brand#8, i_class#9, i_category#10]
Functions [1]: [avg(inv_quantity_on_hand#3)]

(37) CometHashAggregate
Input [2]: [i_product_name#11, qoh#17]
Keys [1]: [i_product_name#11]
Functions [1]: [partial_avg(qoh#17)]

(38) CometColumnarExchange
Input [3]: [i_product_name#11, sum#24, count#25]
Arguments: hashpartitioning(i_product_name#11, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(39) CometHashAggregate
Input [3]: [i_product_name#11, sum#24, count#25]
Keys [1]: [i_product_name#11]
Functions [1]: [avg(qoh#17)]

(40) ReusedExchange [Reuses operator id: 21]
Output [6]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, sum#15, count#16]

(41) CometHashAggregate
Input [6]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, sum#15, count#16]
Keys [4]: [i_product_name#11, i_brand#8, i_class#9, i_category#10]
Functions [1]: [avg(inv_quantity_on_hand#3)]

(42) CometHashAggregate
Input [1]: [qoh#17]
Keys: []
Functions [1]: [partial_avg(qoh#17)]

(43) CometColumnarExchange
Input [2]: [sum#26, count#27]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(44) CometHashAggregate
Input [2]: [sum#26, count#27]
Keys: []
Functions [1]: [avg(qoh#17)]

(45) CometUnion
Child 0 Input [5]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, qoh#28]
Child 1 Input [5]: [i_product_name#11, i_brand#8, i_class#9, i_category#29, qoh#30]
Child 2 Input [5]: [i_product_name#11, i_brand#8, i_class#31, i_category#32, qoh#33]
Child 3 Input [5]: [i_product_name#11, i_brand#34, i_class#35, i_category#36, qoh#37]
Child 4 Input [5]: [i_product_name#38, i_brand#39, i_class#40, i_category#41, qoh#42]

(46) CometTakeOrderedAndProject
Input [5]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, qoh#28]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[qoh#28 ASC NULLS FIRST,i_product_name#11 ASC NULLS FIRST,i_brand#8 ASC NULLS FIRST,i_class#9 ASC NULLS FIRST,i_category#10 ASC NULLS FIRST], output=[i_product_name#11,i_brand#8,i_class#9,i_category#10,qoh#28]), 100, [qoh#28 ASC NULLS FIRST, i_product_name#11 ASC NULLS FIRST, i_brand#8 ASC NULLS FIRST, i_class#9 ASC NULLS FIRST, i_category#10 ASC NULLS FIRST], [i_product_name#11, i_brand#8, i_class#9, i_category#10, qoh#28]

(47) ColumnarToRow [codegen id : 21]
Input [5]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, qoh#28]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = inv_date_sk#4 IN dynamicpruning#5
BroadcastExchange (52)
+- * ColumnarToRow (51)
   +- CometProject (50)
      +- CometFilter (49)
         +- CometScan parquet spark_catalog.default.date_dim (48)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_month_seq#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(49) CometFilter
Input [2]: [d_date_sk#6, d_month_seq#43]
Condition : (((isnotnull(d_month_seq#43) AND (d_month_seq#43 >= 1212)) AND (d_month_seq#43 <= 1223)) AND isnotnull(d_date_sk#6))

(50) CometProject
Input [2]: [d_date_sk#6, d_month_seq#43]
Arguments: [d_date_sk#6], [d_date_sk#6]

(51) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#6]

(52) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]


