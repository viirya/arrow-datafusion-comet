== Physical Plan ==
* ColumnarToRow (71)
+- CometTakeOrderedAndProject (70)
   +- CometHashAggregate (69)
      +- CometColumnarExchange (68)
         +- CometHashAggregate (67)
            +- CometProject (66)
               +- CometSortMergeJoin (65)
                  :- CometSort (59)
                  :  +- CometColumnarExchange (58)
                  :     +- RowToColumnar (57)
                  :        +- * Project (56)
                  :           +- * BroadcastHashJoin LeftOuter BuildRight (55)
                  :              :- * Project (50)
                  :              :  +- * BroadcastHashJoin Inner BuildRight (49)
                  :              :     :- * Project (44)
                  :              :     :  +- * BroadcastHashJoin Inner BuildRight (43)
                  :              :     :     :- * Project (38)
                  :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (37)
                  :              :     :     :     :- * Project (35)
                  :              :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (34)
                  :              :     :     :     :     :- * Project (28)
                  :              :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (27)
                  :              :     :     :     :     :     :- * Project (21)
                  :              :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (20)
                  :              :     :     :     :     :     :     :- * Project (15)
                  :              :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (14)
                  :              :     :     :     :     :     :     :     :- * Project (9)
                  :              :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
                  :              :     :     :     :     :     :     :     :     :- * ColumnarToRow (3)
                  :              :     :     :     :     :     :     :     :     :  +- CometFilter (2)
                  :              :     :     :     :     :     :     :     :     :     +- CometScan parquet spark_catalog.default.catalog_sales (1)
                  :              :     :     :     :     :     :     :     :     +- BroadcastExchange (7)
                  :              :     :     :     :     :     :     :     :        +- * ColumnarToRow (6)
                  :              :     :     :     :     :     :     :     :           +- CometFilter (5)
                  :              :     :     :     :     :     :     :     :              +- CometScan parquet spark_catalog.default.inventory (4)
                  :              :     :     :     :     :     :     :     +- BroadcastExchange (13)
                  :              :     :     :     :     :     :     :        +- * ColumnarToRow (12)
                  :              :     :     :     :     :     :     :           +- CometFilter (11)
                  :              :     :     :     :     :     :     :              +- CometScan parquet spark_catalog.default.warehouse (10)
                  :              :     :     :     :     :     :     +- BroadcastExchange (19)
                  :              :     :     :     :     :     :        +- * ColumnarToRow (18)
                  :              :     :     :     :     :     :           +- CometFilter (17)
                  :              :     :     :     :     :     :              +- CometScan parquet spark_catalog.default.item (16)
                  :              :     :     :     :     :     +- BroadcastExchange (26)
                  :              :     :     :     :     :        +- * ColumnarToRow (25)
                  :              :     :     :     :     :           +- CometProject (24)
                  :              :     :     :     :     :              +- CometFilter (23)
                  :              :     :     :     :     :                 +- CometScan parquet spark_catalog.default.customer_demographics (22)
                  :              :     :     :     :     +- BroadcastExchange (33)
                  :              :     :     :     :        +- * ColumnarToRow (32)
                  :              :     :     :     :           +- CometProject (31)
                  :              :     :     :     :              +- CometFilter (30)
                  :              :     :     :     :                 +- CometScan parquet spark_catalog.default.household_demographics (29)
                  :              :     :     :     +- ReusedExchange (36)
                  :              :     :     +- BroadcastExchange (42)
                  :              :     :        +- * ColumnarToRow (41)
                  :              :     :           +- CometFilter (40)
                  :              :     :              +- CometScan parquet spark_catalog.default.date_dim (39)
                  :              :     +- BroadcastExchange (48)
                  :              :        +- * ColumnarToRow (47)
                  :              :           +- CometFilter (46)
                  :              :              +- CometScan parquet spark_catalog.default.date_dim (45)
                  :              +- BroadcastExchange (54)
                  :                 +- * ColumnarToRow (53)
                  :                    +- CometFilter (52)
                  :                       +- CometScan parquet spark_catalog.default.promotion (51)
                  +- CometSort (64)
                     +- CometColumnarExchange (63)
                        +- CometProject (62)
                           +- CometFilter (61)
                              +- CometScan parquet spark_catalog.default.catalog_returns (60)


(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#8), dynamicpruningexpression(cs_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(cs_quantity), IsNotNull(cs_item_sk), IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_hdemo_sk), IsNotNull(cs_ship_date_sk)]
ReadSchema: struct<cs_ship_date_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_quantity:int>

(2) CometFilter
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Condition : ((((isnotnull(cs_quantity#7) AND isnotnull(cs_item_sk#4)) AND isnotnull(cs_bill_cdemo_sk#2)) AND isnotnull(cs_bill_hdemo_sk#3)) AND isnotnull(cs_ship_date_sk#1))

(3) ColumnarToRow [codegen id : 10]
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]

(unknown) Scan parquet spark_catalog.default.inventory
Output [4]: [inv_item_sk#10, inv_warehouse_sk#11, inv_quantity_on_hand#12, inv_date_sk#13]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#13)]
PushedFilters: [IsNotNull(inv_quantity_on_hand), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(5) CometFilter
Input [4]: [inv_item_sk#10, inv_warehouse_sk#11, inv_quantity_on_hand#12, inv_date_sk#13]
Condition : ((isnotnull(inv_quantity_on_hand#12) AND isnotnull(inv_item_sk#10)) AND isnotnull(inv_warehouse_sk#11))

(6) ColumnarToRow [codegen id : 1]
Input [4]: [inv_item_sk#10, inv_warehouse_sk#11, inv_quantity_on_hand#12, inv_date_sk#13]

(7) BroadcastExchange
Input [4]: [inv_item_sk#10, inv_warehouse_sk#11, inv_quantity_on_hand#12, inv_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [inv_item_sk#10]
Join type: Inner
Join condition: (inv_quantity_on_hand#12 < cs_quantity#7)

(9) Project [codegen id : 10]
Output [9]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_warehouse_sk#11, inv_date_sk#13]
Input [12]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, inv_item_sk#10, inv_warehouse_sk#11, inv_quantity_on_hand#12, inv_date_sk#13]

(unknown) Scan parquet spark_catalog.default.warehouse
Output [2]: [w_warehouse_sk#14, w_warehouse_name#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(11) CometFilter
Input [2]: [w_warehouse_sk#14, w_warehouse_name#15]
Condition : isnotnull(w_warehouse_sk#14)

(12) ColumnarToRow [codegen id : 2]
Input [2]: [w_warehouse_sk#14, w_warehouse_name#15]

(13) BroadcastExchange
Input [2]: [w_warehouse_sk#14, w_warehouse_name#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [inv_warehouse_sk#11]
Right keys [1]: [w_warehouse_sk#14]
Join type: Inner
Join condition: None

(15) Project [codegen id : 10]
Output [9]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_date_sk#13, w_warehouse_name#15]
Input [11]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_warehouse_sk#11, inv_date_sk#13, w_warehouse_sk#14, w_warehouse_name#15]

(unknown) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#16, i_item_desc#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(17) CometFilter
Input [2]: [i_item_sk#16, i_item_desc#17]
Condition : isnotnull(i_item_sk#16)

(18) ColumnarToRow [codegen id : 3]
Input [2]: [i_item_sk#16, i_item_desc#17]

(19) BroadcastExchange
Input [2]: [i_item_sk#16, i_item_desc#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(20) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#16]
Join type: Inner
Join condition: None

(21) Project [codegen id : 10]
Output [10]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_date_sk#13, w_warehouse_name#15, i_item_desc#17]
Input [11]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_date_sk#13, w_warehouse_name#15, i_item_sk#16, i_item_desc#17]

(unknown) Scan parquet spark_catalog.default.customer_demographics
Output [2]: [cd_demo_sk#18, cd_marital_status#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,M), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(23) CometFilter
Input [2]: [cd_demo_sk#18, cd_marital_status#19]
Condition : ((isnotnull(cd_marital_status#19) AND (cd_marital_status#19 = M)) AND isnotnull(cd_demo_sk#18))

(24) CometProject
Input [2]: [cd_demo_sk#18, cd_marital_status#19]
Arguments: [cd_demo_sk#18], [cd_demo_sk#18]

(25) ColumnarToRow [codegen id : 4]
Input [1]: [cd_demo_sk#18]

(26) BroadcastExchange
Input [1]: [cd_demo_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(27) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#18]
Join type: Inner
Join condition: None

(28) Project [codegen id : 10]
Output [9]: [cs_ship_date_sk#1, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_date_sk#13, w_warehouse_name#15, i_item_desc#17]
Input [11]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_date_sk#13, w_warehouse_name#15, i_item_desc#17, cd_demo_sk#18]

(unknown) Scan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#20, hd_buy_potential#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,1001-5000      ), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>

(30) CometFilter
Input [2]: [hd_demo_sk#20, hd_buy_potential#21]
Condition : ((isnotnull(hd_buy_potential#21) AND (hd_buy_potential#21 = 1001-5000      )) AND isnotnull(hd_demo_sk#20))

(31) CometProject
Input [2]: [hd_demo_sk#20, hd_buy_potential#21]
Arguments: [hd_demo_sk#20], [hd_demo_sk#20]

(32) ColumnarToRow [codegen id : 5]
Input [1]: [hd_demo_sk#20]

(33) BroadcastExchange
Input [1]: [hd_demo_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(34) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_bill_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#20]
Join type: Inner
Join condition: None

(35) Project [codegen id : 10]
Output [8]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_date_sk#13, w_warehouse_name#15, i_item_desc#17]
Input [10]: [cs_ship_date_sk#1, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_date_sk#13, w_warehouse_name#15, i_item_desc#17, hd_demo_sk#20]

(36) ReusedExchange [Reuses operator id: 76]
Output [3]: [d_date_sk#22, d_date#23, d_week_seq#24]

(37) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#8]
Right keys [1]: [d_date_sk#22]
Join type: Inner
Join condition: None

(38) Project [codegen id : 10]
Output [9]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, inv_date_sk#13, w_warehouse_name#15, i_item_desc#17, d_date#23, d_week_seq#24]
Input [11]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_date_sk#13, w_warehouse_name#15, i_item_desc#17, d_date_sk#22, d_date#23, d_week_seq#24]

(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#25, d_week_seq#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(40) CometFilter
Input [2]: [d_date_sk#25, d_week_seq#26]
Condition : (isnotnull(d_week_seq#26) AND isnotnull(d_date_sk#25))

(41) ColumnarToRow [codegen id : 7]
Input [2]: [d_date_sk#25, d_week_seq#26]

(42) BroadcastExchange
Input [2]: [d_date_sk#25, d_week_seq#26]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, false] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [plan_id=6]

(43) BroadcastHashJoin [codegen id : 10]
Left keys [2]: [d_week_seq#24, inv_date_sk#13]
Right keys [2]: [d_week_seq#26, d_date_sk#25]
Join type: Inner
Join condition: None

(44) Project [codegen id : 10]
Output [8]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, w_warehouse_name#15, i_item_desc#17, d_date#23, d_week_seq#24]
Input [11]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, inv_date_sk#13, w_warehouse_name#15, i_item_desc#17, d_date#23, d_week_seq#24, d_date_sk#25, d_week_seq#26]

(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#27, d_date#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(46) CometFilter
Input [2]: [d_date_sk#27, d_date#28]
Condition : (isnotnull(d_date#28) AND isnotnull(d_date_sk#27))

(47) ColumnarToRow [codegen id : 8]
Input [2]: [d_date_sk#27, d_date#28]

(48) BroadcastExchange
Input [2]: [d_date_sk#27, d_date#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=7]

(49) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_ship_date_sk#1]
Right keys [1]: [d_date_sk#27]
Join type: Inner
Join condition: (d_date#28 > date_add(d_date#23, 5))

(50) Project [codegen id : 10]
Output [6]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, w_warehouse_name#15, i_item_desc#17, d_week_seq#24]
Input [10]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, w_warehouse_name#15, i_item_desc#17, d_date#23, d_week_seq#24, d_date_sk#27, d_date#28]

(unknown) Scan parquet spark_catalog.default.promotion
Output [1]: [p_promo_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int>

(52) CometFilter
Input [1]: [p_promo_sk#29]
Condition : isnotnull(p_promo_sk#29)

(53) ColumnarToRow [codegen id : 9]
Input [1]: [p_promo_sk#29]

(54) BroadcastExchange
Input [1]: [p_promo_sk#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(55) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_promo_sk#5]
Right keys [1]: [p_promo_sk#29]
Join type: LeftOuter
Join condition: None

(56) Project [codegen id : 10]
Output [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#15, i_item_desc#17, d_week_seq#24]
Input [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, w_warehouse_name#15, i_item_desc#17, d_week_seq#24, p_promo_sk#29]

(57) RowToColumnar
Input [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#15, i_item_desc#17, d_week_seq#24]

(58) CometColumnarExchange
Input [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#15, i_item_desc#17, d_week_seq#24]
Arguments: hashpartitioning(cs_item_sk#4, cs_order_number#6, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(59) CometSort
Input [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#15, i_item_desc#17, d_week_seq#24]
Arguments: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#15, i_item_desc#17, d_week_seq#24], [cs_item_sk#4 ASC NULLS FIRST, cs_order_number#6 ASC NULLS FIRST]

(unknown) Scan parquet spark_catalog.default.catalog_returns
Output [3]: [cr_item_sk#30, cr_order_number#31, cr_returned_date_sk#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int>

(61) CometFilter
Input [3]: [cr_item_sk#30, cr_order_number#31, cr_returned_date_sk#32]
Condition : (isnotnull(cr_item_sk#30) AND isnotnull(cr_order_number#31))

(62) CometProject
Input [3]: [cr_item_sk#30, cr_order_number#31, cr_returned_date_sk#32]
Arguments: [cr_item_sk#30, cr_order_number#31], [cr_item_sk#30, cr_order_number#31]

(63) CometColumnarExchange
Input [2]: [cr_item_sk#30, cr_order_number#31]
Arguments: hashpartitioning(cr_item_sk#30, cr_order_number#31, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(64) CometSort
Input [2]: [cr_item_sk#30, cr_order_number#31]
Arguments: [cr_item_sk#30, cr_order_number#31], [cr_item_sk#30 ASC NULLS FIRST, cr_order_number#31 ASC NULLS FIRST]

(65) CometSortMergeJoin
Left output [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#15, i_item_desc#17, d_week_seq#24]
Right output [2]: [cr_item_sk#30, cr_order_number#31]
Arguments: [cs_item_sk#4, cs_order_number#6], [cr_item_sk#30, cr_order_number#31], LeftOuter

(66) CometProject
Input [7]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#15, i_item_desc#17, d_week_seq#24, cr_item_sk#30, cr_order_number#31]
Arguments: [w_warehouse_name#15, i_item_desc#17, d_week_seq#24], [w_warehouse_name#15, i_item_desc#17, d_week_seq#24]

(67) CometHashAggregate
Input [3]: [w_warehouse_name#15, i_item_desc#17, d_week_seq#24]
Keys [3]: [i_item_desc#17, w_warehouse_name#15, d_week_seq#24]
Functions [1]: [partial_count(1)]

(68) CometColumnarExchange
Input [4]: [i_item_desc#17, w_warehouse_name#15, d_week_seq#24, count#33]
Arguments: hashpartitioning(i_item_desc#17, w_warehouse_name#15, d_week_seq#24, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=11]

(69) CometHashAggregate
Input [4]: [i_item_desc#17, w_warehouse_name#15, d_week_seq#24, count#33]
Keys [3]: [i_item_desc#17, w_warehouse_name#15, d_week_seq#24]
Functions [1]: [count(1)]

(70) CometTakeOrderedAndProject
Input [6]: [i_item_desc#17, w_warehouse_name#15, d_week_seq#24, no_promo#34, promo#35, total_cnt#36]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[total_cnt#36 DESC NULLS LAST,i_item_desc#17 ASC NULLS FIRST,w_warehouse_name#15 ASC NULLS FIRST,d_week_seq#24 ASC NULLS FIRST], output=[i_item_desc#17,w_warehouse_name#15,d_week_seq#24,no_promo#34,promo#35,total_cnt#36]), 100, [total_cnt#36 DESC NULLS LAST, i_item_desc#17 ASC NULLS FIRST, w_warehouse_name#15 ASC NULLS FIRST, d_week_seq#24 ASC NULLS FIRST], [i_item_desc#17, w_warehouse_name#15, d_week_seq#24, no_promo#34, promo#35, total_cnt#36]

(71) ColumnarToRow [codegen id : 11]
Input [6]: [i_item_desc#17, w_warehouse_name#15, d_week_seq#24, no_promo#34, promo#35, total_cnt#36]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (76)
+- * ColumnarToRow (75)
   +- CometProject (74)
      +- CometFilter (73)
         +- CometScan parquet spark_catalog.default.date_dim (72)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_date_sk#22, d_date#23, d_week_seq#24, d_year#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(d_date)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>

(73) CometFilter
Input [4]: [d_date_sk#22, d_date#23, d_week_seq#24, d_year#37]
Condition : ((((isnotnull(d_year#37) AND (d_year#37 = 2001)) AND isnotnull(d_date_sk#22)) AND isnotnull(d_week_seq#24)) AND isnotnull(d_date#23))

(74) CometProject
Input [4]: [d_date_sk#22, d_date#23, d_week_seq#24, d_year#37]
Arguments: [d_date_sk#22, d_date#23, d_week_seq#24], [d_date_sk#22, d_date#23, d_week_seq#24]

(75) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#22, d_date#23, d_week_seq#24]

(76) BroadcastExchange
Input [3]: [d_date_sk#22, d_date#23, d_week_seq#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]


