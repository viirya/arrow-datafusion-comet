== Physical Plan ==
* ColumnarToRow (77)
+- CometTakeOrderedAndProject (76)
   +- CometUnion (75)
      :- CometHashAggregate (29)
      :  +- CometColumnarExchange (28)
      :     +- RowToColumnar (27)
      :        +- * HashAggregate (26)
      :           +- * Project (25)
      :              +- * BroadcastHashJoin Inner BuildRight (24)
      :                 :- * Project (19)
      :                 :  +- * BroadcastHashJoin Inner BuildRight (18)
      :                 :     :- * Project (13)
      :                 :     :  +- * BroadcastHashJoin Inner BuildRight (12)
      :                 :     :     :- * Project (10)
      :                 :     :     :  +- * BroadcastHashJoin Inner BuildRight (9)
      :                 :     :     :     :- * ColumnarToRow (3)
      :                 :     :     :     :  +- CometFilter (2)
      :                 :     :     :     :     +- CometScan parquet spark_catalog.default.store_sales (1)
      :                 :     :     :     +- BroadcastExchange (8)
      :                 :     :     :        +- * ColumnarToRow (7)
      :                 :     :     :           +- CometProject (6)
      :                 :     :     :              +- CometFilter (5)
      :                 :     :     :                 +- CometScan parquet spark_catalog.default.customer_demographics (4)
      :                 :     :     +- ReusedExchange (11)
      :                 :     +- BroadcastExchange (17)
      :                 :        +- * ColumnarToRow (16)
      :                 :           +- CometFilter (15)
      :                 :              +- CometScan parquet spark_catalog.default.store (14)
      :                 +- BroadcastExchange (23)
      :                    +- * ColumnarToRow (22)
      :                       +- CometFilter (21)
      :                          +- CometScan parquet spark_catalog.default.item (20)
      :- CometHashAggregate (52)
      :  +- CometColumnarExchange (51)
      :     +- RowToColumnar (50)
      :        +- * HashAggregate (49)
      :           +- * Project (48)
      :              +- * BroadcastHashJoin Inner BuildRight (47)
      :                 :- * Project (45)
      :                 :  +- * BroadcastHashJoin Inner BuildRight (44)
      :                 :     :- * Project (38)
      :                 :     :  +- * BroadcastHashJoin Inner BuildRight (37)
      :                 :     :     :- * Project (35)
      :                 :     :     :  +- * BroadcastHashJoin Inner BuildRight (34)
      :                 :     :     :     :- * ColumnarToRow (32)
      :                 :     :     :     :  +- CometFilter (31)
      :                 :     :     :     :     +- CometScan parquet spark_catalog.default.store_sales (30)
      :                 :     :     :     +- ReusedExchange (33)
      :                 :     :     +- ReusedExchange (36)
      :                 :     +- BroadcastExchange (43)
      :                 :        +- * ColumnarToRow (42)
      :                 :           +- CometProject (41)
      :                 :              +- CometFilter (40)
      :                 :                 +- CometScan parquet spark_catalog.default.store (39)
      :                 +- ReusedExchange (46)
      +- CometHashAggregate (74)
         +- CometColumnarExchange (73)
            +- RowToColumnar (72)
               +- * HashAggregate (71)
                  +- * Project (70)
                     +- * BroadcastHashJoin Inner BuildRight (69)
                        :- * Project (64)
                        :  +- * BroadcastHashJoin Inner BuildRight (63)
                        :     :- * Project (61)
                        :     :  +- * BroadcastHashJoin Inner BuildRight (60)
                        :     :     :- * Project (58)
                        :     :     :  +- * BroadcastHashJoin Inner BuildRight (57)
                        :     :     :     :- * ColumnarToRow (55)
                        :     :     :     :  +- CometFilter (54)
                        :     :     :     :     +- CometScan parquet spark_catalog.default.store_sales (53)
                        :     :     :     +- ReusedExchange (56)
                        :     :     +- ReusedExchange (59)
                        :     +- ReusedExchange (62)
                        +- BroadcastExchange (68)
                           +- * ColumnarToRow (67)
                              +- CometFilter (66)
                                 +- CometScan parquet spark_catalog.default.item (65)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) CometFilter
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1))

(3) ColumnarToRow [codegen id : 5]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(unknown) Scan parquet spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_gender,F), EqualTo(cd_marital_status,W), EqualTo(cd_education_status,Primary             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(5) CometFilter
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Condition : ((((((isnotnull(cd_gender#11) AND isnotnull(cd_marital_status#12)) AND isnotnull(cd_education_status#13)) AND (cd_gender#11 = F)) AND (cd_marital_status#12 = W)) AND (cd_education_status#13 = Primary             )) AND isnotnull(cd_demo_sk#10))

(6) CometProject
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Arguments: [cd_demo_sk#10], [cd_demo_sk#10]

(7) ColumnarToRow [codegen id : 1]
Input [1]: [cd_demo_sk#10]

(8) BroadcastExchange
Input [1]: [cd_demo_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#10]
Join type: Inner
Join condition: None

(10) Project [codegen id : 5]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#10]

(11) ReusedExchange [Reuses operator id: 82]
Output [1]: [d_date_sk#14]

(12) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#14]
Join type: Inner
Join condition: None

(13) Project [codegen id : 5]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#14]

(unknown) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#15, s_state#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(15) CometFilter
Input [2]: [s_store_sk#15, s_state#16]
Condition : ((isnotnull(s_state#16) AND (s_state#16 = TN)) AND isnotnull(s_store_sk#15))

(16) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#15, s_state#16]

(17) BroadcastExchange
Input [2]: [s_store_sk#15, s_state#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#15]
Join type: Inner
Join condition: None

(19) Project [codegen id : 5]
Output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#16]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_store_sk#15, s_state#16]

(unknown) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#17, i_item_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(21) CometFilter
Input [2]: [i_item_sk#17, i_item_id#18]
Condition : isnotnull(i_item_sk#17)

(22) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#17, i_item_id#18]

(23) BroadcastExchange
Input [2]: [i_item_sk#17, i_item_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(24) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#17]
Join type: Inner
Join condition: None

(25) Project [codegen id : 5]
Output [6]: [i_item_id#18, s_state#16, ss_quantity#4 AS agg1#19, ss_list_price#5 AS agg2#20, ss_coupon_amt#7 AS agg3#21, ss_sales_price#6 AS agg4#22]
Input [8]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#16, i_item_sk#17, i_item_id#18]

(26) HashAggregate [codegen id : 5]
Input [6]: [i_item_id#18, s_state#16, agg1#19, agg2#20, agg3#21, agg4#22]
Keys [2]: [i_item_id#18, s_state#16]
Functions [4]: [partial_avg(agg1#19), partial_avg(UnscaledValue(agg2#20)), partial_avg(UnscaledValue(agg3#21)), partial_avg(UnscaledValue(agg4#22))]
Aggregate Attributes [8]: [sum#23, count#24, sum#25, count#26, sum#27, count#28, sum#29, count#30]
Results [10]: [i_item_id#18, s_state#16, sum#31, count#32, sum#33, count#34, sum#35, count#36, sum#37, count#38]

(27) RowToColumnar
Input [10]: [i_item_id#18, s_state#16, sum#31, count#32, sum#33, count#34, sum#35, count#36, sum#37, count#38]

(28) CometColumnarExchange
Input [10]: [i_item_id#18, s_state#16, sum#31, count#32, sum#33, count#34, sum#35, count#36, sum#37, count#38]
Arguments: hashpartitioning(i_item_id#18, s_state#16, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(29) CometHashAggregate
Input [10]: [i_item_id#18, s_state#16, sum#31, count#32, sum#33, count#34, sum#35, count#36, sum#37, count#38]
Keys [2]: [i_item_id#18, s_state#16]
Functions [4]: [avg(agg1#19), avg(UnscaledValue(agg2#20)), avg(UnscaledValue(agg3#21)), avg(UnscaledValue(agg4#22))]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#39)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(31) CometFilter
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1))

(32) ColumnarToRow [codegen id : 10]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(33) ReusedExchange [Reuses operator id: 8]
Output [1]: [cd_demo_sk#10]

(34) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#10]
Join type: Inner
Join condition: None

(35) Project [codegen id : 10]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#10]

(36) ReusedExchange [Reuses operator id: 82]
Output [1]: [d_date_sk#14]

(37) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#14]
Join type: Inner
Join condition: None

(38) Project [codegen id : 10]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#14]

(unknown) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#15, s_state#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(40) CometFilter
Input [2]: [s_store_sk#15, s_state#16]
Condition : ((isnotnull(s_state#16) AND (s_state#16 = TN)) AND isnotnull(s_store_sk#15))

(41) CometProject
Input [2]: [s_store_sk#15, s_state#16]
Arguments: [s_store_sk#15], [s_store_sk#15]

(42) ColumnarToRow [codegen id : 8]
Input [1]: [s_store_sk#15]

(43) BroadcastExchange
Input [1]: [s_store_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(44) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#15]
Join type: Inner
Join condition: None

(45) Project [codegen id : 10]
Output [5]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_store_sk#15]

(46) ReusedExchange [Reuses operator id: 23]
Output [2]: [i_item_sk#17, i_item_id#18]

(47) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#17]
Join type: Inner
Join condition: None

(48) Project [codegen id : 10]
Output [5]: [i_item_id#18, ss_quantity#4 AS agg1#19, ss_list_price#5 AS agg2#20, ss_coupon_amt#7 AS agg3#21, ss_sales_price#6 AS agg4#22]
Input [7]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_sk#17, i_item_id#18]

(49) HashAggregate [codegen id : 10]
Input [5]: [i_item_id#18, agg1#19, agg2#20, agg3#21, agg4#22]
Keys [1]: [i_item_id#18]
Functions [4]: [partial_avg(agg1#19), partial_avg(UnscaledValue(agg2#20)), partial_avg(UnscaledValue(agg3#21)), partial_avg(UnscaledValue(agg4#22))]
Aggregate Attributes [8]: [sum#40, count#41, sum#42, count#43, sum#44, count#45, sum#46, count#47]
Results [9]: [i_item_id#18, sum#48, count#49, sum#50, count#51, sum#52, count#53, sum#54, count#55]

(50) RowToColumnar
Input [9]: [i_item_id#18, sum#48, count#49, sum#50, count#51, sum#52, count#53, sum#54, count#55]

(51) CometColumnarExchange
Input [9]: [i_item_id#18, sum#48, count#49, sum#50, count#51, sum#52, count#53, sum#54, count#55]
Arguments: hashpartitioning(i_item_id#18, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(52) CometHashAggregate
Input [9]: [i_item_id#18, sum#48, count#49, sum#50, count#51, sum#52, count#53, sum#54, count#55]
Keys [1]: [i_item_id#18]
Functions [4]: [avg(agg1#19), avg(UnscaledValue(agg2#20)), avg(UnscaledValue(agg3#21)), avg(UnscaledValue(agg4#22))]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#56)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(54) CometFilter
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1))

(55) ColumnarToRow [codegen id : 15]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(56) ReusedExchange [Reuses operator id: 8]
Output [1]: [cd_demo_sk#10]

(57) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#10]
Join type: Inner
Join condition: None

(58) Project [codegen id : 15]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#10]

(59) ReusedExchange [Reuses operator id: 82]
Output [1]: [d_date_sk#14]

(60) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#14]
Join type: Inner
Join condition: None

(61) Project [codegen id : 15]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#14]

(62) ReusedExchange [Reuses operator id: 43]
Output [1]: [s_store_sk#15]

(63) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#15]
Join type: Inner
Join condition: None

(64) Project [codegen id : 15]
Output [5]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_store_sk#15]

(unknown) Scan parquet spark_catalog.default.item
Output [1]: [i_item_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(66) CometFilter
Input [1]: [i_item_sk#17]
Condition : isnotnull(i_item_sk#17)

(67) ColumnarToRow [codegen id : 14]
Input [1]: [i_item_sk#17]

(68) BroadcastExchange
Input [1]: [i_item_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=7]

(69) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#17]
Join type: Inner
Join condition: None

(70) Project [codegen id : 15]
Output [4]: [ss_quantity#4 AS agg1#19, ss_list_price#5 AS agg2#20, ss_coupon_amt#7 AS agg3#21, ss_sales_price#6 AS agg4#22]
Input [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_sk#17]

(71) HashAggregate [codegen id : 15]
Input [4]: [agg1#19, agg2#20, agg3#21, agg4#22]
Keys: []
Functions [4]: [partial_avg(agg1#19), partial_avg(UnscaledValue(agg2#20)), partial_avg(UnscaledValue(agg3#21)), partial_avg(UnscaledValue(agg4#22))]
Aggregate Attributes [8]: [sum#57, count#58, sum#59, count#60, sum#61, count#62, sum#63, count#64]
Results [8]: [sum#65, count#66, sum#67, count#68, sum#69, count#70, sum#71, count#72]

(72) RowToColumnar
Input [8]: [sum#65, count#66, sum#67, count#68, sum#69, count#70, sum#71, count#72]

(73) CometColumnarExchange
Input [8]: [sum#65, count#66, sum#67, count#68, sum#69, count#70, sum#71, count#72]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=8]

(74) CometHashAggregate
Input [8]: [sum#65, count#66, sum#67, count#68, sum#69, count#70, sum#71, count#72]
Keys: []
Functions [4]: [avg(agg1#19), avg(UnscaledValue(agg2#20)), avg(UnscaledValue(agg3#21)), avg(UnscaledValue(agg4#22))]

(75) CometUnion
Child 0 Input [7]: [i_item_id#18, s_state#16, g_state#73, agg1#74, agg2#75, agg3#76, agg4#77]
Child 1 Input [7]: [i_item_id#18, s_state#78, g_state#79, agg1#80, agg2#81, agg3#82, agg4#83]
Child 2 Input [7]: [i_item_id#84, s_state#85, g_state#86, agg1#87, agg2#88, agg3#89, agg4#90]

(76) CometTakeOrderedAndProject
Input [7]: [i_item_id#18, s_state#16, g_state#73, agg1#74, agg2#75, agg3#76, agg4#77]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[i_item_id#18 ASC NULLS FIRST,s_state#16 ASC NULLS FIRST], output=[i_item_id#18,s_state#16,g_state#73,agg1#74,agg2#75,agg3#76,agg4#77]), 100, [i_item_id#18 ASC NULLS FIRST, s_state#16 ASC NULLS FIRST], [i_item_id#18, s_state#16, g_state#73, agg1#74, agg2#75, agg3#76, agg4#77]

(77) ColumnarToRow [codegen id : 16]
Input [7]: [i_item_id#18, s_state#16, g_state#73, agg1#74, agg2#75, agg3#76, agg4#77]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (82)
+- * ColumnarToRow (81)
   +- CometProject (80)
      +- CometFilter (79)
         +- CometScan parquet spark_catalog.default.date_dim (78)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_year#91]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(79) CometFilter
Input [2]: [d_date_sk#14, d_year#91]
Condition : ((isnotnull(d_year#91) AND (d_year#91 = 1998)) AND isnotnull(d_date_sk#14))

(80) CometProject
Input [2]: [d_date_sk#14, d_year#91]
Arguments: [d_date_sk#14], [d_date_sk#14]

(81) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#14]

(82) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

Subquery:2 Hosting operator id = 30 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9

Subquery:3 Hosting operator id = 53 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9


