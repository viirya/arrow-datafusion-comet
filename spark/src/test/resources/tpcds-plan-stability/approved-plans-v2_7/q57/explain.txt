== Physical Plan ==
TakeOrderedAndProject (47)
+- * Project (46)
   +- * BroadcastHashJoin Inner BuildRight (45)
      :- * Project (38)
      :  +- * BroadcastHashJoin Inner BuildRight (37)
      :     :- * Project (30)
      :     :  +- * Filter (29)
      :     :     +- Window (28)
      :     :        +- * Filter (27)
      :     :           +- Window (26)
      :     :              +- * ColumnarToRow (25)
      :     :                 +- CometSort (24)
      :     :                    +- CometColumnarExchange (23)
      :     :                       +- CometHashAggregate (22)
      :     :                          +- CometColumnarExchange (21)
      :     :                             +- RowToColumnar (20)
      :     :                                +- * HashAggregate (19)
      :     :                                   +- * Project (18)
      :     :                                      +- * BroadcastHashJoin Inner BuildRight (17)
      :     :                                         :- * Project (12)
      :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (11)
      :     :                                         :     :- * Project (9)
      :     :                                         :     :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :                                         :     :     :- * ColumnarToRow (3)
      :     :                                         :     :     :  +- CometFilter (2)
      :     :                                         :     :     :     +- CometScan parquet spark_catalog.default.item (1)
      :     :                                         :     :     +- BroadcastExchange (7)
      :     :                                         :     :        +- * ColumnarToRow (6)
      :     :                                         :     :           +- CometFilter (5)
      :     :                                         :     :              +- CometScan parquet spark_catalog.default.catalog_sales (4)
      :     :                                         :     +- ReusedExchange (10)
      :     :                                         +- BroadcastExchange (16)
      :     :                                            +- * ColumnarToRow (15)
      :     :                                               +- CometFilter (14)
      :     :                                                  +- CometScan parquet spark_catalog.default.call_center (13)
      :     +- BroadcastExchange (36)
      :        +- * Project (35)
      :           +- Window (34)
      :              +- * ColumnarToRow (33)
      :                 +- CometSort (32)
      :                    +- ReusedExchange (31)
      +- BroadcastExchange (44)
         +- * Project (43)
            +- Window (42)
               +- * ColumnarToRow (41)
                  +- CometSort (40)
                     +- ReusedExchange (39)


(unknown) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#1, i_brand#2, i_category#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_category), IsNotNull(i_brand)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>

(2) CometFilter
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]
Condition : ((isnotnull(i_item_sk#1) AND isnotnull(i_category#3)) AND isnotnull(i_brand#2))

(3) ColumnarToRow [codegen id : 4]
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_call_center_sk#4, cs_item_sk#5, cs_sales_price#6, cs_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#7), dynamicpruningexpression(cs_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_call_center_sk)]
ReadSchema: struct<cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)>

(5) CometFilter
Input [4]: [cs_call_center_sk#4, cs_item_sk#5, cs_sales_price#6, cs_sold_date_sk#7]
Condition : (isnotnull(cs_item_sk#5) AND isnotnull(cs_call_center_sk#4))

(6) ColumnarToRow [codegen id : 1]
Input [4]: [cs_call_center_sk#4, cs_item_sk#5, cs_sales_price#6, cs_sold_date_sk#7]

(7) BroadcastExchange
Input [4]: [cs_call_center_sk#4, cs_item_sk#5, cs_sales_price#6, cs_sold_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [cs_item_sk#5]
Join type: Inner
Join condition: None

(9) Project [codegen id : 4]
Output [5]: [i_brand#2, i_category#3, cs_call_center_sk#4, cs_sales_price#6, cs_sold_date_sk#7]
Input [7]: [i_item_sk#1, i_brand#2, i_category#3, cs_call_center_sk#4, cs_item_sk#5, cs_sales_price#6, cs_sold_date_sk#7]

(10) ReusedExchange [Reuses operator id: 51]
Output [3]: [d_date_sk#9, d_year#10, d_moy#11]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join type: Inner
Join condition: None

(12) Project [codegen id : 4]
Output [6]: [i_brand#2, i_category#3, cs_call_center_sk#4, cs_sales_price#6, d_year#10, d_moy#11]
Input [8]: [i_brand#2, i_category#3, cs_call_center_sk#4, cs_sales_price#6, cs_sold_date_sk#7, d_date_sk#9, d_year#10, d_moy#11]

(unknown) Scan parquet spark_catalog.default.call_center
Output [2]: [cc_call_center_sk#12, cc_name#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk), IsNotNull(cc_name)]
ReadSchema: struct<cc_call_center_sk:int,cc_name:string>

(14) CometFilter
Input [2]: [cc_call_center_sk#12, cc_name#13]
Condition : (isnotnull(cc_call_center_sk#12) AND isnotnull(cc_name#13))

(15) ColumnarToRow [codegen id : 3]
Input [2]: [cc_call_center_sk#12, cc_name#13]

(16) BroadcastExchange
Input [2]: [cc_call_center_sk#12, cc_name#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_call_center_sk#4]
Right keys [1]: [cc_call_center_sk#12]
Join type: Inner
Join condition: None

(18) Project [codegen id : 4]
Output [6]: [i_brand#2, i_category#3, cs_sales_price#6, d_year#10, d_moy#11, cc_name#13]
Input [8]: [i_brand#2, i_category#3, cs_call_center_sk#4, cs_sales_price#6, d_year#10, d_moy#11, cc_call_center_sk#12, cc_name#13]

(19) HashAggregate [codegen id : 4]
Input [6]: [i_brand#2, i_category#3, cs_sales_price#6, d_year#10, d_moy#11, cc_name#13]
Keys [5]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#6))]
Aggregate Attributes [1]: [sum#14]
Results [6]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum#15]

(20) RowToColumnar
Input [6]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum#15]

(21) CometColumnarExchange
Input [6]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum#15]
Arguments: hashpartitioning(i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(22) CometHashAggregate
Input [6]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum#15]
Keys [5]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11]
Functions [1]: [sum(UnscaledValue(cs_sales_price#6))]

(23) CometColumnarExchange
Input [7]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum_sales#16, _w0#17]
Arguments: hashpartitioning(i_category#3, i_brand#2, cc_name#13, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(24) CometSort
Input [7]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum_sales#16, _w0#17]
Arguments: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum_sales#16, _w0#17], [i_category#3 ASC NULLS FIRST, i_brand#2 ASC NULLS FIRST, cc_name#13 ASC NULLS FIRST, d_year#10 ASC NULLS FIRST, d_moy#11 ASC NULLS FIRST]

(25) ColumnarToRow [codegen id : 5]
Input [7]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum_sales#16, _w0#17]

(26) Window
Input [7]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum_sales#16, _w0#17]
Arguments: [rank(d_year#10, d_moy#11) windowspecdefinition(i_category#3, i_brand#2, cc_name#13, d_year#10 ASC NULLS FIRST, d_moy#11 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#18], [i_category#3, i_brand#2, cc_name#13], [d_year#10 ASC NULLS FIRST, d_moy#11 ASC NULLS FIRST]

(27) Filter [codegen id : 6]
Input [8]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum_sales#16, _w0#17, rn#18]
Condition : (isnotnull(d_year#10) AND (d_year#10 = 1999))

(28) Window
Input [8]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum_sales#16, _w0#17, rn#18]
Arguments: [avg(_w0#17) windowspecdefinition(i_category#3, i_brand#2, cc_name#13, d_year#10, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#19], [i_category#3, i_brand#2, cc_name#13, d_year#10]

(29) Filter [codegen id : 19]
Input [9]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum_sales#16, _w0#17, rn#18, avg_monthly_sales#19]
Condition : ((isnotnull(avg_monthly_sales#19) AND (avg_monthly_sales#19 > 0.000000)) AND CASE WHEN (avg_monthly_sales#19 > 0.000000) THEN ((abs((sum_sales#16 - avg_monthly_sales#19)) / avg_monthly_sales#19) > 0.1000000000000000) END)

(30) Project [codegen id : 19]
Output [8]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum_sales#16, avg_monthly_sales#19, rn#18]
Input [9]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum_sales#16, _w0#17, rn#18, avg_monthly_sales#19]

(31) ReusedExchange [Reuses operator id: 23]
Output [6]: [i_category#20, i_brand#21, cc_name#22, d_year#23, d_moy#24, sum_sales#16]

(32) CometSort
Input [6]: [i_category#20, i_brand#21, cc_name#22, d_year#23, d_moy#24, sum_sales#16]
Arguments: [i_category#20, i_brand#21, cc_name#22, d_year#23, d_moy#24, sum_sales#16], [i_category#20 ASC NULLS FIRST, i_brand#21 ASC NULLS FIRST, cc_name#22 ASC NULLS FIRST, d_year#23 ASC NULLS FIRST, d_moy#24 ASC NULLS FIRST]

(33) ColumnarToRow [codegen id : 11]
Input [6]: [i_category#20, i_brand#21, cc_name#22, d_year#23, d_moy#24, sum_sales#16]

(34) Window
Input [6]: [i_category#20, i_brand#21, cc_name#22, d_year#23, d_moy#24, sum_sales#16]
Arguments: [rank(d_year#23, d_moy#24) windowspecdefinition(i_category#20, i_brand#21, cc_name#22, d_year#23 ASC NULLS FIRST, d_moy#24 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#25], [i_category#20, i_brand#21, cc_name#22], [d_year#23 ASC NULLS FIRST, d_moy#24 ASC NULLS FIRST]

(35) Project [codegen id : 12]
Output [5]: [i_category#20, i_brand#21, cc_name#22, sum_sales#16 AS sum_sales#26, rn#25]
Input [7]: [i_category#20, i_brand#21, cc_name#22, d_year#23, d_moy#24, sum_sales#16, rn#25]

(36) BroadcastExchange
Input [5]: [i_category#20, i_brand#21, cc_name#22, sum_sales#26, rn#25]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, false] + 1)),false), [plan_id=5]

(37) BroadcastHashJoin [codegen id : 19]
Left keys [4]: [i_category#3, i_brand#2, cc_name#13, rn#18]
Right keys [4]: [i_category#20, i_brand#21, cc_name#22, (rn#25 + 1)]
Join type: Inner
Join condition: None

(38) Project [codegen id : 19]
Output [9]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum_sales#16, avg_monthly_sales#19, rn#18, sum_sales#26]
Input [13]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum_sales#16, avg_monthly_sales#19, rn#18, i_category#20, i_brand#21, cc_name#22, sum_sales#26, rn#25]

(39) ReusedExchange [Reuses operator id: 23]
Output [6]: [i_category#27, i_brand#28, cc_name#29, d_year#30, d_moy#31, sum_sales#16]

(40) CometSort
Input [6]: [i_category#27, i_brand#28, cc_name#29, d_year#30, d_moy#31, sum_sales#16]
Arguments: [i_category#27, i_brand#28, cc_name#29, d_year#30, d_moy#31, sum_sales#16], [i_category#27 ASC NULLS FIRST, i_brand#28 ASC NULLS FIRST, cc_name#29 ASC NULLS FIRST, d_year#30 ASC NULLS FIRST, d_moy#31 ASC NULLS FIRST]

(41) ColumnarToRow [codegen id : 17]
Input [6]: [i_category#27, i_brand#28, cc_name#29, d_year#30, d_moy#31, sum_sales#16]

(42) Window
Input [6]: [i_category#27, i_brand#28, cc_name#29, d_year#30, d_moy#31, sum_sales#16]
Arguments: [rank(d_year#30, d_moy#31) windowspecdefinition(i_category#27, i_brand#28, cc_name#29, d_year#30 ASC NULLS FIRST, d_moy#31 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#32], [i_category#27, i_brand#28, cc_name#29], [d_year#30 ASC NULLS FIRST, d_moy#31 ASC NULLS FIRST]

(43) Project [codegen id : 18]
Output [5]: [i_category#27, i_brand#28, cc_name#29, sum_sales#16 AS sum_sales#33, rn#32]
Input [7]: [i_category#27, i_brand#28, cc_name#29, d_year#30, d_moy#31, sum_sales#16, rn#32]

(44) BroadcastExchange
Input [5]: [i_category#27, i_brand#28, cc_name#29, sum_sales#33, rn#32]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, false] - 1)),false), [plan_id=6]

(45) BroadcastHashJoin [codegen id : 19]
Left keys [4]: [i_category#3, i_brand#2, cc_name#13, rn#18]
Right keys [4]: [i_category#27, i_brand#28, cc_name#29, (rn#32 - 1)]
Join type: Inner
Join condition: None

(46) Project [codegen id : 19]
Output [8]: [i_category#3, i_brand#2, d_year#10, d_moy#11, avg_monthly_sales#19, sum_sales#16, sum_sales#26 AS psum#34, sum_sales#33 AS nsum#35]
Input [14]: [i_category#3, i_brand#2, cc_name#13, d_year#10, d_moy#11, sum_sales#16, avg_monthly_sales#19, rn#18, sum_sales#26, i_category#27, i_brand#28, cc_name#29, sum_sales#33, rn#32]

(47) TakeOrderedAndProject
Input [8]: [i_category#3, i_brand#2, d_year#10, d_moy#11, avg_monthly_sales#19, sum_sales#16, psum#34, nsum#35]
Arguments: 100, [(sum_sales#16 - avg_monthly_sales#19) ASC NULLS FIRST, d_year#10 ASC NULLS FIRST], [i_category#3, i_brand#2, d_year#10, d_moy#11, avg_monthly_sales#19, sum_sales#16, psum#34, nsum#35]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = cs_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (51)
+- * ColumnarToRow (50)
   +- CometFilter (49)
      +- CometScan parquet spark_catalog.default.date_dim (48)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_moy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000),EqualTo(d_moy,1))), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(49) CometFilter
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]
Condition : ((((d_year#10 = 1999) OR ((d_year#10 = 1998) AND (d_moy#11 = 12))) OR ((d_year#10 = 2000) AND (d_moy#11 = 1))) AND isnotnull(d_date_sk#9))

(50) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]

(51) BroadcastExchange
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=7]


