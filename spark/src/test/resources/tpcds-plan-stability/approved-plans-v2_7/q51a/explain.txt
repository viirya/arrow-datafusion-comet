== Physical Plan ==
TakeOrderedAndProject (85)
+- * Filter (84)
   +- * HashAggregate (83)
      +- * HashAggregate (82)
         +- * Project (81)
            +- * BroadcastHashJoin Inner BuildRight (80)
               :- Window (73)
               :  +- * ColumnarToRow (72)
               :     +- CometSort (71)
               :        +- CometColumnarExchange (70)
               :           +- CometProject (69)
               :              +- CometFilter (68)
               :                 +- CometSortMergeJoin (67)
               :                    :- CometSort (33)
               :                    :  +- CometColumnarExchange (32)
               :                    :     +- RowToColumnar (31)
               :                    :        +- * HashAggregate (30)
               :                    :           +- * ColumnarToRow (29)
               :                    :              +- CometColumnarExchange (28)
               :                    :                 +- RowToColumnar (27)
               :                    :                    +- * HashAggregate (26)
               :                    :                       +- * Project (25)
               :                    :                          +- * BroadcastHashJoin Inner BuildRight (24)
               :                    :                             :- * Project (17)
               :                    :                             :  +- Window (16)
               :                    :                             :     +- * ColumnarToRow (15)
               :                    :                             :        +- CometSort (14)
               :                    :                             :           +- CometColumnarExchange (13)
               :                    :                             :              +- RowToColumnar (12)
               :                    :                             :                 +- * HashAggregate (11)
               :                    :                             :                    +- * ColumnarToRow (10)
               :                    :                             :                       +- CometColumnarExchange (9)
               :                    :                             :                          +- RowToColumnar (8)
               :                    :                             :                             +- * HashAggregate (7)
               :                    :                             :                                +- * Project (6)
               :                    :                             :                                   +- * BroadcastHashJoin Inner BuildRight (5)
               :                    :                             :                                      :- * ColumnarToRow (3)
               :                    :                             :                                      :  +- CometFilter (2)
               :                    :                             :                                      :     +- CometScan parquet spark_catalog.default.web_sales (1)
               :                    :                             :                                      +- ReusedExchange (4)
               :                    :                             +- BroadcastExchange (23)
               :                    :                                +- * Project (22)
               :                    :                                   +- Window (21)
               :                    :                                      +- * ColumnarToRow (20)
               :                    :                                         +- CometSort (19)
               :                    :                                            +- ReusedExchange (18)
               :                    +- CometSort (66)
               :                       +- CometColumnarExchange (65)
               :                          +- RowToColumnar (64)
               :                             +- * HashAggregate (63)
               :                                +- * ColumnarToRow (62)
               :                                   +- CometColumnarExchange (61)
               :                                      +- RowToColumnar (60)
               :                                         +- * HashAggregate (59)
               :                                            +- * Project (58)
               :                                               +- * BroadcastHashJoin Inner BuildRight (57)
               :                                                  :- * Project (50)
               :                                                  :  +- Window (49)
               :                                                  :     +- * ColumnarToRow (48)
               :                                                  :        +- CometSort (47)
               :                                                  :           +- CometColumnarExchange (46)
               :                                                  :              +- RowToColumnar (45)
               :                                                  :                 +- * HashAggregate (44)
               :                                                  :                    +- * ColumnarToRow (43)
               :                                                  :                       +- CometColumnarExchange (42)
               :                                                  :                          +- RowToColumnar (41)
               :                                                  :                             +- * HashAggregate (40)
               :                                                  :                                +- * Project (39)
               :                                                  :                                   +- * BroadcastHashJoin Inner BuildRight (38)
               :                                                  :                                      :- * ColumnarToRow (36)
               :                                                  :                                      :  +- CometFilter (35)
               :                                                  :                                      :     +- CometScan parquet spark_catalog.default.store_sales (34)
               :                                                  :                                      +- ReusedExchange (37)
               :                                                  +- BroadcastExchange (56)
               :                                                     +- * Project (55)
               :                                                        +- Window (54)
               :                                                           +- * ColumnarToRow (53)
               :                                                              +- CometSort (52)
               :                                                                 +- ReusedExchange (51)
               +- BroadcastExchange (79)
                  +- * Project (78)
                     +- Window (77)
                        +- * ColumnarToRow (76)
                           +- CometSort (75)
                              +- ReusedExchange (74)


(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(3) ColumnarToRow [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]

(4) ReusedExchange [Reuses operator id: 90]
Output [2]: [d_date_sk#5, d_date#6]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#5, d_date#6]

(7) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum#7]
Results [3]: [ws_item_sk#1, d_date#6, sum#8]

(8) RowToColumnar
Input [3]: [ws_item_sk#1, d_date#6, sum#8]

(9) CometColumnarExchange
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Arguments: hashpartitioning(ws_item_sk#1, d_date#6, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(10) ColumnarToRow [codegen id : 3]
Input [3]: [ws_item_sk#1, d_date#6, sum#8]

(11) HashAggregate [codegen id : 3]
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#2))#9]
Results [4]: [ws_item_sk#1 AS item_sk#10, d_date#6, MakeDecimal(sum(UnscaledValue(ws_sales_price#2))#9,17,2) AS sumws#11, ws_item_sk#1]

(12) RowToColumnar
Input [4]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1]

(13) CometColumnarExchange
Input [4]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(14) CometSort
Input [4]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1]
Arguments: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1], [ws_item_sk#1 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST]

(15) ColumnarToRow [codegen id : 4]
Input [4]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1]

(16) Window
Input [4]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1]
Arguments: [row_number() windowspecdefinition(ws_item_sk#1, d_date#6 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#12], [ws_item_sk#1], [d_date#6 ASC NULLS FIRST]

(17) Project [codegen id : 10]
Output [4]: [item_sk#10, d_date#6, sumws#11, rk#12]
Input [5]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1, rk#12]

(18) ReusedExchange [Reuses operator id: 13]
Output [4]: [item_sk#10, d_date#13, sumws#11, ws_item_sk#14]

(19) CometSort
Input [4]: [item_sk#10, d_date#13, sumws#11, ws_item_sk#14]
Arguments: [item_sk#10, d_date#13, sumws#11, ws_item_sk#14], [ws_item_sk#14 ASC NULLS FIRST, d_date#13 ASC NULLS FIRST]

(20) ColumnarToRow [codegen id : 8]
Input [4]: [item_sk#10, d_date#13, sumws#11, ws_item_sk#14]

(21) Window
Input [4]: [item_sk#10, d_date#13, sumws#11, ws_item_sk#14]
Arguments: [row_number() windowspecdefinition(ws_item_sk#14, d_date#13 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#15], [ws_item_sk#14], [d_date#13 ASC NULLS FIRST]

(22) Project [codegen id : 9]
Output [3]: [item_sk#10 AS item_sk#16, sumws#11 AS sumws#17, rk#15]
Input [5]: [item_sk#10, d_date#13, sumws#11, ws_item_sk#14, rk#15]

(23) BroadcastExchange
Input [3]: [item_sk#16, sumws#17, rk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(24) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [item_sk#10]
Right keys [1]: [item_sk#16]
Join type: Inner
Join condition: (rk#12 >= rk#15)

(25) Project [codegen id : 10]
Output [4]: [item_sk#10, d_date#6, sumws#11, sumws#17]
Input [7]: [item_sk#10, d_date#6, sumws#11, rk#12, item_sk#16, sumws#17, rk#15]

(26) HashAggregate [codegen id : 10]
Input [4]: [item_sk#10, d_date#6, sumws#11, sumws#17]
Keys [3]: [item_sk#10, d_date#6, sumws#11]
Functions [1]: [partial_sum(sumws#17)]
Aggregate Attributes [2]: [sum#18, isEmpty#19]
Results [5]: [item_sk#10, d_date#6, sumws#11, sum#20, isEmpty#21]

(27) RowToColumnar
Input [5]: [item_sk#10, d_date#6, sumws#11, sum#20, isEmpty#21]

(28) CometColumnarExchange
Input [5]: [item_sk#10, d_date#6, sumws#11, sum#20, isEmpty#21]
Arguments: hashpartitioning(item_sk#10, d_date#6, sumws#11, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(29) ColumnarToRow [codegen id : 11]
Input [5]: [item_sk#10, d_date#6, sumws#11, sum#20, isEmpty#21]

(30) HashAggregate [codegen id : 11]
Input [5]: [item_sk#10, d_date#6, sumws#11, sum#20, isEmpty#21]
Keys [3]: [item_sk#10, d_date#6, sumws#11]
Functions [1]: [sum(sumws#17)]
Aggregate Attributes [1]: [sum(sumws#17)#22]
Results [3]: [item_sk#10, d_date#6, sum(sumws#17)#22 AS cume_sales#23]

(31) RowToColumnar
Input [3]: [item_sk#10, d_date#6, cume_sales#23]

(32) CometColumnarExchange
Input [3]: [item_sk#10, d_date#6, cume_sales#23]
Arguments: hashpartitioning(item_sk#10, d_date#6, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(33) CometSort
Input [3]: [item_sk#10, d_date#6, cume_sales#23]
Arguments: [item_sk#10, d_date#6, cume_sales#23], [item_sk#10 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#24, ss_sales_price#25, ss_sold_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#26), dynamicpruningexpression(ss_sold_date_sk#26 IN dynamicpruning#27)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>

(35) CometFilter
Input [3]: [ss_item_sk#24, ss_sales_price#25, ss_sold_date_sk#26]
Condition : isnotnull(ss_item_sk#24)

(36) ColumnarToRow [codegen id : 13]
Input [3]: [ss_item_sk#24, ss_sales_price#25, ss_sold_date_sk#26]

(37) ReusedExchange [Reuses operator id: 90]
Output [2]: [d_date_sk#28, d_date#29]

(38) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#26]
Right keys [1]: [d_date_sk#28]
Join type: Inner
Join condition: None

(39) Project [codegen id : 13]
Output [3]: [ss_item_sk#24, ss_sales_price#25, d_date#29]
Input [5]: [ss_item_sk#24, ss_sales_price#25, ss_sold_date_sk#26, d_date_sk#28, d_date#29]

(40) HashAggregate [codegen id : 13]
Input [3]: [ss_item_sk#24, ss_sales_price#25, d_date#29]
Keys [2]: [ss_item_sk#24, d_date#29]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#25))]
Aggregate Attributes [1]: [sum#30]
Results [3]: [ss_item_sk#24, d_date#29, sum#31]

(41) RowToColumnar
Input [3]: [ss_item_sk#24, d_date#29, sum#31]

(42) CometColumnarExchange
Input [3]: [ss_item_sk#24, d_date#29, sum#31]
Arguments: hashpartitioning(ss_item_sk#24, d_date#29, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(43) ColumnarToRow [codegen id : 14]
Input [3]: [ss_item_sk#24, d_date#29, sum#31]

(44) HashAggregate [codegen id : 14]
Input [3]: [ss_item_sk#24, d_date#29, sum#31]
Keys [2]: [ss_item_sk#24, d_date#29]
Functions [1]: [sum(UnscaledValue(ss_sales_price#25))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#25))#32]
Results [4]: [ss_item_sk#24 AS item_sk#33, d_date#29, MakeDecimal(sum(UnscaledValue(ss_sales_price#25))#32,17,2) AS sumss#34, ss_item_sk#24]

(45) RowToColumnar
Input [4]: [item_sk#33, d_date#29, sumss#34, ss_item_sk#24]

(46) CometColumnarExchange
Input [4]: [item_sk#33, d_date#29, sumss#34, ss_item_sk#24]
Arguments: hashpartitioning(ss_item_sk#24, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(47) CometSort
Input [4]: [item_sk#33, d_date#29, sumss#34, ss_item_sk#24]
Arguments: [item_sk#33, d_date#29, sumss#34, ss_item_sk#24], [ss_item_sk#24 ASC NULLS FIRST, d_date#29 ASC NULLS FIRST]

(48) ColumnarToRow [codegen id : 15]
Input [4]: [item_sk#33, d_date#29, sumss#34, ss_item_sk#24]

(49) Window
Input [4]: [item_sk#33, d_date#29, sumss#34, ss_item_sk#24]
Arguments: [row_number() windowspecdefinition(ss_item_sk#24, d_date#29 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#35], [ss_item_sk#24], [d_date#29 ASC NULLS FIRST]

(50) Project [codegen id : 21]
Output [4]: [item_sk#33, d_date#29, sumss#34, rk#35]
Input [5]: [item_sk#33, d_date#29, sumss#34, ss_item_sk#24, rk#35]

(51) ReusedExchange [Reuses operator id: 46]
Output [4]: [item_sk#33, d_date#36, sumss#34, ss_item_sk#37]

(52) CometSort
Input [4]: [item_sk#33, d_date#36, sumss#34, ss_item_sk#37]
Arguments: [item_sk#33, d_date#36, sumss#34, ss_item_sk#37], [ss_item_sk#37 ASC NULLS FIRST, d_date#36 ASC NULLS FIRST]

(53) ColumnarToRow [codegen id : 19]
Input [4]: [item_sk#33, d_date#36, sumss#34, ss_item_sk#37]

(54) Window
Input [4]: [item_sk#33, d_date#36, sumss#34, ss_item_sk#37]
Arguments: [row_number() windowspecdefinition(ss_item_sk#37, d_date#36 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#38], [ss_item_sk#37], [d_date#36 ASC NULLS FIRST]

(55) Project [codegen id : 20]
Output [3]: [item_sk#33 AS item_sk#39, sumss#34 AS sumss#40, rk#38]
Input [5]: [item_sk#33, d_date#36, sumss#34, ss_item_sk#37, rk#38]

(56) BroadcastExchange
Input [3]: [item_sk#39, sumss#40, rk#38]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

(57) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [item_sk#33]
Right keys [1]: [item_sk#39]
Join type: Inner
Join condition: (rk#35 >= rk#38)

(58) Project [codegen id : 21]
Output [4]: [item_sk#33, d_date#29, sumss#34, sumss#40]
Input [7]: [item_sk#33, d_date#29, sumss#34, rk#35, item_sk#39, sumss#40, rk#38]

(59) HashAggregate [codegen id : 21]
Input [4]: [item_sk#33, d_date#29, sumss#34, sumss#40]
Keys [3]: [item_sk#33, d_date#29, sumss#34]
Functions [1]: [partial_sum(sumss#40)]
Aggregate Attributes [2]: [sum#41, isEmpty#42]
Results [5]: [item_sk#33, d_date#29, sumss#34, sum#43, isEmpty#44]

(60) RowToColumnar
Input [5]: [item_sk#33, d_date#29, sumss#34, sum#43, isEmpty#44]

(61) CometColumnarExchange
Input [5]: [item_sk#33, d_date#29, sumss#34, sum#43, isEmpty#44]
Arguments: hashpartitioning(item_sk#33, d_date#29, sumss#34, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(62) ColumnarToRow [codegen id : 22]
Input [5]: [item_sk#33, d_date#29, sumss#34, sum#43, isEmpty#44]

(63) HashAggregate [codegen id : 22]
Input [5]: [item_sk#33, d_date#29, sumss#34, sum#43, isEmpty#44]
Keys [3]: [item_sk#33, d_date#29, sumss#34]
Functions [1]: [sum(sumss#40)]
Aggregate Attributes [1]: [sum(sumss#40)#45]
Results [3]: [item_sk#33, d_date#29, sum(sumss#40)#45 AS cume_sales#46]

(64) RowToColumnar
Input [3]: [item_sk#33, d_date#29, cume_sales#46]

(65) CometColumnarExchange
Input [3]: [item_sk#33, d_date#29, cume_sales#46]
Arguments: hashpartitioning(item_sk#33, d_date#29, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(66) CometSort
Input [3]: [item_sk#33, d_date#29, cume_sales#46]
Arguments: [item_sk#33, d_date#29, cume_sales#46], [item_sk#33 ASC NULLS FIRST, d_date#29 ASC NULLS FIRST]

(67) CometSortMergeJoin
Left output [3]: [item_sk#10, d_date#6, cume_sales#23]
Right output [3]: [item_sk#33, d_date#29, cume_sales#46]
Arguments: [item_sk#10, d_date#6], [item_sk#33, d_date#29], FullOuter

(68) CometFilter
Input [6]: [item_sk#10, d_date#6, cume_sales#23, item_sk#33, d_date#29, cume_sales#46]
Condition : isnotnull(CASE WHEN isnotnull(item_sk#10) THEN item_sk#10 ELSE item_sk#33 END)

(69) CometProject
Input [6]: [item_sk#10, d_date#6, cume_sales#23, item_sk#33, d_date#29, cume_sales#46]
Arguments: [item_sk#47, d_date#48, web_sales#49, store_sales#50], [CASE WHEN isnotnull(item_sk#10) THEN item_sk#10 ELSE item_sk#33 END AS item_sk#47, CASE WHEN isnotnull(d_date#6) THEN d_date#6 ELSE d_date#29 END AS d_date#48, cume_sales#23 AS web_sales#49, cume_sales#46 AS store_sales#50]

(70) CometColumnarExchange
Input [4]: [item_sk#47, d_date#48, web_sales#49, store_sales#50]
Arguments: hashpartitioning(item_sk#47, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=11]

(71) CometSort
Input [4]: [item_sk#47, d_date#48, web_sales#49, store_sales#50]
Arguments: [item_sk#47, d_date#48, web_sales#49, store_sales#50], [item_sk#47 ASC NULLS FIRST, d_date#48 ASC NULLS FIRST]

(72) ColumnarToRow [codegen id : 23]
Input [4]: [item_sk#47, d_date#48, web_sales#49, store_sales#50]

(73) Window
Input [4]: [item_sk#47, d_date#48, web_sales#49, store_sales#50]
Arguments: [row_number() windowspecdefinition(item_sk#47, d_date#48 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#51], [item_sk#47], [d_date#48 ASC NULLS FIRST]

(74) ReusedExchange [Reuses operator id: 70]
Output [4]: [item_sk#47, d_date#48, web_sales#49, store_sales#50]

(75) CometSort
Input [4]: [item_sk#47, d_date#48, web_sales#49, store_sales#50]
Arguments: [item_sk#47, d_date#48, web_sales#49, store_sales#50], [item_sk#47 ASC NULLS FIRST, d_date#48 ASC NULLS FIRST]

(76) ColumnarToRow [codegen id : 46]
Input [4]: [item_sk#47, d_date#48, web_sales#49, store_sales#50]

(77) Window
Input [4]: [item_sk#47, d_date#48, web_sales#49, store_sales#50]
Arguments: [row_number() windowspecdefinition(item_sk#47, d_date#48 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#52], [item_sk#47], [d_date#48 ASC NULLS FIRST]

(78) Project [codegen id : 47]
Output [4]: [item_sk#47 AS item_sk#53, web_sales#49 AS web_sales#54, store_sales#50 AS store_sales#55, rk#52]
Input [5]: [item_sk#47, d_date#48, web_sales#49, store_sales#50, rk#52]

(79) BroadcastExchange
Input [4]: [item_sk#53, web_sales#54, store_sales#55, rk#52]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

(80) BroadcastHashJoin [codegen id : 48]
Left keys [1]: [item_sk#47]
Right keys [1]: [item_sk#53]
Join type: Inner
Join condition: (rk#51 >= rk#52)

(81) Project [codegen id : 48]
Output [6]: [item_sk#47, d_date#48, web_sales#49, store_sales#50, web_sales#54, store_sales#55]
Input [9]: [item_sk#47, d_date#48, web_sales#49, store_sales#50, rk#51, item_sk#53, web_sales#54, store_sales#55, rk#52]

(82) HashAggregate [codegen id : 48]
Input [6]: [item_sk#47, d_date#48, web_sales#49, store_sales#50, web_sales#54, store_sales#55]
Keys [4]: [item_sk#47, d_date#48, web_sales#49, store_sales#50]
Functions [2]: [partial_max(web_sales#54), partial_max(store_sales#55)]
Aggregate Attributes [2]: [max#56, max#57]
Results [6]: [item_sk#47, d_date#48, web_sales#49, store_sales#50, max#58, max#59]

(83) HashAggregate [codegen id : 48]
Input [6]: [item_sk#47, d_date#48, web_sales#49, store_sales#50, max#58, max#59]
Keys [4]: [item_sk#47, d_date#48, web_sales#49, store_sales#50]
Functions [2]: [max(web_sales#54), max(store_sales#55)]
Aggregate Attributes [2]: [max(web_sales#54)#60, max(store_sales#55)#61]
Results [6]: [item_sk#47, d_date#48, web_sales#49, store_sales#50, max(web_sales#54)#60 AS web_cumulative#62, max(store_sales#55)#61 AS store_cumulative#63]

(84) Filter [codegen id : 48]
Input [6]: [item_sk#47, d_date#48, web_sales#49, store_sales#50, web_cumulative#62, store_cumulative#63]
Condition : ((isnotnull(web_cumulative#62) AND isnotnull(store_cumulative#63)) AND (web_cumulative#62 > store_cumulative#63))

(85) TakeOrderedAndProject
Input [6]: [item_sk#47, d_date#48, web_sales#49, store_sales#50, web_cumulative#62, store_cumulative#63]
Arguments: 100, [item_sk#47 ASC NULLS FIRST, d_date#48 ASC NULLS FIRST], [item_sk#47, d_date#48, web_sales#49, store_sales#50, web_cumulative#62, store_cumulative#63]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (90)
+- * ColumnarToRow (89)
   +- CometProject (88)
      +- CometFilter (87)
         +- CometScan parquet spark_catalog.default.date_dim (86)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#64]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(87) CometFilter
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#64]
Condition : (((isnotnull(d_month_seq#64) AND (d_month_seq#64 >= 1212)) AND (d_month_seq#64 <= 1223)) AND isnotnull(d_date_sk#5))

(88) CometProject
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#64]
Arguments: [d_date_sk#5, d_date#6], [d_date_sk#5, d_date#6]

(89) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_date#6]

(90) BroadcastExchange
Input [2]: [d_date_sk#5, d_date#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:2 Hosting operator id = 34 Hosting Expression = ss_sold_date_sk#26 IN dynamicpruning#4


