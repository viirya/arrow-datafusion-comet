== Physical Plan ==
TakeOrderedAndProject (77)
+- * Filter (76)
   +- * HashAggregate (75)
      +- * HashAggregate (74)
         +- * Project (73)
            +- * BroadcastHashJoin Inner BuildRight (72)
               :- Window (65)
               :  +- * ColumnarToRow (64)
               :     +- CometSort (63)
               :        +- CometColumnarExchange (62)
               :           +- CometProject (61)
               :              +- CometFilter (60)
               :                 +- CometSortMergeJoin (59)
               :                    :- CometSort (29)
               :                    :  +- CometColumnarExchange (28)
               :                    :     +- CometHashAggregate (27)
               :                    :        +- CometColumnarExchange (26)
               :                    :           +- RowToColumnar (25)
               :                    :              +- * HashAggregate (24)
               :                    :                 +- * Project (23)
               :                    :                    +- * BroadcastHashJoin Inner BuildRight (22)
               :                    :                       :- * Project (15)
               :                    :                       :  +- Window (14)
               :                    :                       :     +- * ColumnarToRow (13)
               :                    :                       :        +- CometSort (12)
               :                    :                       :           +- CometColumnarExchange (11)
               :                    :                       :              +- CometHashAggregate (10)
               :                    :                       :                 +- CometColumnarExchange (9)
               :                    :                       :                    +- RowToColumnar (8)
               :                    :                       :                       +- * HashAggregate (7)
               :                    :                       :                          +- * Project (6)
               :                    :                       :                             +- * BroadcastHashJoin Inner BuildRight (5)
               :                    :                       :                                :- * ColumnarToRow (3)
               :                    :                       :                                :  +- CometFilter (2)
               :                    :                       :                                :     +- CometScan parquet spark_catalog.default.web_sales (1)
               :                    :                       :                                +- ReusedExchange (4)
               :                    :                       +- BroadcastExchange (21)
               :                    :                          +- * Project (20)
               :                    :                             +- Window (19)
               :                    :                                +- * ColumnarToRow (18)
               :                    :                                   +- CometSort (17)
               :                    :                                      +- ReusedExchange (16)
               :                    +- CometSort (58)
               :                       +- CometColumnarExchange (57)
               :                          +- CometHashAggregate (56)
               :                             +- CometColumnarExchange (55)
               :                                +- RowToColumnar (54)
               :                                   +- * HashAggregate (53)
               :                                      +- * Project (52)
               :                                         +- * BroadcastHashJoin Inner BuildRight (51)
               :                                            :- * Project (44)
               :                                            :  +- Window (43)
               :                                            :     +- * ColumnarToRow (42)
               :                                            :        +- CometSort (41)
               :                                            :           +- CometColumnarExchange (40)
               :                                            :              +- CometHashAggregate (39)
               :                                            :                 +- CometColumnarExchange (38)
               :                                            :                    +- RowToColumnar (37)
               :                                            :                       +- * HashAggregate (36)
               :                                            :                          +- * Project (35)
               :                                            :                             +- * BroadcastHashJoin Inner BuildRight (34)
               :                                            :                                :- * ColumnarToRow (32)
               :                                            :                                :  +- CometFilter (31)
               :                                            :                                :     +- CometScan parquet spark_catalog.default.store_sales (30)
               :                                            :                                +- ReusedExchange (33)
               :                                            +- BroadcastExchange (50)
               :                                               +- * Project (49)
               :                                                  +- Window (48)
               :                                                     +- * ColumnarToRow (47)
               :                                                        +- CometSort (46)
               :                                                           +- ReusedExchange (45)
               +- BroadcastExchange (71)
                  +- * Project (70)
                     +- Window (69)
                        +- * ColumnarToRow (68)
                           +- CometSort (67)
                              +- ReusedExchange (66)


(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(3) ColumnarToRow [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]

(4) ReusedExchange [Reuses operator id: 82]
Output [2]: [d_date_sk#5, d_date#6]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#5, d_date#6]

(7) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum#7]
Results [3]: [ws_item_sk#1, d_date#6, sum#8]

(8) RowToColumnar
Input [3]: [ws_item_sk#1, d_date#6, sum#8]

(9) CometColumnarExchange
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Arguments: hashpartitioning(ws_item_sk#1, d_date#6, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(10) CometHashAggregate
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]

(11) CometColumnarExchange
Input [4]: [item_sk#9, d_date#6, sumws#10, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(12) CometSort
Input [4]: [item_sk#9, d_date#6, sumws#10, ws_item_sk#1]
Arguments: [item_sk#9, d_date#6, sumws#10, ws_item_sk#1], [ws_item_sk#1 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST]

(13) ColumnarToRow [codegen id : 3]
Input [4]: [item_sk#9, d_date#6, sumws#10, ws_item_sk#1]

(14) Window
Input [4]: [item_sk#9, d_date#6, sumws#10, ws_item_sk#1]
Arguments: [row_number() windowspecdefinition(ws_item_sk#1, d_date#6 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#11], [ws_item_sk#1], [d_date#6 ASC NULLS FIRST]

(15) Project [codegen id : 8]
Output [4]: [item_sk#9, d_date#6, sumws#10, rk#11]
Input [5]: [item_sk#9, d_date#6, sumws#10, ws_item_sk#1, rk#11]

(16) ReusedExchange [Reuses operator id: 11]
Output [4]: [item_sk#9, d_date#12, sumws#10, ws_item_sk#13]

(17) CometSort
Input [4]: [item_sk#9, d_date#12, sumws#10, ws_item_sk#13]
Arguments: [item_sk#9, d_date#12, sumws#10, ws_item_sk#13], [ws_item_sk#13 ASC NULLS FIRST, d_date#12 ASC NULLS FIRST]

(18) ColumnarToRow [codegen id : 6]
Input [4]: [item_sk#9, d_date#12, sumws#10, ws_item_sk#13]

(19) Window
Input [4]: [item_sk#9, d_date#12, sumws#10, ws_item_sk#13]
Arguments: [row_number() windowspecdefinition(ws_item_sk#13, d_date#12 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#14], [ws_item_sk#13], [d_date#12 ASC NULLS FIRST]

(20) Project [codegen id : 7]
Output [3]: [item_sk#9 AS item_sk#15, sumws#10 AS sumws#16, rk#14]
Input [5]: [item_sk#9, d_date#12, sumws#10, ws_item_sk#13, rk#14]

(21) BroadcastExchange
Input [3]: [item_sk#15, sumws#16, rk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(22) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [item_sk#9]
Right keys [1]: [item_sk#15]
Join type: Inner
Join condition: (rk#11 >= rk#14)

(23) Project [codegen id : 8]
Output [4]: [item_sk#9, d_date#6, sumws#10, sumws#16]
Input [7]: [item_sk#9, d_date#6, sumws#10, rk#11, item_sk#15, sumws#16, rk#14]

(24) HashAggregate [codegen id : 8]
Input [4]: [item_sk#9, d_date#6, sumws#10, sumws#16]
Keys [3]: [item_sk#9, d_date#6, sumws#10]
Functions [1]: [partial_sum(sumws#16)]
Aggregate Attributes [2]: [sum#17, isEmpty#18]
Results [5]: [item_sk#9, d_date#6, sumws#10, sum#19, isEmpty#20]

(25) RowToColumnar
Input [5]: [item_sk#9, d_date#6, sumws#10, sum#19, isEmpty#20]

(26) CometColumnarExchange
Input [5]: [item_sk#9, d_date#6, sumws#10, sum#19, isEmpty#20]
Arguments: hashpartitioning(item_sk#9, d_date#6, sumws#10, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(27) CometHashAggregate
Input [5]: [item_sk#9, d_date#6, sumws#10, sum#19, isEmpty#20]
Keys [3]: [item_sk#9, d_date#6, sumws#10]
Functions [1]: [sum(sumws#16)]

(28) CometColumnarExchange
Input [3]: [item_sk#9, d_date#6, cume_sales#21]
Arguments: hashpartitioning(item_sk#9, d_date#6, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(29) CometSort
Input [3]: [item_sk#9, d_date#6, cume_sales#21]
Arguments: [item_sk#9, d_date#6, cume_sales#21], [item_sk#9 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#22, ss_sales_price#23, ss_sold_date_sk#24]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#24), dynamicpruningexpression(ss_sold_date_sk#24 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>

(31) CometFilter
Input [3]: [ss_item_sk#22, ss_sales_price#23, ss_sold_date_sk#24]
Condition : isnotnull(ss_item_sk#22)

(32) ColumnarToRow [codegen id : 10]
Input [3]: [ss_item_sk#22, ss_sales_price#23, ss_sold_date_sk#24]

(33) ReusedExchange [Reuses operator id: 82]
Output [2]: [d_date_sk#26, d_date#27]

(34) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#24]
Right keys [1]: [d_date_sk#26]
Join type: Inner
Join condition: None

(35) Project [codegen id : 10]
Output [3]: [ss_item_sk#22, ss_sales_price#23, d_date#27]
Input [5]: [ss_item_sk#22, ss_sales_price#23, ss_sold_date_sk#24, d_date_sk#26, d_date#27]

(36) HashAggregate [codegen id : 10]
Input [3]: [ss_item_sk#22, ss_sales_price#23, d_date#27]
Keys [2]: [ss_item_sk#22, d_date#27]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#23))]
Aggregate Attributes [1]: [sum#28]
Results [3]: [ss_item_sk#22, d_date#27, sum#29]

(37) RowToColumnar
Input [3]: [ss_item_sk#22, d_date#27, sum#29]

(38) CometColumnarExchange
Input [3]: [ss_item_sk#22, d_date#27, sum#29]
Arguments: hashpartitioning(ss_item_sk#22, d_date#27, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(39) CometHashAggregate
Input [3]: [ss_item_sk#22, d_date#27, sum#29]
Keys [2]: [ss_item_sk#22, d_date#27]
Functions [1]: [sum(UnscaledValue(ss_sales_price#23))]

(40) CometColumnarExchange
Input [4]: [item_sk#30, d_date#27, sumss#31, ss_item_sk#22]
Arguments: hashpartitioning(ss_item_sk#22, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(41) CometSort
Input [4]: [item_sk#30, d_date#27, sumss#31, ss_item_sk#22]
Arguments: [item_sk#30, d_date#27, sumss#31, ss_item_sk#22], [ss_item_sk#22 ASC NULLS FIRST, d_date#27 ASC NULLS FIRST]

(42) ColumnarToRow [codegen id : 11]
Input [4]: [item_sk#30, d_date#27, sumss#31, ss_item_sk#22]

(43) Window
Input [4]: [item_sk#30, d_date#27, sumss#31, ss_item_sk#22]
Arguments: [row_number() windowspecdefinition(ss_item_sk#22, d_date#27 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#32], [ss_item_sk#22], [d_date#27 ASC NULLS FIRST]

(44) Project [codegen id : 16]
Output [4]: [item_sk#30, d_date#27, sumss#31, rk#32]
Input [5]: [item_sk#30, d_date#27, sumss#31, ss_item_sk#22, rk#32]

(45) ReusedExchange [Reuses operator id: 40]
Output [4]: [item_sk#30, d_date#33, sumss#31, ss_item_sk#34]

(46) CometSort
Input [4]: [item_sk#30, d_date#33, sumss#31, ss_item_sk#34]
Arguments: [item_sk#30, d_date#33, sumss#31, ss_item_sk#34], [ss_item_sk#34 ASC NULLS FIRST, d_date#33 ASC NULLS FIRST]

(47) ColumnarToRow [codegen id : 14]
Input [4]: [item_sk#30, d_date#33, sumss#31, ss_item_sk#34]

(48) Window
Input [4]: [item_sk#30, d_date#33, sumss#31, ss_item_sk#34]
Arguments: [row_number() windowspecdefinition(ss_item_sk#34, d_date#33 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#35], [ss_item_sk#34], [d_date#33 ASC NULLS FIRST]

(49) Project [codegen id : 15]
Output [3]: [item_sk#30 AS item_sk#36, sumss#31 AS sumss#37, rk#35]
Input [5]: [item_sk#30, d_date#33, sumss#31, ss_item_sk#34, rk#35]

(50) BroadcastExchange
Input [3]: [item_sk#36, sumss#37, rk#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

(51) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [item_sk#30]
Right keys [1]: [item_sk#36]
Join type: Inner
Join condition: (rk#32 >= rk#35)

(52) Project [codegen id : 16]
Output [4]: [item_sk#30, d_date#27, sumss#31, sumss#37]
Input [7]: [item_sk#30, d_date#27, sumss#31, rk#32, item_sk#36, sumss#37, rk#35]

(53) HashAggregate [codegen id : 16]
Input [4]: [item_sk#30, d_date#27, sumss#31, sumss#37]
Keys [3]: [item_sk#30, d_date#27, sumss#31]
Functions [1]: [partial_sum(sumss#37)]
Aggregate Attributes [2]: [sum#38, isEmpty#39]
Results [5]: [item_sk#30, d_date#27, sumss#31, sum#40, isEmpty#41]

(54) RowToColumnar
Input [5]: [item_sk#30, d_date#27, sumss#31, sum#40, isEmpty#41]

(55) CometColumnarExchange
Input [5]: [item_sk#30, d_date#27, sumss#31, sum#40, isEmpty#41]
Arguments: hashpartitioning(item_sk#30, d_date#27, sumss#31, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(56) CometHashAggregate
Input [5]: [item_sk#30, d_date#27, sumss#31, sum#40, isEmpty#41]
Keys [3]: [item_sk#30, d_date#27, sumss#31]
Functions [1]: [sum(sumss#37)]

(57) CometColumnarExchange
Input [3]: [item_sk#30, d_date#27, cume_sales#42]
Arguments: hashpartitioning(item_sk#30, d_date#27, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(58) CometSort
Input [3]: [item_sk#30, d_date#27, cume_sales#42]
Arguments: [item_sk#30, d_date#27, cume_sales#42], [item_sk#30 ASC NULLS FIRST, d_date#27 ASC NULLS FIRST]

(59) CometSortMergeJoin
Left output [3]: [item_sk#9, d_date#6, cume_sales#21]
Right output [3]: [item_sk#30, d_date#27, cume_sales#42]
Arguments: [item_sk#9, d_date#6], [item_sk#30, d_date#27], FullOuter

(60) CometFilter
Input [6]: [item_sk#9, d_date#6, cume_sales#21, item_sk#30, d_date#27, cume_sales#42]
Condition : isnotnull(CASE WHEN isnotnull(item_sk#9) THEN item_sk#9 ELSE item_sk#30 END)

(61) CometProject
Input [6]: [item_sk#9, d_date#6, cume_sales#21, item_sk#30, d_date#27, cume_sales#42]
Arguments: [item_sk#43, d_date#44, web_sales#45, store_sales#46], [CASE WHEN isnotnull(item_sk#9) THEN item_sk#9 ELSE item_sk#30 END AS item_sk#43, CASE WHEN isnotnull(d_date#6) THEN d_date#6 ELSE d_date#27 END AS d_date#44, cume_sales#21 AS web_sales#45, cume_sales#42 AS store_sales#46]

(62) CometColumnarExchange
Input [4]: [item_sk#43, d_date#44, web_sales#45, store_sales#46]
Arguments: hashpartitioning(item_sk#43, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=11]

(63) CometSort
Input [4]: [item_sk#43, d_date#44, web_sales#45, store_sales#46]
Arguments: [item_sk#43, d_date#44, web_sales#45, store_sales#46], [item_sk#43 ASC NULLS FIRST, d_date#44 ASC NULLS FIRST]

(64) ColumnarToRow [codegen id : 17]
Input [4]: [item_sk#43, d_date#44, web_sales#45, store_sales#46]

(65) Window
Input [4]: [item_sk#43, d_date#44, web_sales#45, store_sales#46]
Arguments: [row_number() windowspecdefinition(item_sk#43, d_date#44 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#47], [item_sk#43], [d_date#44 ASC NULLS FIRST]

(66) ReusedExchange [Reuses operator id: 62]
Output [4]: [item_sk#43, d_date#44, web_sales#45, store_sales#46]

(67) CometSort
Input [4]: [item_sk#43, d_date#44, web_sales#45, store_sales#46]
Arguments: [item_sk#43, d_date#44, web_sales#45, store_sales#46], [item_sk#43 ASC NULLS FIRST, d_date#44 ASC NULLS FIRST]

(68) ColumnarToRow [codegen id : 34]
Input [4]: [item_sk#43, d_date#44, web_sales#45, store_sales#46]

(69) Window
Input [4]: [item_sk#43, d_date#44, web_sales#45, store_sales#46]
Arguments: [row_number() windowspecdefinition(item_sk#43, d_date#44 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#48], [item_sk#43], [d_date#44 ASC NULLS FIRST]

(70) Project [codegen id : 35]
Output [4]: [item_sk#43 AS item_sk#49, web_sales#45 AS web_sales#50, store_sales#46 AS store_sales#51, rk#48]
Input [5]: [item_sk#43, d_date#44, web_sales#45, store_sales#46, rk#48]

(71) BroadcastExchange
Input [4]: [item_sk#49, web_sales#50, store_sales#51, rk#48]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

(72) BroadcastHashJoin [codegen id : 36]
Left keys [1]: [item_sk#43]
Right keys [1]: [item_sk#49]
Join type: Inner
Join condition: (rk#47 >= rk#48)

(73) Project [codegen id : 36]
Output [6]: [item_sk#43, d_date#44, web_sales#45, store_sales#46, web_sales#50, store_sales#51]
Input [9]: [item_sk#43, d_date#44, web_sales#45, store_sales#46, rk#47, item_sk#49, web_sales#50, store_sales#51, rk#48]

(74) HashAggregate [codegen id : 36]
Input [6]: [item_sk#43, d_date#44, web_sales#45, store_sales#46, web_sales#50, store_sales#51]
Keys [4]: [item_sk#43, d_date#44, web_sales#45, store_sales#46]
Functions [2]: [partial_max(web_sales#50), partial_max(store_sales#51)]
Aggregate Attributes [2]: [max#52, max#53]
Results [6]: [item_sk#43, d_date#44, web_sales#45, store_sales#46, max#54, max#55]

(75) HashAggregate [codegen id : 36]
Input [6]: [item_sk#43, d_date#44, web_sales#45, store_sales#46, max#54, max#55]
Keys [4]: [item_sk#43, d_date#44, web_sales#45, store_sales#46]
Functions [2]: [max(web_sales#50), max(store_sales#51)]
Aggregate Attributes [2]: [max(web_sales#50)#56, max(store_sales#51)#57]
Results [6]: [item_sk#43, d_date#44, web_sales#45, store_sales#46, max(web_sales#50)#56 AS web_cumulative#58, max(store_sales#51)#57 AS store_cumulative#59]

(76) Filter [codegen id : 36]
Input [6]: [item_sk#43, d_date#44, web_sales#45, store_sales#46, web_cumulative#58, store_cumulative#59]
Condition : ((isnotnull(web_cumulative#58) AND isnotnull(store_cumulative#59)) AND (web_cumulative#58 > store_cumulative#59))

(77) TakeOrderedAndProject
Input [6]: [item_sk#43, d_date#44, web_sales#45, store_sales#46, web_cumulative#58, store_cumulative#59]
Arguments: 100, [item_sk#43 ASC NULLS FIRST, d_date#44 ASC NULLS FIRST], [item_sk#43, d_date#44, web_sales#45, store_sales#46, web_cumulative#58, store_cumulative#59]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (82)
+- * ColumnarToRow (81)
   +- CometProject (80)
      +- CometFilter (79)
         +- CometScan parquet spark_catalog.default.date_dim (78)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#60]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(79) CometFilter
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#60]
Condition : (((isnotnull(d_month_seq#60) AND (d_month_seq#60 >= 1212)) AND (d_month_seq#60 <= 1223)) AND isnotnull(d_date_sk#5))

(80) CometProject
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#60]
Arguments: [d_date_sk#5, d_date#6], [d_date_sk#5, d_date#6]

(81) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_date#6]

(82) BroadcastExchange
Input [2]: [d_date_sk#5, d_date#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:2 Hosting operator id = 30 Hosting Expression = ss_sold_date_sk#24 IN dynamicpruning#4


