== Physical Plan ==
TakeOrderedAndProject (43)
+- * Project (42)
   +- Window (41)
      +- * ColumnarToRow (40)
         +- CometSort (39)
            +- CometColumnarExchange (38)
               +- CometHashAggregate (37)
                  +- CometColumnarExchange (36)
                     +- CometHashAggregate (35)
                        +- CometUnion (34)
                           :- CometHashAggregate (23)
                           :  +- CometColumnarExchange (22)
                           :     +- RowToColumnar (21)
                           :        +- * HashAggregate (20)
                           :           +- * Project (19)
                           :              +- * BroadcastHashJoin Inner BuildRight (18)
                           :                 :- * Project (12)
                           :                 :  +- * BroadcastHashJoin Inner BuildRight (11)
                           :                 :     :- * Project (6)
                           :                 :     :  +- * BroadcastHashJoin Inner BuildRight (5)
                           :                 :     :     :- * ColumnarToRow (3)
                           :                 :     :     :  +- CometFilter (2)
                           :                 :     :     :     +- CometScan parquet spark_catalog.default.store_sales (1)
                           :                 :     :     +- ReusedExchange (4)
                           :                 :     +- BroadcastExchange (10)
                           :                 :        +- * ColumnarToRow (9)
                           :                 :           +- CometFilter (8)
                           :                 :              +- CometScan parquet spark_catalog.default.item (7)
                           :                 +- BroadcastExchange (17)
                           :                    +- * ColumnarToRow (16)
                           :                       +- CometProject (15)
                           :                          +- CometFilter (14)
                           :                             +- CometScan parquet spark_catalog.default.store (13)
                           :- CometHashAggregate (28)
                           :  +- CometColumnarExchange (27)
                           :     +- CometHashAggregate (26)
                           :        +- CometHashAggregate (25)
                           :           +- ReusedExchange (24)
                           +- CometHashAggregate (33)
                              +- CometColumnarExchange (32)
                                 +- CometHashAggregate (31)
                                    +- CometHashAggregate (30)
                                       +- ReusedExchange (29)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_store_sk#2))

(3) ColumnarToRow [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]

(4) ReusedExchange [Reuses operator id: 48]
Output [1]: [d_date_sk#7]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join type: Inner
Join condition: None

(6) Project [codegen id : 4]
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5, d_date_sk#7]

(unknown) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#8, i_class#9, i_category#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(8) CometFilter
Input [3]: [i_item_sk#8, i_class#9, i_category#10]
Condition : isnotnull(i_item_sk#8)

(9) ColumnarToRow [codegen id : 2]
Input [3]: [i_item_sk#8, i_class#9, i_category#10]

(10) BroadcastExchange
Input [3]: [i_item_sk#8, i_class#9, i_category#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#8]
Join type: Inner
Join condition: None

(12) Project [codegen id : 4]
Output [5]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#9, i_category#10]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_item_sk#8, i_class#9, i_category#10]

(unknown) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#11, s_state#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(14) CometFilter
Input [2]: [s_store_sk#11, s_state#12]
Condition : ((isnotnull(s_state#12) AND (s_state#12 = TN)) AND isnotnull(s_store_sk#11))

(15) CometProject
Input [2]: [s_store_sk#11, s_state#12]
Arguments: [s_store_sk#11], [s_store_sk#11]

(16) ColumnarToRow [codegen id : 3]
Input [1]: [s_store_sk#11]

(17) BroadcastExchange
Input [1]: [s_store_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#11]
Join type: Inner
Join condition: None

(19) Project [codegen id : 4]
Output [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_class#9, i_category#10]
Input [6]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#9, i_category#10, s_store_sk#11]

(20) HashAggregate [codegen id : 4]
Input [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_class#9, i_category#10]
Keys [2]: [i_category#10, i_class#9]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#4)), partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum#13, sum#14]
Results [4]: [i_category#10, i_class#9, sum#15, sum#16]

(21) RowToColumnar
Input [4]: [i_category#10, i_class#9, sum#15, sum#16]

(22) CometColumnarExchange
Input [4]: [i_category#10, i_class#9, sum#15, sum#16]
Arguments: hashpartitioning(i_category#10, i_class#9, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(23) CometHashAggregate
Input [4]: [i_category#10, i_class#9, sum#15, sum#16]
Keys [2]: [i_category#10, i_class#9]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]

(24) ReusedExchange [Reuses operator id: 22]
Output [4]: [i_category#10, i_class#9, sum#17, sum#18]

(25) CometHashAggregate
Input [4]: [i_category#10, i_class#9, sum#17, sum#18]
Keys [2]: [i_category#10, i_class#9]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]

(26) CometHashAggregate
Input [3]: [ss_net_profit#19, ss_ext_sales_price#20, i_category#10]
Keys [1]: [i_category#10]
Functions [2]: [partial_sum(ss_net_profit#19), partial_sum(ss_ext_sales_price#20)]

(27) CometColumnarExchange
Input [5]: [i_category#10, sum#21, isEmpty#22, sum#23, isEmpty#24]
Arguments: hashpartitioning(i_category#10, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(28) CometHashAggregate
Input [5]: [i_category#10, sum#21, isEmpty#22, sum#23, isEmpty#24]
Keys [1]: [i_category#10]
Functions [2]: [sum(ss_net_profit#19), sum(ss_ext_sales_price#20)]

(29) ReusedExchange [Reuses operator id: 22]
Output [4]: [i_category#10, i_class#9, sum#25, sum#26]

(30) CometHashAggregate
Input [4]: [i_category#10, i_class#9, sum#25, sum#26]
Keys [2]: [i_category#10, i_class#9]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]

(31) CometHashAggregate
Input [2]: [ss_net_profit#19, ss_ext_sales_price#20]
Keys: []
Functions [2]: [partial_sum(ss_net_profit#19), partial_sum(ss_ext_sales_price#20)]

(32) CometColumnarExchange
Input [4]: [sum#27, isEmpty#28, sum#29, isEmpty#30]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(33) CometHashAggregate
Input [4]: [sum#27, isEmpty#28, sum#29, isEmpty#30]
Keys: []
Functions [2]: [sum(ss_net_profit#19), sum(ss_ext_sales_price#20)]

(34) CometUnion
Child 0 Input [6]: [gross_margin#31, i_category#10, i_class#9, t_category#32, t_class#33, lochierarchy#34]
Child 1 Input [6]: [gross_margin#35, i_category#10, i_class#36, t_category#37, t_class#38, lochierarchy#39]
Child 2 Input [6]: [gross_margin#40, i_category#41, i_class#42, t_category#43, t_class#44, lochierarchy#45]

(35) CometHashAggregate
Input [6]: [gross_margin#31, i_category#10, i_class#9, t_category#32, t_class#33, lochierarchy#34]
Keys [6]: [gross_margin#31, i_category#10, i_class#9, t_category#32, t_class#33, lochierarchy#34]
Functions: []

(36) CometColumnarExchange
Input [6]: [gross_margin#31, i_category#10, i_class#9, t_category#32, t_class#33, lochierarchy#34]
Arguments: hashpartitioning(gross_margin#31, i_category#10, i_class#9, t_category#32, t_class#33, lochierarchy#34, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(37) CometHashAggregate
Input [6]: [gross_margin#31, i_category#10, i_class#9, t_category#32, t_class#33, lochierarchy#34]
Keys [6]: [gross_margin#31, i_category#10, i_class#9, t_category#32, t_class#33, lochierarchy#34]
Functions: []

(38) CometColumnarExchange
Input [5]: [gross_margin#31, i_category#10, i_class#9, lochierarchy#34, _w0#46]
Arguments: hashpartitioning(lochierarchy#34, _w0#46, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(39) CometSort
Input [5]: [gross_margin#31, i_category#10, i_class#9, lochierarchy#34, _w0#46]
Arguments: [gross_margin#31, i_category#10, i_class#9, lochierarchy#34, _w0#46], [lochierarchy#34 ASC NULLS FIRST, _w0#46 ASC NULLS FIRST, gross_margin#31 ASC NULLS FIRST]

(40) ColumnarToRow [codegen id : 13]
Input [5]: [gross_margin#31, i_category#10, i_class#9, lochierarchy#34, _w0#46]

(41) Window
Input [5]: [gross_margin#31, i_category#10, i_class#9, lochierarchy#34, _w0#46]
Arguments: [rank(gross_margin#31) windowspecdefinition(lochierarchy#34, _w0#46, gross_margin#31 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#47], [lochierarchy#34, _w0#46], [gross_margin#31 ASC NULLS FIRST]

(42) Project [codegen id : 14]
Output [5]: [gross_margin#31, i_category#10, i_class#9, lochierarchy#34, rank_within_parent#47]
Input [6]: [gross_margin#31, i_category#10, i_class#9, lochierarchy#34, _w0#46, rank_within_parent#47]

(43) TakeOrderedAndProject
Input [5]: [gross_margin#31, i_category#10, i_class#9, lochierarchy#34, rank_within_parent#47]
Arguments: 100, [lochierarchy#34 DESC NULLS LAST, CASE WHEN (lochierarchy#34 = 0) THEN i_category#10 END ASC NULLS FIRST, rank_within_parent#47 ASC NULLS FIRST], [gross_margin#31, i_category#10, i_class#9, lochierarchy#34, rank_within_parent#47]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (48)
+- * ColumnarToRow (47)
   +- CometProject (46)
      +- CometFilter (45)
         +- CometScan parquet spark_catalog.default.date_dim (44)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_year#48]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(45) CometFilter
Input [2]: [d_date_sk#7, d_year#48]
Condition : ((isnotnull(d_year#48) AND (d_year#48 = 2001)) AND isnotnull(d_date_sk#7))

(46) CometProject
Input [2]: [d_date_sk#7, d_year#48]
Arguments: [d_date_sk#7], [d_date_sk#7]

(47) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#7]

(48) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]


