== Physical Plan ==
* ColumnarToRow (155)
+- CometTakeOrderedAndProject (154)
   +- CometHashAggregate (153)
      +- CometColumnarExchange (152)
         +- CometHashAggregate (151)
            +- CometUnion (150)
               :- CometHashAggregate (75)
               :  +- CometColumnarExchange (74)
               :     +- RowToColumnar (73)
               :        +- * HashAggregate (72)
               :           +- Union (71)
               :              :- * HashAggregate (22)
               :              :  +- * ColumnarToRow (21)
               :              :     +- CometColumnarExchange (20)
               :              :        +- RowToColumnar (19)
               :              :           +- * HashAggregate (18)
               :              :              +- * Project (17)
               :              :                 +- * BroadcastHashJoin Inner BuildRight (16)
               :              :                    :- * Project (11)
               :              :                    :  +- * BroadcastHashJoin Inner BuildRight (10)
               :              :                    :     :- * ColumnarToRow (8)
               :              :                    :     :  +- CometUnion (7)
               :              :                    :     :     :- CometProject (3)
               :              :                    :     :     :  +- CometFilter (2)
               :              :                    :     :     :     +- CometScan parquet spark_catalog.default.store_sales (1)
               :              :                    :     :     +- CometProject (6)
               :              :                    :     :        +- CometFilter (5)
               :              :                    :     :           +- CometScan parquet spark_catalog.default.store_returns (4)
               :              :                    :     +- ReusedExchange (9)
               :              :                    +- BroadcastExchange (15)
               :              :                       +- * ColumnarToRow (14)
               :              :                          +- CometFilter (13)
               :              :                             +- CometScan parquet spark_catalog.default.store (12)
               :              :- * HashAggregate (44)
               :              :  +- * ColumnarToRow (43)
               :              :     +- CometColumnarExchange (42)
               :              :        +- RowToColumnar (41)
               :              :           +- * HashAggregate (40)
               :              :              +- * Project (39)
               :              :                 +- * BroadcastHashJoin Inner BuildRight (38)
               :              :                    :- * Project (33)
               :              :                    :  +- * BroadcastHashJoin Inner BuildRight (32)
               :              :                    :     :- * ColumnarToRow (30)
               :              :                    :     :  +- CometUnion (29)
               :              :                    :     :     :- CometProject (25)
               :              :                    :     :     :  +- CometFilter (24)
               :              :                    :     :     :     +- CometScan parquet spark_catalog.default.catalog_sales (23)
               :              :                    :     :     +- CometProject (28)
               :              :                    :     :        +- CometFilter (27)
               :              :                    :     :           +- CometScan parquet spark_catalog.default.catalog_returns (26)
               :              :                    :     +- ReusedExchange (31)
               :              :                    +- BroadcastExchange (37)
               :              :                       +- * ColumnarToRow (36)
               :              :                          +- CometFilter (35)
               :              :                             +- CometScan parquet spark_catalog.default.catalog_page (34)
               :              +- * HashAggregate (70)
               :                 +- * ColumnarToRow (69)
               :                    +- CometColumnarExchange (68)
               :                       +- RowToColumnar (67)
               :                          +- * HashAggregate (66)
               :                             +- * Project (65)
               :                                +- * BroadcastHashJoin Inner BuildRight (64)
               :                                   :- * Project (59)
               :                                   :  +- * BroadcastHashJoin Inner BuildRight (58)
               :                                   :     :- * ColumnarToRow (56)
               :                                   :     :  +- CometUnion (55)
               :                                   :     :     :- CometProject (47)
               :                                   :     :     :  +- CometFilter (46)
               :                                   :     :     :     +- CometScan parquet spark_catalog.default.web_sales (45)
               :                                   :     :     +- CometProject (54)
               :                                   :     :        +- CometBroadcastHashJoin (53)
               :                                   :     :           :- CometBroadcastExchange (49)
               :                                   :     :           :  +- CometScan parquet spark_catalog.default.web_returns (48)
               :                                   :     :           +- CometProject (52)
               :                                   :     :              +- CometFilter (51)
               :                                   :     :                 +- CometScan parquet spark_catalog.default.web_sales (50)
               :                                   :     +- ReusedExchange (57)
               :                                   +- BroadcastExchange (63)
               :                                      +- * ColumnarToRow (62)
               :                                         +- CometFilter (61)
               :                                            +- CometScan parquet spark_catalog.default.web_site (60)
               :- CometHashAggregate (112)
               :  +- CometColumnarExchange (111)
               :     +- CometHashAggregate (110)
               :        +- CometHashAggregate (109)
               :           +- CometColumnarExchange (108)
               :              +- RowToColumnar (107)
               :                 +- * HashAggregate (106)
               :                    +- Union (105)
               :                       :- * HashAggregate (78)
               :                       :  +- * ColumnarToRow (77)
               :                       :     +- ReusedExchange (76)
               :                       :- * HashAggregate (81)
               :                       :  +- * ColumnarToRow (80)
               :                       :     +- ReusedExchange (79)
               :                       +- * HashAggregate (104)
               :                          +- * ColumnarToRow (103)
               :                             +- CometColumnarExchange (102)
               :                                +- RowToColumnar (101)
               :                                   +- * HashAggregate (100)
               :                                      +- * Project (99)
               :                                         +- * BroadcastHashJoin Inner BuildRight (98)
               :                                            :- * Project (96)
               :                                            :  +- * BroadcastHashJoin Inner BuildRight (95)
               :                                            :     :- * ColumnarToRow (93)
               :                                            :     :  +- CometUnion (92)
               :                                            :     :     :- CometProject (84)
               :                                            :     :     :  +- CometFilter (83)
               :                                            :     :     :     +- CometScan parquet spark_catalog.default.web_sales (82)
               :                                            :     :     +- CometProject (91)
               :                                            :     :        +- CometBroadcastHashJoin (90)
               :                                            :     :           :- CometBroadcastExchange (86)
               :                                            :     :           :  +- CometScan parquet spark_catalog.default.web_returns (85)
               :                                            :     :           +- CometProject (89)
               :                                            :     :              +- CometFilter (88)
               :                                            :     :                 +- CometScan parquet spark_catalog.default.web_sales (87)
               :                                            :     +- ReusedExchange (94)
               :                                            +- ReusedExchange (97)
               +- CometHashAggregate (149)
                  +- CometColumnarExchange (148)
                     +- CometHashAggregate (147)
                        +- CometHashAggregate (146)
                           +- CometColumnarExchange (145)
                              +- RowToColumnar (144)
                                 +- * HashAggregate (143)
                                    +- Union (142)
                                       :- * HashAggregate (115)
                                       :  +- * ColumnarToRow (114)
                                       :     +- ReusedExchange (113)
                                       :- * HashAggregate (118)
                                       :  +- * ColumnarToRow (117)
                                       :     +- ReusedExchange (116)
                                       +- * HashAggregate (141)
                                          +- * ColumnarToRow (140)
                                             +- CometColumnarExchange (139)
                                                +- RowToColumnar (138)
                                                   +- * HashAggregate (137)
                                                      +- * Project (136)
                                                         +- * BroadcastHashJoin Inner BuildRight (135)
                                                            :- * Project (133)
                                                            :  +- * BroadcastHashJoin Inner BuildRight (132)
                                                            :     :- * ColumnarToRow (130)
                                                            :     :  +- CometUnion (129)
                                                            :     :     :- CometProject (121)
                                                            :     :     :  +- CometFilter (120)
                                                            :     :     :     +- CometScan parquet spark_catalog.default.web_sales (119)
                                                            :     :     +- CometProject (128)
                                                            :     :        +- CometBroadcastHashJoin (127)
                                                            :     :           :- CometBroadcastExchange (123)
                                                            :     :           :  +- CometScan parquet spark_catalog.default.web_returns (122)
                                                            :     :           +- CometProject (126)
                                                            :     :              +- CometFilter (125)
                                                            :     :                 +- CometScan parquet spark_catalog.default.web_sales (124)
                                                            :     +- ReusedExchange (131)
                                                            +- ReusedExchange (134)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(3) CometProject
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Arguments: [store_sk#6, date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11], [ss_store_sk#1 AS store_sk#6, ss_sold_date_sk#4 AS date_sk#7, ss_ext_sales_price#2 AS sales_price#8, ss_net_profit#3 AS profit#9, 0.00 AS return_amt#10, 0.00 AS net_loss#11]

(unknown) Scan parquet spark_catalog.default.store_returns
Output [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#15), dynamicpruningexpression(sr_returned_date_sk#15 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(5) CometFilter
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Condition : isnotnull(sr_store_sk#12)

(6) CometProject
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Arguments: [store_sk#16, date_sk#17, sales_price#18, profit#19, return_amt#20, net_loss#21], [sr_store_sk#12 AS store_sk#16, sr_returned_date_sk#15 AS date_sk#17, 0.00 AS sales_price#18, 0.00 AS profit#19, sr_return_amt#13 AS return_amt#20, sr_net_loss#14 AS net_loss#21]

(7) CometUnion
Child 0 Input [6]: [store_sk#6, date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11]
Child 1 Input [6]: [store_sk#16, date_sk#17, sales_price#18, profit#19, return_amt#20, net_loss#21]

(8) ColumnarToRow [codegen id : 3]
Input [6]: [store_sk#6, date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11]

(9) ReusedExchange [Reuses operator id: 160]
Output [1]: [d_date_sk#22]

(10) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [date_sk#7]
Right keys [1]: [d_date_sk#22]
Join type: Inner
Join condition: None

(11) Project [codegen id : 3]
Output [5]: [store_sk#6, sales_price#8, profit#9, return_amt#10, net_loss#11]
Input [7]: [store_sk#6, date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, d_date_sk#22]

(unknown) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#23, s_store_id#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(13) CometFilter
Input [2]: [s_store_sk#23, s_store_id#24]
Condition : isnotnull(s_store_sk#23)

(14) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#23, s_store_id#24]

(15) BroadcastExchange
Input [2]: [s_store_sk#23, s_store_id#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [store_sk#6]
Right keys [1]: [s_store_sk#23]
Join type: Inner
Join condition: None

(17) Project [codegen id : 3]
Output [5]: [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#24]
Input [7]: [store_sk#6, sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_sk#23, s_store_id#24]

(18) HashAggregate [codegen id : 3]
Input [5]: [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#24]
Keys [1]: [s_store_id#24]
Functions [4]: [partial_sum(UnscaledValue(sales_price#8)), partial_sum(UnscaledValue(return_amt#10)), partial_sum(UnscaledValue(profit#9)), partial_sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum#25, sum#26, sum#27, sum#28]
Results [5]: [s_store_id#24, sum#29, sum#30, sum#31, sum#32]

(19) RowToColumnar
Input [5]: [s_store_id#24, sum#29, sum#30, sum#31, sum#32]

(20) CometColumnarExchange
Input [5]: [s_store_id#24, sum#29, sum#30, sum#31, sum#32]
Arguments: hashpartitioning(s_store_id#24, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(21) ColumnarToRow [codegen id : 4]
Input [5]: [s_store_id#24, sum#29, sum#30, sum#31, sum#32]

(22) HashAggregate [codegen id : 4]
Input [5]: [s_store_id#24, sum#29, sum#30, sum#31, sum#32]
Keys [1]: [s_store_id#24]
Functions [4]: [sum(UnscaledValue(sales_price#8)), sum(UnscaledValue(return_amt#10)), sum(UnscaledValue(profit#9)), sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#8))#33, sum(UnscaledValue(return_amt#10))#34, sum(UnscaledValue(profit#9))#35, sum(UnscaledValue(net_loss#11))#36]
Results [5]: [store channel AS channel#37, concat(store, s_store_id#24) AS id#38, MakeDecimal(sum(UnscaledValue(sales_price#8))#33,17,2) AS sales#39, MakeDecimal(sum(UnscaledValue(return_amt#10))#34,17,2) AS returns#40, (MakeDecimal(sum(UnscaledValue(profit#9))#35,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#11))#36,17,2)) AS profit#41]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_catalog_page_sk#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#45), dynamicpruningexpression(cs_sold_date_sk#45 IN dynamicpruning#46)]
PushedFilters: [IsNotNull(cs_catalog_page_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(24) CometFilter
Input [4]: [cs_catalog_page_sk#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]
Condition : isnotnull(cs_catalog_page_sk#42)

(25) CometProject
Input [4]: [cs_catalog_page_sk#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]
Arguments: [page_sk#47, date_sk#48, sales_price#49, profit#50, return_amt#51, net_loss#52], [cs_catalog_page_sk#42 AS page_sk#47, cs_sold_date_sk#45 AS date_sk#48, cs_ext_sales_price#43 AS sales_price#49, cs_net_profit#44 AS profit#50, 0.00 AS return_amt#51, 0.00 AS net_loss#52]

(unknown) Scan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_catalog_page_sk#53, cr_return_amount#54, cr_net_loss#55, cr_returned_date_sk#56]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#56), dynamicpruningexpression(cr_returned_date_sk#56 IN dynamicpruning#46)]
PushedFilters: [IsNotNull(cr_catalog_page_sk)]
ReadSchema: struct<cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(27) CometFilter
Input [4]: [cr_catalog_page_sk#53, cr_return_amount#54, cr_net_loss#55, cr_returned_date_sk#56]
Condition : isnotnull(cr_catalog_page_sk#53)

(28) CometProject
Input [4]: [cr_catalog_page_sk#53, cr_return_amount#54, cr_net_loss#55, cr_returned_date_sk#56]
Arguments: [page_sk#57, date_sk#58, sales_price#59, profit#60, return_amt#61, net_loss#62], [cr_catalog_page_sk#53 AS page_sk#57, cr_returned_date_sk#56 AS date_sk#58, 0.00 AS sales_price#59, 0.00 AS profit#60, cr_return_amount#54 AS return_amt#61, cr_net_loss#55 AS net_loss#62]

(29) CometUnion
Child 0 Input [6]: [page_sk#47, date_sk#48, sales_price#49, profit#50, return_amt#51, net_loss#52]
Child 1 Input [6]: [page_sk#57, date_sk#58, sales_price#59, profit#60, return_amt#61, net_loss#62]

(30) ColumnarToRow [codegen id : 7]
Input [6]: [page_sk#47, date_sk#48, sales_price#49, profit#50, return_amt#51, net_loss#52]

(31) ReusedExchange [Reuses operator id: 160]
Output [1]: [d_date_sk#63]

(32) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [date_sk#48]
Right keys [1]: [d_date_sk#63]
Join type: Inner
Join condition: None

(33) Project [codegen id : 7]
Output [5]: [page_sk#47, sales_price#49, profit#50, return_amt#51, net_loss#52]
Input [7]: [page_sk#47, date_sk#48, sales_price#49, profit#50, return_amt#51, net_loss#52, d_date_sk#63]

(unknown) Scan parquet spark_catalog.default.catalog_page
Output [2]: [cp_catalog_page_sk#64, cp_catalog_page_id#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(35) CometFilter
Input [2]: [cp_catalog_page_sk#64, cp_catalog_page_id#65]
Condition : isnotnull(cp_catalog_page_sk#64)

(36) ColumnarToRow [codegen id : 6]
Input [2]: [cp_catalog_page_sk#64, cp_catalog_page_id#65]

(37) BroadcastExchange
Input [2]: [cp_catalog_page_sk#64, cp_catalog_page_id#65]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(38) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [page_sk#47]
Right keys [1]: [cp_catalog_page_sk#64]
Join type: Inner
Join condition: None

(39) Project [codegen id : 7]
Output [5]: [sales_price#49, profit#50, return_amt#51, net_loss#52, cp_catalog_page_id#65]
Input [7]: [page_sk#47, sales_price#49, profit#50, return_amt#51, net_loss#52, cp_catalog_page_sk#64, cp_catalog_page_id#65]

(40) HashAggregate [codegen id : 7]
Input [5]: [sales_price#49, profit#50, return_amt#51, net_loss#52, cp_catalog_page_id#65]
Keys [1]: [cp_catalog_page_id#65]
Functions [4]: [partial_sum(UnscaledValue(sales_price#49)), partial_sum(UnscaledValue(return_amt#51)), partial_sum(UnscaledValue(profit#50)), partial_sum(UnscaledValue(net_loss#52))]
Aggregate Attributes [4]: [sum#66, sum#67, sum#68, sum#69]
Results [5]: [cp_catalog_page_id#65, sum#70, sum#71, sum#72, sum#73]

(41) RowToColumnar
Input [5]: [cp_catalog_page_id#65, sum#70, sum#71, sum#72, sum#73]

(42) CometColumnarExchange
Input [5]: [cp_catalog_page_id#65, sum#70, sum#71, sum#72, sum#73]
Arguments: hashpartitioning(cp_catalog_page_id#65, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(43) ColumnarToRow [codegen id : 8]
Input [5]: [cp_catalog_page_id#65, sum#70, sum#71, sum#72, sum#73]

(44) HashAggregate [codegen id : 8]
Input [5]: [cp_catalog_page_id#65, sum#70, sum#71, sum#72, sum#73]
Keys [1]: [cp_catalog_page_id#65]
Functions [4]: [sum(UnscaledValue(sales_price#49)), sum(UnscaledValue(return_amt#51)), sum(UnscaledValue(profit#50)), sum(UnscaledValue(net_loss#52))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#49))#74, sum(UnscaledValue(return_amt#51))#75, sum(UnscaledValue(profit#50))#76, sum(UnscaledValue(net_loss#52))#77]
Results [5]: [catalog channel AS channel#78, concat(catalog_page, cp_catalog_page_id#65) AS id#79, MakeDecimal(sum(UnscaledValue(sales_price#49))#74,17,2) AS sales#80, MakeDecimal(sum(UnscaledValue(return_amt#51))#75,17,2) AS returns#81, (MakeDecimal(sum(UnscaledValue(profit#50))#76,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#52))#77,17,2)) AS profit#82]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_web_site_sk#83, ws_ext_sales_price#84, ws_net_profit#85, ws_sold_date_sk#86]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#86), dynamicpruningexpression(ws_sold_date_sk#86 IN dynamicpruning#87)]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(46) CometFilter
Input [4]: [ws_web_site_sk#83, ws_ext_sales_price#84, ws_net_profit#85, ws_sold_date_sk#86]
Condition : isnotnull(ws_web_site_sk#83)

(47) CometProject
Input [4]: [ws_web_site_sk#83, ws_ext_sales_price#84, ws_net_profit#85, ws_sold_date_sk#86]
Arguments: [wsr_web_site_sk#88, date_sk#89, sales_price#90, profit#91, return_amt#92, net_loss#93], [ws_web_site_sk#83 AS wsr_web_site_sk#88, ws_sold_date_sk#86 AS date_sk#89, ws_ext_sales_price#84 AS sales_price#90, ws_net_profit#85 AS profit#91, 0.00 AS return_amt#92, 0.00 AS net_loss#93]

(unknown) Scan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#98), dynamicpruningexpression(wr_returned_date_sk#98 IN dynamicpruning#87)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(49) CometBroadcastExchange
Input [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]
Arguments: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101, ws_sold_date_sk#102]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(51) CometFilter
Input [4]: [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101, ws_sold_date_sk#102]
Condition : ((isnotnull(ws_item_sk#99) AND isnotnull(ws_order_number#101)) AND isnotnull(ws_web_site_sk#100))

(52) CometProject
Input [4]: [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101, ws_sold_date_sk#102]
Arguments: [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101], [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101]

(53) CometBroadcastHashJoin
Left output [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]
Right output [3]: [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101]
Arguments: [wr_item_sk#94, wr_order_number#95], [ws_item_sk#99, ws_order_number#101], Inner

(54) CometProject
Input [8]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98, ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101]
Arguments: [wsr_web_site_sk#103, date_sk#104, sales_price#105, profit#106, return_amt#107, net_loss#108], [ws_web_site_sk#100 AS wsr_web_site_sk#103, wr_returned_date_sk#98 AS date_sk#104, 0.00 AS sales_price#105, 0.00 AS profit#106, wr_return_amt#96 AS return_amt#107, wr_net_loss#97 AS net_loss#108]

(55) CometUnion
Child 0 Input [6]: [wsr_web_site_sk#88, date_sk#89, sales_price#90, profit#91, return_amt#92, net_loss#93]
Child 1 Input [6]: [wsr_web_site_sk#103, date_sk#104, sales_price#105, profit#106, return_amt#107, net_loss#108]

(56) ColumnarToRow [codegen id : 11]
Input [6]: [wsr_web_site_sk#88, date_sk#89, sales_price#90, profit#91, return_amt#92, net_loss#93]

(57) ReusedExchange [Reuses operator id: 160]
Output [1]: [d_date_sk#109]

(58) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [date_sk#89]
Right keys [1]: [d_date_sk#109]
Join type: Inner
Join condition: None

(59) Project [codegen id : 11]
Output [5]: [wsr_web_site_sk#88, sales_price#90, profit#91, return_amt#92, net_loss#93]
Input [7]: [wsr_web_site_sk#88, date_sk#89, sales_price#90, profit#91, return_amt#92, net_loss#93, d_date_sk#109]

(unknown) Scan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#110, web_site_id#111]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(61) CometFilter
Input [2]: [web_site_sk#110, web_site_id#111]
Condition : isnotnull(web_site_sk#110)

(62) ColumnarToRow [codegen id : 10]
Input [2]: [web_site_sk#110, web_site_id#111]

(63) BroadcastExchange
Input [2]: [web_site_sk#110, web_site_id#111]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(64) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [wsr_web_site_sk#88]
Right keys [1]: [web_site_sk#110]
Join type: Inner
Join condition: None

(65) Project [codegen id : 11]
Output [5]: [sales_price#90, profit#91, return_amt#92, net_loss#93, web_site_id#111]
Input [7]: [wsr_web_site_sk#88, sales_price#90, profit#91, return_amt#92, net_loss#93, web_site_sk#110, web_site_id#111]

(66) HashAggregate [codegen id : 11]
Input [5]: [sales_price#90, profit#91, return_amt#92, net_loss#93, web_site_id#111]
Keys [1]: [web_site_id#111]
Functions [4]: [partial_sum(UnscaledValue(sales_price#90)), partial_sum(UnscaledValue(return_amt#92)), partial_sum(UnscaledValue(profit#91)), partial_sum(UnscaledValue(net_loss#93))]
Aggregate Attributes [4]: [sum#112, sum#113, sum#114, sum#115]
Results [5]: [web_site_id#111, sum#116, sum#117, sum#118, sum#119]

(67) RowToColumnar
Input [5]: [web_site_id#111, sum#116, sum#117, sum#118, sum#119]

(68) CometColumnarExchange
Input [5]: [web_site_id#111, sum#116, sum#117, sum#118, sum#119]
Arguments: hashpartitioning(web_site_id#111, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(69) ColumnarToRow [codegen id : 12]
Input [5]: [web_site_id#111, sum#116, sum#117, sum#118, sum#119]

(70) HashAggregate [codegen id : 12]
Input [5]: [web_site_id#111, sum#116, sum#117, sum#118, sum#119]
Keys [1]: [web_site_id#111]
Functions [4]: [sum(UnscaledValue(sales_price#90)), sum(UnscaledValue(return_amt#92)), sum(UnscaledValue(profit#91)), sum(UnscaledValue(net_loss#93))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#90))#120, sum(UnscaledValue(return_amt#92))#121, sum(UnscaledValue(profit#91))#122, sum(UnscaledValue(net_loss#93))#123]
Results [5]: [web channel AS channel#124, concat(web_site, web_site_id#111) AS id#125, MakeDecimal(sum(UnscaledValue(sales_price#90))#120,17,2) AS sales#126, MakeDecimal(sum(UnscaledValue(return_amt#92))#121,17,2) AS returns#127, (MakeDecimal(sum(UnscaledValue(profit#91))#122,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#93))#123,17,2)) AS profit#128]

(71) Union

(72) HashAggregate [codegen id : 13]
Input [5]: [channel#37, id#38, sales#39, returns#40, profit#41]
Keys [2]: [channel#37, id#38]
Functions [3]: [partial_sum(sales#39), partial_sum(returns#40), partial_sum(profit#41)]
Aggregate Attributes [6]: [sum#129, isEmpty#130, sum#131, isEmpty#132, sum#133, isEmpty#134]
Results [8]: [channel#37, id#38, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]

(73) RowToColumnar
Input [8]: [channel#37, id#38, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]

(74) CometColumnarExchange
Input [8]: [channel#37, id#38, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]
Arguments: hashpartitioning(channel#37, id#38, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(75) CometHashAggregate
Input [8]: [channel#37, id#38, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]
Keys [2]: [channel#37, id#38]
Functions [3]: [sum(sales#39), sum(returns#40), sum(profit#41)]

(76) ReusedExchange [Reuses operator id: 20]
Output [5]: [s_store_id#24, sum#141, sum#142, sum#143, sum#144]

(77) ColumnarToRow [codegen id : 17]
Input [5]: [s_store_id#24, sum#141, sum#142, sum#143, sum#144]

(78) HashAggregate [codegen id : 17]
Input [5]: [s_store_id#24, sum#141, sum#142, sum#143, sum#144]
Keys [1]: [s_store_id#24]
Functions [4]: [sum(UnscaledValue(sales_price#8)), sum(UnscaledValue(return_amt#10)), sum(UnscaledValue(profit#9)), sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#8))#33, sum(UnscaledValue(return_amt#10))#34, sum(UnscaledValue(profit#9))#35, sum(UnscaledValue(net_loss#11))#36]
Results [5]: [store channel AS channel#37, concat(store, s_store_id#24) AS id#38, MakeDecimal(sum(UnscaledValue(sales_price#8))#33,17,2) AS sales#39, MakeDecimal(sum(UnscaledValue(return_amt#10))#34,17,2) AS returns#40, (MakeDecimal(sum(UnscaledValue(profit#9))#35,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#11))#36,17,2)) AS profit#41]

(79) ReusedExchange [Reuses operator id: 42]
Output [5]: [cp_catalog_page_id#65, sum#145, sum#146, sum#147, sum#148]

(80) ColumnarToRow [codegen id : 21]
Input [5]: [cp_catalog_page_id#65, sum#145, sum#146, sum#147, sum#148]

(81) HashAggregate [codegen id : 21]
Input [5]: [cp_catalog_page_id#65, sum#145, sum#146, sum#147, sum#148]
Keys [1]: [cp_catalog_page_id#65]
Functions [4]: [sum(UnscaledValue(sales_price#49)), sum(UnscaledValue(return_amt#51)), sum(UnscaledValue(profit#50)), sum(UnscaledValue(net_loss#52))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#49))#74, sum(UnscaledValue(return_amt#51))#75, sum(UnscaledValue(profit#50))#76, sum(UnscaledValue(net_loss#52))#77]
Results [5]: [catalog channel AS channel#78, concat(catalog_page, cp_catalog_page_id#65) AS id#79, MakeDecimal(sum(UnscaledValue(sales_price#49))#74,17,2) AS sales#80, MakeDecimal(sum(UnscaledValue(return_amt#51))#75,17,2) AS returns#81, (MakeDecimal(sum(UnscaledValue(profit#50))#76,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#52))#77,17,2)) AS profit#82]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_web_site_sk#83, ws_ext_sales_price#84, ws_net_profit#85, ws_sold_date_sk#86]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#86), dynamicpruningexpression(ws_sold_date_sk#86 IN dynamicpruning#149)]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(83) CometFilter
Input [4]: [ws_web_site_sk#83, ws_ext_sales_price#84, ws_net_profit#85, ws_sold_date_sk#86]
Condition : isnotnull(ws_web_site_sk#83)

(84) CometProject
Input [4]: [ws_web_site_sk#83, ws_ext_sales_price#84, ws_net_profit#85, ws_sold_date_sk#86]
Arguments: [wsr_web_site_sk#88, date_sk#89, sales_price#90, profit#91, return_amt#92, net_loss#93], [ws_web_site_sk#83 AS wsr_web_site_sk#88, ws_sold_date_sk#86 AS date_sk#89, ws_ext_sales_price#84 AS sales_price#90, ws_net_profit#85 AS profit#91, 0.00 AS return_amt#92, 0.00 AS net_loss#93]

(unknown) Scan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#98), dynamicpruningexpression(wr_returned_date_sk#98 IN dynamicpruning#149)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(86) CometBroadcastExchange
Input [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]
Arguments: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101, ws_sold_date_sk#102]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(88) CometFilter
Input [4]: [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101, ws_sold_date_sk#102]
Condition : ((isnotnull(ws_item_sk#99) AND isnotnull(ws_order_number#101)) AND isnotnull(ws_web_site_sk#100))

(89) CometProject
Input [4]: [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101, ws_sold_date_sk#102]
Arguments: [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101], [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101]

(90) CometBroadcastHashJoin
Left output [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]
Right output [3]: [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101]
Arguments: [wr_item_sk#94, wr_order_number#95], [ws_item_sk#99, ws_order_number#101], Inner

(91) CometProject
Input [8]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98, ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101]
Arguments: [wsr_web_site_sk#103, date_sk#104, sales_price#105, profit#106, return_amt#107, net_loss#108], [ws_web_site_sk#100 AS wsr_web_site_sk#103, wr_returned_date_sk#98 AS date_sk#104, 0.00 AS sales_price#105, 0.00 AS profit#106, wr_return_amt#96 AS return_amt#107, wr_net_loss#97 AS net_loss#108]

(92) CometUnion
Child 0 Input [6]: [wsr_web_site_sk#88, date_sk#89, sales_price#90, profit#91, return_amt#92, net_loss#93]
Child 1 Input [6]: [wsr_web_site_sk#103, date_sk#104, sales_price#105, profit#106, return_amt#107, net_loss#108]

(93) ColumnarToRow [codegen id : 24]
Input [6]: [wsr_web_site_sk#88, date_sk#89, sales_price#90, profit#91, return_amt#92, net_loss#93]

(94) ReusedExchange [Reuses operator id: 160]
Output [1]: [d_date_sk#109]

(95) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [date_sk#89]
Right keys [1]: [d_date_sk#109]
Join type: Inner
Join condition: None

(96) Project [codegen id : 24]
Output [5]: [wsr_web_site_sk#88, sales_price#90, profit#91, return_amt#92, net_loss#93]
Input [7]: [wsr_web_site_sk#88, date_sk#89, sales_price#90, profit#91, return_amt#92, net_loss#93, d_date_sk#109]

(97) ReusedExchange [Reuses operator id: 63]
Output [2]: [web_site_sk#110, web_site_id#111]

(98) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [wsr_web_site_sk#88]
Right keys [1]: [web_site_sk#110]
Join type: Inner
Join condition: None

(99) Project [codegen id : 24]
Output [5]: [sales_price#90, profit#91, return_amt#92, net_loss#93, web_site_id#111]
Input [7]: [wsr_web_site_sk#88, sales_price#90, profit#91, return_amt#92, net_loss#93, web_site_sk#110, web_site_id#111]

(100) HashAggregate [codegen id : 24]
Input [5]: [sales_price#90, profit#91, return_amt#92, net_loss#93, web_site_id#111]
Keys [1]: [web_site_id#111]
Functions [4]: [partial_sum(UnscaledValue(sales_price#90)), partial_sum(UnscaledValue(return_amt#92)), partial_sum(UnscaledValue(profit#91)), partial_sum(UnscaledValue(net_loss#93))]
Aggregate Attributes [4]: [sum#150, sum#151, sum#152, sum#153]
Results [5]: [web_site_id#111, sum#154, sum#155, sum#156, sum#157]

(101) RowToColumnar
Input [5]: [web_site_id#111, sum#154, sum#155, sum#156, sum#157]

(102) CometColumnarExchange
Input [5]: [web_site_id#111, sum#154, sum#155, sum#156, sum#157]
Arguments: hashpartitioning(web_site_id#111, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=8]

(103) ColumnarToRow [codegen id : 25]
Input [5]: [web_site_id#111, sum#154, sum#155, sum#156, sum#157]

(104) HashAggregate [codegen id : 25]
Input [5]: [web_site_id#111, sum#154, sum#155, sum#156, sum#157]
Keys [1]: [web_site_id#111]
Functions [4]: [sum(UnscaledValue(sales_price#90)), sum(UnscaledValue(return_amt#92)), sum(UnscaledValue(profit#91)), sum(UnscaledValue(net_loss#93))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#90))#120, sum(UnscaledValue(return_amt#92))#121, sum(UnscaledValue(profit#91))#122, sum(UnscaledValue(net_loss#93))#123]
Results [5]: [web channel AS channel#124, concat(web_site, web_site_id#111) AS id#125, MakeDecimal(sum(UnscaledValue(sales_price#90))#120,17,2) AS sales#126, MakeDecimal(sum(UnscaledValue(return_amt#92))#121,17,2) AS returns#127, (MakeDecimal(sum(UnscaledValue(profit#91))#122,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#93))#123,17,2)) AS profit#128]

(105) Union

(106) HashAggregate [codegen id : 26]
Input [5]: [channel#37, id#38, sales#39, returns#40, profit#41]
Keys [2]: [channel#37, id#38]
Functions [3]: [partial_sum(sales#39), partial_sum(returns#40), partial_sum(profit#41)]
Aggregate Attributes [6]: [sum#129, isEmpty#130, sum#131, isEmpty#132, sum#133, isEmpty#134]
Results [8]: [channel#37, id#38, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]

(107) RowToColumnar
Input [8]: [channel#37, id#38, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]

(108) CometColumnarExchange
Input [8]: [channel#37, id#38, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]
Arguments: hashpartitioning(channel#37, id#38, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(109) CometHashAggregate
Input [8]: [channel#37, id#38, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]
Keys [2]: [channel#37, id#38]
Functions [3]: [sum(sales#39), sum(returns#40), sum(profit#41)]

(110) CometHashAggregate
Input [4]: [channel#37, sales#158, returns#159, profit#160]
Keys [1]: [channel#37]
Functions [3]: [partial_sum(sales#158), partial_sum(returns#159), partial_sum(profit#160)]

(111) CometColumnarExchange
Input [7]: [channel#37, sum#161, isEmpty#162, sum#163, isEmpty#164, sum#165, isEmpty#166]
Arguments: hashpartitioning(channel#37, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(112) CometHashAggregate
Input [7]: [channel#37, sum#161, isEmpty#162, sum#163, isEmpty#164, sum#165, isEmpty#166]
Keys [1]: [channel#37]
Functions [3]: [sum(sales#158), sum(returns#159), sum(profit#160)]

(113) ReusedExchange [Reuses operator id: 20]
Output [5]: [s_store_id#24, sum#167, sum#168, sum#169, sum#170]

(114) ColumnarToRow [codegen id : 30]
Input [5]: [s_store_id#24, sum#167, sum#168, sum#169, sum#170]

(115) HashAggregate [codegen id : 30]
Input [5]: [s_store_id#24, sum#167, sum#168, sum#169, sum#170]
Keys [1]: [s_store_id#24]
Functions [4]: [sum(UnscaledValue(sales_price#8)), sum(UnscaledValue(return_amt#10)), sum(UnscaledValue(profit#9)), sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#8))#33, sum(UnscaledValue(return_amt#10))#34, sum(UnscaledValue(profit#9))#35, sum(UnscaledValue(net_loss#11))#36]
Results [5]: [store channel AS channel#37, concat(store, s_store_id#24) AS id#38, MakeDecimal(sum(UnscaledValue(sales_price#8))#33,17,2) AS sales#39, MakeDecimal(sum(UnscaledValue(return_amt#10))#34,17,2) AS returns#40, (MakeDecimal(sum(UnscaledValue(profit#9))#35,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#11))#36,17,2)) AS profit#41]

(116) ReusedExchange [Reuses operator id: 42]
Output [5]: [cp_catalog_page_id#65, sum#171, sum#172, sum#173, sum#174]

(117) ColumnarToRow [codegen id : 34]
Input [5]: [cp_catalog_page_id#65, sum#171, sum#172, sum#173, sum#174]

(118) HashAggregate [codegen id : 34]
Input [5]: [cp_catalog_page_id#65, sum#171, sum#172, sum#173, sum#174]
Keys [1]: [cp_catalog_page_id#65]
Functions [4]: [sum(UnscaledValue(sales_price#49)), sum(UnscaledValue(return_amt#51)), sum(UnscaledValue(profit#50)), sum(UnscaledValue(net_loss#52))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#49))#74, sum(UnscaledValue(return_amt#51))#75, sum(UnscaledValue(profit#50))#76, sum(UnscaledValue(net_loss#52))#77]
Results [5]: [catalog channel AS channel#78, concat(catalog_page, cp_catalog_page_id#65) AS id#79, MakeDecimal(sum(UnscaledValue(sales_price#49))#74,17,2) AS sales#80, MakeDecimal(sum(UnscaledValue(return_amt#51))#75,17,2) AS returns#81, (MakeDecimal(sum(UnscaledValue(profit#50))#76,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#52))#77,17,2)) AS profit#82]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_web_site_sk#83, ws_ext_sales_price#84, ws_net_profit#85, ws_sold_date_sk#86]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#86), dynamicpruningexpression(ws_sold_date_sk#86 IN dynamicpruning#175)]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(120) CometFilter
Input [4]: [ws_web_site_sk#83, ws_ext_sales_price#84, ws_net_profit#85, ws_sold_date_sk#86]
Condition : isnotnull(ws_web_site_sk#83)

(121) CometProject
Input [4]: [ws_web_site_sk#83, ws_ext_sales_price#84, ws_net_profit#85, ws_sold_date_sk#86]
Arguments: [wsr_web_site_sk#88, date_sk#89, sales_price#90, profit#91, return_amt#92, net_loss#93], [ws_web_site_sk#83 AS wsr_web_site_sk#88, ws_sold_date_sk#86 AS date_sk#89, ws_ext_sales_price#84 AS sales_price#90, ws_net_profit#85 AS profit#91, 0.00 AS return_amt#92, 0.00 AS net_loss#93]

(unknown) Scan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#98), dynamicpruningexpression(wr_returned_date_sk#98 IN dynamicpruning#175)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(123) CometBroadcastExchange
Input [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]
Arguments: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101, ws_sold_date_sk#102]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(125) CometFilter
Input [4]: [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101, ws_sold_date_sk#102]
Condition : ((isnotnull(ws_item_sk#99) AND isnotnull(ws_order_number#101)) AND isnotnull(ws_web_site_sk#100))

(126) CometProject
Input [4]: [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101, ws_sold_date_sk#102]
Arguments: [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101], [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101]

(127) CometBroadcastHashJoin
Left output [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]
Right output [3]: [ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101]
Arguments: [wr_item_sk#94, wr_order_number#95], [ws_item_sk#99, ws_order_number#101], Inner

(128) CometProject
Input [8]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98, ws_item_sk#99, ws_web_site_sk#100, ws_order_number#101]
Arguments: [wsr_web_site_sk#103, date_sk#104, sales_price#105, profit#106, return_amt#107, net_loss#108], [ws_web_site_sk#100 AS wsr_web_site_sk#103, wr_returned_date_sk#98 AS date_sk#104, 0.00 AS sales_price#105, 0.00 AS profit#106, wr_return_amt#96 AS return_amt#107, wr_net_loss#97 AS net_loss#108]

(129) CometUnion
Child 0 Input [6]: [wsr_web_site_sk#88, date_sk#89, sales_price#90, profit#91, return_amt#92, net_loss#93]
Child 1 Input [6]: [wsr_web_site_sk#103, date_sk#104, sales_price#105, profit#106, return_amt#107, net_loss#108]

(130) ColumnarToRow [codegen id : 37]
Input [6]: [wsr_web_site_sk#88, date_sk#89, sales_price#90, profit#91, return_amt#92, net_loss#93]

(131) ReusedExchange [Reuses operator id: 160]
Output [1]: [d_date_sk#109]

(132) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [date_sk#89]
Right keys [1]: [d_date_sk#109]
Join type: Inner
Join condition: None

(133) Project [codegen id : 37]
Output [5]: [wsr_web_site_sk#88, sales_price#90, profit#91, return_amt#92, net_loss#93]
Input [7]: [wsr_web_site_sk#88, date_sk#89, sales_price#90, profit#91, return_amt#92, net_loss#93, d_date_sk#109]

(134) ReusedExchange [Reuses operator id: 63]
Output [2]: [web_site_sk#110, web_site_id#111]

(135) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [wsr_web_site_sk#88]
Right keys [1]: [web_site_sk#110]
Join type: Inner
Join condition: None

(136) Project [codegen id : 37]
Output [5]: [sales_price#90, profit#91, return_amt#92, net_loss#93, web_site_id#111]
Input [7]: [wsr_web_site_sk#88, sales_price#90, profit#91, return_amt#92, net_loss#93, web_site_sk#110, web_site_id#111]

(137) HashAggregate [codegen id : 37]
Input [5]: [sales_price#90, profit#91, return_amt#92, net_loss#93, web_site_id#111]
Keys [1]: [web_site_id#111]
Functions [4]: [partial_sum(UnscaledValue(sales_price#90)), partial_sum(UnscaledValue(return_amt#92)), partial_sum(UnscaledValue(profit#91)), partial_sum(UnscaledValue(net_loss#93))]
Aggregate Attributes [4]: [sum#176, sum#177, sum#178, sum#179]
Results [5]: [web_site_id#111, sum#180, sum#181, sum#182, sum#183]

(138) RowToColumnar
Input [5]: [web_site_id#111, sum#180, sum#181, sum#182, sum#183]

(139) CometColumnarExchange
Input [5]: [web_site_id#111, sum#180, sum#181, sum#182, sum#183]
Arguments: hashpartitioning(web_site_id#111, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=11]

(140) ColumnarToRow [codegen id : 38]
Input [5]: [web_site_id#111, sum#180, sum#181, sum#182, sum#183]

(141) HashAggregate [codegen id : 38]
Input [5]: [web_site_id#111, sum#180, sum#181, sum#182, sum#183]
Keys [1]: [web_site_id#111]
Functions [4]: [sum(UnscaledValue(sales_price#90)), sum(UnscaledValue(return_amt#92)), sum(UnscaledValue(profit#91)), sum(UnscaledValue(net_loss#93))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#90))#120, sum(UnscaledValue(return_amt#92))#121, sum(UnscaledValue(profit#91))#122, sum(UnscaledValue(net_loss#93))#123]
Results [5]: [web channel AS channel#124, concat(web_site, web_site_id#111) AS id#125, MakeDecimal(sum(UnscaledValue(sales_price#90))#120,17,2) AS sales#126, MakeDecimal(sum(UnscaledValue(return_amt#92))#121,17,2) AS returns#127, (MakeDecimal(sum(UnscaledValue(profit#91))#122,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#93))#123,17,2)) AS profit#128]

(142) Union

(143) HashAggregate [codegen id : 39]
Input [5]: [channel#37, id#38, sales#39, returns#40, profit#41]
Keys [2]: [channel#37, id#38]
Functions [3]: [partial_sum(sales#39), partial_sum(returns#40), partial_sum(profit#41)]
Aggregate Attributes [6]: [sum#129, isEmpty#130, sum#131, isEmpty#132, sum#133, isEmpty#134]
Results [8]: [channel#37, id#38, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]

(144) RowToColumnar
Input [8]: [channel#37, id#38, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]

(145) CometColumnarExchange
Input [8]: [channel#37, id#38, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]
Arguments: hashpartitioning(channel#37, id#38, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=12]

(146) CometHashAggregate
Input [8]: [channel#37, id#38, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]
Keys [2]: [channel#37, id#38]
Functions [3]: [sum(sales#39), sum(returns#40), sum(profit#41)]

(147) CometHashAggregate
Input [3]: [sales#158, returns#159, profit#160]
Keys: []
Functions [3]: [partial_sum(sales#158), partial_sum(returns#159), partial_sum(profit#160)]

(148) CometColumnarExchange
Input [6]: [sum#184, isEmpty#185, sum#186, isEmpty#187, sum#188, isEmpty#189]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=13]

(149) CometHashAggregate
Input [6]: [sum#184, isEmpty#185, sum#186, isEmpty#187, sum#188, isEmpty#189]
Keys: []
Functions [3]: [sum(sales#158), sum(returns#159), sum(profit#160)]

(150) CometUnion
Child 0 Input [5]: [channel#37, id#38, sales#190, returns#191, profit#192]
Child 1 Input [5]: [channel#37, id#193, sum(sales)#194, sum(returns)#195, sum(profit)#196]
Child 2 Input [5]: [channel#197, id#198, sum(sales)#199, sum(returns)#200, sum(profit)#201]

(151) CometHashAggregate
Input [5]: [channel#37, id#38, sales#190, returns#191, profit#192]
Keys [5]: [channel#37, id#38, sales#190, returns#191, profit#192]
Functions: []

(152) CometColumnarExchange
Input [5]: [channel#37, id#38, sales#190, returns#191, profit#192]
Arguments: hashpartitioning(channel#37, id#38, sales#190, returns#191, profit#192, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=14]

(153) CometHashAggregate
Input [5]: [channel#37, id#38, sales#190, returns#191, profit#192]
Keys [5]: [channel#37, id#38, sales#190, returns#191, profit#192]
Functions: []

(154) CometTakeOrderedAndProject
Input [5]: [channel#37, id#38, sales#190, returns#191, profit#192]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[channel#37 ASC NULLS FIRST,id#38 ASC NULLS FIRST], output=[channel#37,id#38,sales#190,returns#191,profit#192]), 100, [channel#37 ASC NULLS FIRST, id#38 ASC NULLS FIRST], [channel#37, id#38, sales#190, returns#191, profit#192]

(155) ColumnarToRow [codegen id : 40]
Input [5]: [channel#37, id#38, sales#190, returns#191, profit#192]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (160)
+- * ColumnarToRow (159)
   +- CometProject (158)
      +- CometFilter (157)
         +- CometScan parquet spark_catalog.default.date_dim (156)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#22, d_date#202]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(157) CometFilter
Input [2]: [d_date_sk#22, d_date#202]
Condition : (((isnotnull(d_date#202) AND (d_date#202 >= 1998-08-04)) AND (d_date#202 <= 1998-08-18)) AND isnotnull(d_date_sk#22))

(158) CometProject
Input [2]: [d_date_sk#22, d_date#202]
Arguments: [d_date_sk#22], [d_date_sk#22]

(159) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#22]

(160) BroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15]

Subquery:2 Hosting operator id = 4 Hosting Expression = sr_returned_date_sk#15 IN dynamicpruning#5

Subquery:3 Hosting operator id = 23 Hosting Expression = cs_sold_date_sk#45 IN dynamicpruning#5

Subquery:4 Hosting operator id = 26 Hosting Expression = cr_returned_date_sk#56 IN dynamicpruning#5

Subquery:5 Hosting operator id = 45 Hosting Expression = ws_sold_date_sk#86 IN dynamicpruning#5

Subquery:6 Hosting operator id = 48 Hosting Expression = wr_returned_date_sk#98 IN dynamicpruning#5

Subquery:7 Hosting operator id = 82 Hosting Expression = ws_sold_date_sk#86 IN dynamicpruning#5

Subquery:8 Hosting operator id = 85 Hosting Expression = wr_returned_date_sk#98 IN dynamicpruning#5

Subquery:9 Hosting operator id = 119 Hosting Expression = ws_sold_date_sk#86 IN dynamicpruning#5

Subquery:10 Hosting operator id = 122 Hosting Expression = wr_returned_date_sk#98 IN dynamicpruning#5


