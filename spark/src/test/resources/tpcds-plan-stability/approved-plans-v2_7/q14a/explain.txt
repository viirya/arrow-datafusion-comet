== Physical Plan ==
* ColumnarToRow (131)
+- CometTakeOrderedAndProject (130)
   +- CometHashAggregate (129)
      +- CometColumnarExchange (128)
         +- CometHashAggregate (127)
            +- CometUnion (126)
               :- CometHashAggregate (105)
               :  +- CometColumnarExchange (104)
               :     +- CometHashAggregate (103)
               :        +- CometUnion (102)
               :           :- CometFilter (69)
               :           :  +- CometHashAggregate (68)
               :           :     +- CometColumnarExchange (67)
               :           :        +- RowToColumnar (66)
               :           :           +- * HashAggregate (65)
               :           :              +- * Project (64)
               :           :                 +- * BroadcastHashJoin Inner BuildRight (63)
               :           :                    :- * Project (61)
               :           :                    :  +- * BroadcastHashJoin Inner BuildRight (60)
               :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (53)
               :           :                    :     :  :- * ColumnarToRow (3)
               :           :                    :     :  :  +- CometFilter (2)
               :           :                    :     :  :     +- CometScan parquet spark_catalog.default.store_sales (1)
               :           :                    :     :  +- BroadcastExchange (52)
               :           :                    :     :     +- * Project (51)
               :           :                    :     :        +- * BroadcastHashJoin Inner BuildRight (50)
               :           :                    :     :           :- * ColumnarToRow (6)
               :           :                    :     :           :  +- CometFilter (5)
               :           :                    :     :           :     +- CometScan parquet spark_catalog.default.item (4)
               :           :                    :     :           +- BroadcastExchange (49)
               :           :                    :     :              +- * BroadcastHashJoin LeftSemi BuildRight (48)
               :           :                    :     :                 :- * ColumnarToRow (37)
               :           :                    :     :                 :  +- CometHashAggregate (36)
               :           :                    :     :                 :     +- CometColumnarExchange (35)
               :           :                    :     :                 :        +- RowToColumnar (34)
               :           :                    :     :                 :           +- * HashAggregate (33)
               :           :                    :     :                 :              +- * Project (32)
               :           :                    :     :                 :                 +- * BroadcastHashJoin Inner BuildRight (31)
               :           :                    :     :                 :                    :- * Project (29)
               :           :                    :     :                 :                    :  +- * BroadcastHashJoin Inner BuildRight (28)
               :           :                    :     :                 :                    :     :- * ColumnarToRow (9)
               :           :                    :     :                 :                    :     :  +- CometFilter (8)
               :           :                    :     :                 :                    :     :     +- CometScan parquet spark_catalog.default.store_sales (7)
               :           :                    :     :                 :                    :     +- BroadcastExchange (27)
               :           :                    :     :                 :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (26)
               :           :                    :     :                 :                    :           :- * ColumnarToRow (12)
               :           :                    :     :                 :                    :           :  +- CometFilter (11)
               :           :                    :     :                 :                    :           :     +- CometScan parquet spark_catalog.default.item (10)
               :           :                    :     :                 :                    :           +- BroadcastExchange (25)
               :           :                    :     :                 :                    :              +- * Project (24)
               :           :                    :     :                 :                    :                 +- * BroadcastHashJoin Inner BuildRight (23)
               :           :                    :     :                 :                    :                    :- * Project (21)
               :           :                    :     :                 :                    :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
               :           :                    :     :                 :                    :                    :     :- * ColumnarToRow (15)
               :           :                    :     :                 :                    :                    :     :  +- CometFilter (14)
               :           :                    :     :                 :                    :                    :     :     +- CometScan parquet spark_catalog.default.catalog_sales (13)
               :           :                    :     :                 :                    :                    :     +- BroadcastExchange (19)
               :           :                    :     :                 :                    :                    :        +- * ColumnarToRow (18)
               :           :                    :     :                 :                    :                    :           +- CometFilter (17)
               :           :                    :     :                 :                    :                    :              +- CometScan parquet spark_catalog.default.item (16)
               :           :                    :     :                 :                    :                    +- ReusedExchange (22)
               :           :                    :     :                 :                    +- ReusedExchange (30)
               :           :                    :     :                 +- BroadcastExchange (47)
               :           :                    :     :                    +- * Project (46)
               :           :                    :     :                       +- * BroadcastHashJoin Inner BuildRight (45)
               :           :                    :     :                          :- * Project (43)
               :           :                    :     :                          :  +- * BroadcastHashJoin Inner BuildRight (42)
               :           :                    :     :                          :     :- * ColumnarToRow (40)
               :           :                    :     :                          :     :  +- CometFilter (39)
               :           :                    :     :                          :     :     +- CometScan parquet spark_catalog.default.web_sales (38)
               :           :                    :     :                          :     +- ReusedExchange (41)
               :           :                    :     :                          +- ReusedExchange (44)
               :           :                    :     +- BroadcastExchange (59)
               :           :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (58)
               :           :                    :           :- * ColumnarToRow (56)
               :           :                    :           :  +- CometFilter (55)
               :           :                    :           :     +- CometScan parquet spark_catalog.default.item (54)
               :           :                    :           +- ReusedExchange (57)
               :           :                    +- ReusedExchange (62)
               :           :- CometFilter (85)
               :           :  +- CometHashAggregate (84)
               :           :     +- CometColumnarExchange (83)
               :           :        +- RowToColumnar (82)
               :           :           +- * HashAggregate (81)
               :           :              +- * Project (80)
               :           :                 +- * BroadcastHashJoin Inner BuildRight (79)
               :           :                    :- * Project (77)
               :           :                    :  +- * BroadcastHashJoin Inner BuildRight (76)
               :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (74)
               :           :                    :     :  :- * ColumnarToRow (72)
               :           :                    :     :  :  +- CometFilter (71)
               :           :                    :     :  :     +- CometScan parquet spark_catalog.default.catalog_sales (70)
               :           :                    :     :  +- ReusedExchange (73)
               :           :                    :     +- ReusedExchange (75)
               :           :                    +- ReusedExchange (78)
               :           +- CometFilter (101)
               :              +- CometHashAggregate (100)
               :                 +- CometColumnarExchange (99)
               :                    +- RowToColumnar (98)
               :                       +- * HashAggregate (97)
               :                          +- * Project (96)
               :                             +- * BroadcastHashJoin Inner BuildRight (95)
               :                                :- * Project (93)
               :                                :  +- * BroadcastHashJoin Inner BuildRight (92)
               :                                :     :- * BroadcastHashJoin LeftSemi BuildRight (90)
               :                                :     :  :- * ColumnarToRow (88)
               :                                :     :  :  +- CometFilter (87)
               :                                :     :  :     +- CometScan parquet spark_catalog.default.web_sales (86)
               :                                :     :  +- ReusedExchange (89)
               :                                :     +- ReusedExchange (91)
               :                                +- ReusedExchange (94)
               :- CometHashAggregate (110)
               :  +- CometColumnarExchange (109)
               :     +- CometHashAggregate (108)
               :        +- CometHashAggregate (107)
               :           +- ReusedExchange (106)
               :- CometHashAggregate (115)
               :  +- CometColumnarExchange (114)
               :     +- CometHashAggregate (113)
               :        +- CometHashAggregate (112)
               :           +- ReusedExchange (111)
               :- CometHashAggregate (120)
               :  +- CometColumnarExchange (119)
               :     +- CometHashAggregate (118)
               :        +- CometHashAggregate (117)
               :           +- ReusedExchange (116)
               +- CometHashAggregate (125)
                  +- CometColumnarExchange (124)
                     +- CometHashAggregate (123)
                        +- CometHashAggregate (122)
                           +- ReusedExchange (121)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(3) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(unknown) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) CometFilter
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(6) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) CometFilter
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(9) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(unknown) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) CometFilter
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(12) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#19)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) CometFilter
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(15) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]

(unknown) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) CometFilter
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Condition : isnotnull(i_item_sk#20)

(18) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]

(19) BroadcastExchange
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#20]
Join type: Inner
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]

(22) ReusedExchange [Reuses operator id: 167]
Output [1]: [d_date_sk#24]

(23) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#24]
Join type: Inner
Join condition: None

(24) Project [codegen id : 3]
Output [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Input [5]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23, d_date_sk#24]

(25) BroadcastExchange
Input [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=2]

(26) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)]
Right keys [6]: [coalesce(i_brand_id#21, 0), isnull(i_brand_id#21), coalesce(i_class_id#22, 0), isnull(i_class_id#22), coalesce(i_category_id#23, 0), isnull(i_category_id#23)]
Join type: LeftSemi
Join condition: None

(27) BroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#13]
Join type: Inner
Join condition: None

(29) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(30) ReusedExchange [Reuses operator id: 167]
Output [1]: [d_date_sk#25]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#25]
Join type: Inner
Join condition: None

(32) Project [codegen id : 6]
Output [3]: [i_brand_id#14 AS brand_id#26, i_class_id#15 AS class_id#27, i_category_id#16 AS category_id#28]
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#25]

(33) HashAggregate [codegen id : 6]
Input [3]: [brand_id#26, class_id#27, category_id#28]
Keys [3]: [brand_id#26, class_id#27, category_id#28]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#26, class_id#27, category_id#28]

(34) RowToColumnar
Input [3]: [brand_id#26, class_id#27, category_id#28]

(35) CometColumnarExchange
Input [3]: [brand_id#26, class_id#27, category_id#28]
Arguments: hashpartitioning(brand_id#26, class_id#27, category_id#28, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(36) CometHashAggregate
Input [3]: [brand_id#26, class_id#27, category_id#28]
Keys [3]: [brand_id#26, class_id#27, category_id#28]
Functions: []

(37) ColumnarToRow [codegen id : 10]
Input [3]: [brand_id#26, class_id#27, category_id#28]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#29, ws_sold_date_sk#30]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#30), dynamicpruningexpression(ws_sold_date_sk#30 IN dynamicpruning#31)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(39) CometFilter
Input [2]: [ws_item_sk#29, ws_sold_date_sk#30]
Condition : isnotnull(ws_item_sk#29)

(40) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#29, ws_sold_date_sk#30]

(41) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#32, i_brand_id#33, i_class_id#34, i_category_id#35]

(42) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#29]
Right keys [1]: [i_item_sk#32]
Join type: Inner
Join condition: None

(43) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#30, i_brand_id#33, i_class_id#34, i_category_id#35]
Input [6]: [ws_item_sk#29, ws_sold_date_sk#30, i_item_sk#32, i_brand_id#33, i_class_id#34, i_category_id#35]

(44) ReusedExchange [Reuses operator id: 167]
Output [1]: [d_date_sk#36]

(45) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#30]
Right keys [1]: [d_date_sk#36]
Join type: Inner
Join condition: None

(46) Project [codegen id : 9]
Output [3]: [i_brand_id#33, i_class_id#34, i_category_id#35]
Input [5]: [ws_sold_date_sk#30, i_brand_id#33, i_class_id#34, i_category_id#35, d_date_sk#36]

(47) BroadcastExchange
Input [3]: [i_brand_id#33, i_class_id#34, i_category_id#35]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=5]

(48) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#26, 0), isnull(brand_id#26), coalesce(class_id#27, 0), isnull(class_id#27), coalesce(category_id#28, 0), isnull(category_id#28)]
Right keys [6]: [coalesce(i_brand_id#33, 0), isnull(i_brand_id#33), coalesce(i_class_id#34, 0), isnull(i_class_id#34), coalesce(i_category_id#35, 0), isnull(i_category_id#35)]
Join type: LeftSemi
Join condition: None

(49) BroadcastExchange
Input [3]: [brand_id#26, class_id#27, category_id#28]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=6]

(50) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#26, class_id#27, category_id#28]
Join type: Inner
Join condition: None

(51) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#37]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#26, class_id#27, category_id#28]

(52) BroadcastExchange
Input [1]: [ss_item_sk#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(53) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#37]
Join type: LeftSemi
Join condition: None

(unknown) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(55) CometFilter
Input [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]
Condition : isnotnull(i_item_sk#38)

(56) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(57) ReusedExchange [Reuses operator id: 52]
Output [1]: [ss_item_sk#37]

(58) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#38]
Right keys [1]: [ss_item_sk#37]
Join type: LeftSemi
Join condition: None

(59) BroadcastExchange
Input [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(60) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#38]
Join type: Inner
Join condition: None

(61) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#39, i_class_id#40, i_category_id#41]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(62) ReusedExchange [Reuses operator id: 162]
Output [1]: [d_date_sk#42]

(63) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#42]
Join type: Inner
Join condition: None

(64) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#39, i_class_id#40, i_category_id#41]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#39, i_class_id#40, i_category_id#41, d_date_sk#42]

(65) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#39, i_class_id#40, i_category_id#41]
Keys [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#43, isEmpty#44, count#45]
Results [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]

(66) RowToColumnar
Input [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]

(67) CometColumnarExchange
Input [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]
Arguments: hashpartitioning(i_brand_id#39, i_class_id#40, i_category_id#41, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(68) CometHashAggregate
Input [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]
Keys [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]

(69) CometFilter
Input [6]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sales#50, number_sales#51]
Condition : (isnotnull(sales#50) AND (cast(sales#50 as decimal(32,6)) > cast(Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56, cs_sold_date_sk#57]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#57), dynamicpruningexpression(cs_sold_date_sk#57 IN dynamicpruning#58)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(71) CometFilter
Input [4]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56, cs_sold_date_sk#57]
Condition : isnotnull(cs_item_sk#54)

(72) ColumnarToRow [codegen id : 50]
Input [4]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56, cs_sold_date_sk#57]

(73) ReusedExchange [Reuses operator id: 52]
Output [1]: [ss_item_sk#37]

(74) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [cs_item_sk#54]
Right keys [1]: [ss_item_sk#37]
Join type: LeftSemi
Join condition: None

(75) ReusedExchange [Reuses operator id: 59]
Output [4]: [i_item_sk#59, i_brand_id#60, i_class_id#61, i_category_id#62]

(76) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [cs_item_sk#54]
Right keys [1]: [i_item_sk#59]
Join type: Inner
Join condition: None

(77) Project [codegen id : 50]
Output [6]: [cs_quantity#55, cs_list_price#56, cs_sold_date_sk#57, i_brand_id#60, i_class_id#61, i_category_id#62]
Input [8]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56, cs_sold_date_sk#57, i_item_sk#59, i_brand_id#60, i_class_id#61, i_category_id#62]

(78) ReusedExchange [Reuses operator id: 162]
Output [1]: [d_date_sk#63]

(79) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [cs_sold_date_sk#57]
Right keys [1]: [d_date_sk#63]
Join type: Inner
Join condition: None

(80) Project [codegen id : 50]
Output [5]: [cs_quantity#55, cs_list_price#56, i_brand_id#60, i_class_id#61, i_category_id#62]
Input [7]: [cs_quantity#55, cs_list_price#56, cs_sold_date_sk#57, i_brand_id#60, i_class_id#61, i_category_id#62, d_date_sk#63]

(81) HashAggregate [codegen id : 50]
Input [5]: [cs_quantity#55, cs_list_price#56, i_brand_id#60, i_class_id#61, i_category_id#62]
Keys [3]: [i_brand_id#60, i_class_id#61, i_category_id#62]
Functions [2]: [partial_sum((cast(cs_quantity#55 as decimal(10,0)) * cs_list_price#56)), partial_count(1)]
Aggregate Attributes [3]: [sum#64, isEmpty#65, count#66]
Results [6]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum#67, isEmpty#68, count#69]

(82) RowToColumnar
Input [6]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum#67, isEmpty#68, count#69]

(83) CometColumnarExchange
Input [6]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum#67, isEmpty#68, count#69]
Arguments: hashpartitioning(i_brand_id#60, i_class_id#61, i_category_id#62, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(84) CometHashAggregate
Input [6]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum#67, isEmpty#68, count#69]
Keys [3]: [i_brand_id#60, i_class_id#61, i_category_id#62]
Functions [2]: [sum((cast(cs_quantity#55 as decimal(10,0)) * cs_list_price#56)), count(1)]

(85) CometFilter
Input [6]: [channel#70, i_brand_id#60, i_class_id#61, i_category_id#62, sales#71, number_sales#72]
Condition : (isnotnull(sales#71) AND (cast(sales#71 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(unknown) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#73, ws_quantity#74, ws_list_price#75, ws_sold_date_sk#76]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#76), dynamicpruningexpression(ws_sold_date_sk#76 IN dynamicpruning#77)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(87) CometFilter
Input [4]: [ws_item_sk#73, ws_quantity#74, ws_list_price#75, ws_sold_date_sk#76]
Condition : isnotnull(ws_item_sk#73)

(88) ColumnarToRow [codegen id : 75]
Input [4]: [ws_item_sk#73, ws_quantity#74, ws_list_price#75, ws_sold_date_sk#76]

(89) ReusedExchange [Reuses operator id: 52]
Output [1]: [ss_item_sk#37]

(90) BroadcastHashJoin [codegen id : 75]
Left keys [1]: [ws_item_sk#73]
Right keys [1]: [ss_item_sk#37]
Join type: LeftSemi
Join condition: None

(91) ReusedExchange [Reuses operator id: 59]
Output [4]: [i_item_sk#78, i_brand_id#79, i_class_id#80, i_category_id#81]

(92) BroadcastHashJoin [codegen id : 75]
Left keys [1]: [ws_item_sk#73]
Right keys [1]: [i_item_sk#78]
Join type: Inner
Join condition: None

(93) Project [codegen id : 75]
Output [6]: [ws_quantity#74, ws_list_price#75, ws_sold_date_sk#76, i_brand_id#79, i_class_id#80, i_category_id#81]
Input [8]: [ws_item_sk#73, ws_quantity#74, ws_list_price#75, ws_sold_date_sk#76, i_item_sk#78, i_brand_id#79, i_class_id#80, i_category_id#81]

(94) ReusedExchange [Reuses operator id: 162]
Output [1]: [d_date_sk#82]

(95) BroadcastHashJoin [codegen id : 75]
Left keys [1]: [ws_sold_date_sk#76]
Right keys [1]: [d_date_sk#82]
Join type: Inner
Join condition: None

(96) Project [codegen id : 75]
Output [5]: [ws_quantity#74, ws_list_price#75, i_brand_id#79, i_class_id#80, i_category_id#81]
Input [7]: [ws_quantity#74, ws_list_price#75, ws_sold_date_sk#76, i_brand_id#79, i_class_id#80, i_category_id#81, d_date_sk#82]

(97) HashAggregate [codegen id : 75]
Input [5]: [ws_quantity#74, ws_list_price#75, i_brand_id#79, i_class_id#80, i_category_id#81]
Keys [3]: [i_brand_id#79, i_class_id#80, i_category_id#81]
Functions [2]: [partial_sum((cast(ws_quantity#74 as decimal(10,0)) * ws_list_price#75)), partial_count(1)]
Aggregate Attributes [3]: [sum#83, isEmpty#84, count#85]
Results [6]: [i_brand_id#79, i_class_id#80, i_category_id#81, sum#86, isEmpty#87, count#88]

(98) RowToColumnar
Input [6]: [i_brand_id#79, i_class_id#80, i_category_id#81, sum#86, isEmpty#87, count#88]

(99) CometColumnarExchange
Input [6]: [i_brand_id#79, i_class_id#80, i_category_id#81, sum#86, isEmpty#87, count#88]
Arguments: hashpartitioning(i_brand_id#79, i_class_id#80, i_category_id#81, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=11]

(100) CometHashAggregate
Input [6]: [i_brand_id#79, i_class_id#80, i_category_id#81, sum#86, isEmpty#87, count#88]
Keys [3]: [i_brand_id#79, i_class_id#80, i_category_id#81]
Functions [2]: [sum((cast(ws_quantity#74 as decimal(10,0)) * ws_list_price#75)), count(1)]

(101) CometFilter
Input [6]: [channel#89, i_brand_id#79, i_class_id#80, i_category_id#81, sales#90, number_sales#91]
Condition : (isnotnull(sales#90) AND (cast(sales#90 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(102) CometUnion
Child 0 Input [6]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sales#50, number_sales#51]
Child 1 Input [6]: [channel#70, i_brand_id#60, i_class_id#61, i_category_id#62, sales#71, number_sales#72]
Child 2 Input [6]: [channel#89, i_brand_id#79, i_class_id#80, i_category_id#81, sales#90, number_sales#91]

(103) CometHashAggregate
Input [6]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sales#50, number_sales#51]
Keys [4]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [partial_sum(sales#50), partial_sum(number_sales#51)]

(104) CometColumnarExchange
Input [7]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum#92, isEmpty#93, sum#94]
Arguments: hashpartitioning(channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=12]

(105) CometHashAggregate
Input [7]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum#92, isEmpty#93, sum#94]
Keys [4]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [sum(sales#50), sum(number_sales#51)]

(106) ReusedExchange [Reuses operator id: 104]
Output [7]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum#92, isEmpty#93, sum#94]

(107) CometHashAggregate
Input [7]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum#92, isEmpty#93, sum#94]
Keys [4]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [sum(sales#50), sum(number_sales#51)]

(108) CometHashAggregate
Input [5]: [channel#49, i_brand_id#39, i_class_id#40, sum_sales#95, number_sales#96]
Keys [3]: [channel#49, i_brand_id#39, i_class_id#40]
Functions [2]: [partial_sum(sum_sales#95), partial_sum(number_sales#96)]

(109) CometColumnarExchange
Input [6]: [channel#49, i_brand_id#39, i_class_id#40, sum#97, isEmpty#98, sum#99]
Arguments: hashpartitioning(channel#49, i_brand_id#39, i_class_id#40, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=13]

(110) CometHashAggregate
Input [6]: [channel#49, i_brand_id#39, i_class_id#40, sum#97, isEmpty#98, sum#99]
Keys [3]: [channel#49, i_brand_id#39, i_class_id#40]
Functions [2]: [sum(sum_sales#95), sum(number_sales#96)]

(111) ReusedExchange [Reuses operator id: 104]
Output [7]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum#92, isEmpty#93, sum#94]

(112) CometHashAggregate
Input [7]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum#92, isEmpty#93, sum#94]
Keys [4]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [sum(sales#50), sum(number_sales#51)]

(113) CometHashAggregate
Input [4]: [channel#49, i_brand_id#39, sum_sales#95, number_sales#96]
Keys [2]: [channel#49, i_brand_id#39]
Functions [2]: [partial_sum(sum_sales#95), partial_sum(number_sales#96)]

(114) CometColumnarExchange
Input [5]: [channel#49, i_brand_id#39, sum#100, isEmpty#101, sum#102]
Arguments: hashpartitioning(channel#49, i_brand_id#39, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=14]

(115) CometHashAggregate
Input [5]: [channel#49, i_brand_id#39, sum#100, isEmpty#101, sum#102]
Keys [2]: [channel#49, i_brand_id#39]
Functions [2]: [sum(sum_sales#95), sum(number_sales#96)]

(116) ReusedExchange [Reuses operator id: 104]
Output [7]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum#92, isEmpty#93, sum#94]

(117) CometHashAggregate
Input [7]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum#92, isEmpty#93, sum#94]
Keys [4]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [sum(sales#50), sum(number_sales#51)]

(118) CometHashAggregate
Input [3]: [channel#49, sum_sales#95, number_sales#96]
Keys [1]: [channel#49]
Functions [2]: [partial_sum(sum_sales#95), partial_sum(number_sales#96)]

(119) CometColumnarExchange
Input [4]: [channel#49, sum#103, isEmpty#104, sum#105]
Arguments: hashpartitioning(channel#49, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=15]

(120) CometHashAggregate
Input [4]: [channel#49, sum#103, isEmpty#104, sum#105]
Keys [1]: [channel#49]
Functions [2]: [sum(sum_sales#95), sum(number_sales#96)]

(121) ReusedExchange [Reuses operator id: 104]
Output [7]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum#92, isEmpty#93, sum#94]

(122) CometHashAggregate
Input [7]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum#92, isEmpty#93, sum#94]
Keys [4]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [sum(sales#50), sum(number_sales#51)]

(123) CometHashAggregate
Input [2]: [sum_sales#95, number_sales#96]
Keys: []
Functions [2]: [partial_sum(sum_sales#95), partial_sum(number_sales#96)]

(124) CometColumnarExchange
Input [3]: [sum#106, isEmpty#107, sum#108]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=16]

(125) CometHashAggregate
Input [3]: [sum#106, isEmpty#107, sum#108]
Keys: []
Functions [2]: [sum(sum_sales#95), sum(number_sales#96)]

(126) CometUnion
Child 0 Input [6]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#95, number_sales#96]
Child 1 Input [6]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#109, sum(sum_sales)#110, sum(number_sales)#111]
Child 2 Input [6]: [channel#49, i_brand_id#39, i_class_id#112, i_category_id#113, sum(sum_sales)#114, sum(number_sales)#115]
Child 3 Input [6]: [channel#49, i_brand_id#116, i_class_id#117, i_category_id#118, sum(sum_sales)#119, sum(number_sales)#120]
Child 4 Input [6]: [channel#121, i_brand_id#122, i_class_id#123, i_category_id#124, sum(sum_sales)#125, sum(number_sales)#126]

(127) CometHashAggregate
Input [6]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#95, number_sales#96]
Keys [6]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#95, number_sales#96]
Functions: []

(128) CometColumnarExchange
Input [6]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#95, number_sales#96]
Arguments: hashpartitioning(channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#95, number_sales#96, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=17]

(129) CometHashAggregate
Input [6]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#95, number_sales#96]
Keys [6]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#95, number_sales#96]
Functions: []

(130) CometTakeOrderedAndProject
Input [6]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#95, number_sales#96]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[channel#49 ASC NULLS FIRST,i_brand_id#39 ASC NULLS FIRST,i_class_id#40 ASC NULLS FIRST,i_category_id#41 ASC NULLS FIRST], output=[channel#49,i_brand_id#39,i_class_id#40,i_category_id#41,sum_sales#95,number_sales#96]), 100, [channel#49 ASC NULLS FIRST, i_brand_id#39 ASC NULLS FIRST, i_class_id#40 ASC NULLS FIRST, i_category_id#41 ASC NULLS FIRST], [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#95, number_sales#96]

(131) ColumnarToRow [codegen id : 376]
Input [6]: [channel#49, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#95, number_sales#96]

===== Subqueries =====

Subquery:1 Hosting operator id = 69 Hosting Expression = Subquery scalar-subquery#52, [id=#53]
* ColumnarToRow (152)
+- CometHashAggregate (151)
   +- CometColumnarExchange (150)
      +- RowToColumnar (149)
         +- * HashAggregate (148)
            +- Union (147)
               :- * Project (136)
               :  +- * BroadcastHashJoin Inner BuildRight (135)
               :     :- * ColumnarToRow (133)
               :     :  +- CometScan parquet spark_catalog.default.store_sales (132)
               :     +- ReusedExchange (134)
               :- * Project (141)
               :  +- * BroadcastHashJoin Inner BuildRight (140)
               :     :- * ColumnarToRow (138)
               :     :  +- CometScan parquet spark_catalog.default.catalog_sales (137)
               :     +- ReusedExchange (139)
               +- * Project (146)
                  +- * BroadcastHashJoin Inner BuildRight (145)
                     :- * ColumnarToRow (143)
                     :  +- CometScan parquet spark_catalog.default.web_sales (142)
                     +- ReusedExchange (144)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#127, ss_list_price#128, ss_sold_date_sk#129]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#129), dynamicpruningexpression(ss_sold_date_sk#129 IN dynamicpruning#130)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(133) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#127, ss_list_price#128, ss_sold_date_sk#129]

(134) ReusedExchange [Reuses operator id: 167]
Output [1]: [d_date_sk#131]

(135) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#129]
Right keys [1]: [d_date_sk#131]
Join type: Inner
Join condition: None

(136) Project [codegen id : 2]
Output [2]: [ss_quantity#127 AS quantity#132, ss_list_price#128 AS list_price#133]
Input [4]: [ss_quantity#127, ss_list_price#128, ss_sold_date_sk#129, d_date_sk#131]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#134, cs_list_price#135, cs_sold_date_sk#136]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#136), dynamicpruningexpression(cs_sold_date_sk#136 IN dynamicpruning#137)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(138) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#134, cs_list_price#135, cs_sold_date_sk#136]

(139) ReusedExchange [Reuses operator id: 157]
Output [1]: [d_date_sk#138]

(140) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#136]
Right keys [1]: [d_date_sk#138]
Join type: Inner
Join condition: None

(141) Project [codegen id : 4]
Output [2]: [cs_quantity#134 AS quantity#139, cs_list_price#135 AS list_price#140]
Input [4]: [cs_quantity#134, cs_list_price#135, cs_sold_date_sk#136, d_date_sk#138]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#141, ws_list_price#142, ws_sold_date_sk#143]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#143), dynamicpruningexpression(ws_sold_date_sk#143 IN dynamicpruning#144)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(143) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#141, ws_list_price#142, ws_sold_date_sk#143]

(144) ReusedExchange [Reuses operator id: 157]
Output [1]: [d_date_sk#145]

(145) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#143]
Right keys [1]: [d_date_sk#145]
Join type: Inner
Join condition: None

(146) Project [codegen id : 6]
Output [2]: [ws_quantity#141 AS quantity#146, ws_list_price#142 AS list_price#147]
Input [4]: [ws_quantity#141, ws_list_price#142, ws_sold_date_sk#143, d_date_sk#145]

(147) Union

(148) HashAggregate [codegen id : 7]
Input [2]: [quantity#132, list_price#133]
Keys: []
Functions [1]: [partial_avg((cast(quantity#132 as decimal(10,0)) * list_price#133))]
Aggregate Attributes [2]: [sum#148, count#149]
Results [2]: [sum#150, count#151]

(149) RowToColumnar
Input [2]: [sum#150, count#151]

(150) CometColumnarExchange
Input [2]: [sum#150, count#151]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=18]

(151) CometHashAggregate
Input [2]: [sum#150, count#151]
Keys: []
Functions [1]: [avg((cast(quantity#132 as decimal(10,0)) * list_price#133))]

(152) ColumnarToRow [codegen id : 8]
Input [1]: [average_sales#152]

Subquery:2 Hosting operator id = 132 Hosting Expression = ss_sold_date_sk#129 IN dynamicpruning#12

Subquery:3 Hosting operator id = 137 Hosting Expression = cs_sold_date_sk#136 IN dynamicpruning#137
BroadcastExchange (157)
+- * ColumnarToRow (156)
   +- CometProject (155)
      +- CometFilter (154)
         +- CometScan parquet spark_catalog.default.date_dim (153)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#138, d_year#153]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(154) CometFilter
Input [2]: [d_date_sk#138, d_year#153]
Condition : (((isnotnull(d_year#153) AND (d_year#153 >= 1998)) AND (d_year#153 <= 2000)) AND isnotnull(d_date_sk#138))

(155) CometProject
Input [2]: [d_date_sk#138, d_year#153]
Arguments: [d_date_sk#138], [d_date_sk#138]

(156) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#138]

(157) BroadcastExchange
Input [1]: [d_date_sk#138]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=19]

Subquery:4 Hosting operator id = 142 Hosting Expression = ws_sold_date_sk#143 IN dynamicpruning#137

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (162)
+- * ColumnarToRow (161)
   +- CometProject (160)
      +- CometFilter (159)
         +- CometScan parquet spark_catalog.default.date_dim (158)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#42, d_year#154, d_moy#155]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(159) CometFilter
Input [3]: [d_date_sk#42, d_year#154, d_moy#155]
Condition : ((((isnotnull(d_year#154) AND isnotnull(d_moy#155)) AND (d_year#154 = 2000)) AND (d_moy#155 = 11)) AND isnotnull(d_date_sk#42))

(160) CometProject
Input [3]: [d_date_sk#42, d_year#154, d_moy#155]
Arguments: [d_date_sk#42], [d_date_sk#42]

(161) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#42]

(162) BroadcastExchange
Input [1]: [d_date_sk#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=20]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (167)
+- * ColumnarToRow (166)
   +- CometProject (165)
      +- CometFilter (164)
         +- CometScan parquet spark_catalog.default.date_dim (163)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#25, d_year#156]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(164) CometFilter
Input [2]: [d_date_sk#25, d_year#156]
Condition : (((isnotnull(d_year#156) AND (d_year#156 >= 1999)) AND (d_year#156 <= 2001)) AND isnotnull(d_date_sk#25))

(165) CometProject
Input [2]: [d_date_sk#25, d_year#156]
Arguments: [d_date_sk#25], [d_date_sk#25]

(166) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#25]

(167) BroadcastExchange
Input [1]: [d_date_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=21]

Subquery:7 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:8 Hosting operator id = 38 Hosting Expression = ws_sold_date_sk#30 IN dynamicpruning#12

Subquery:9 Hosting operator id = 85 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#53]

Subquery:10 Hosting operator id = 70 Hosting Expression = cs_sold_date_sk#57 IN dynamicpruning#5

Subquery:11 Hosting operator id = 101 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#53]

Subquery:12 Hosting operator id = 86 Hosting Expression = ws_sold_date_sk#76 IN dynamicpruning#5


