== Physical Plan ==
* ColumnarToRow (111)
+- CometTakeOrderedAndProject (110)
   +- CometHashAggregate (109)
      +- CometColumnarExchange (108)
         +- CometHashAggregate (107)
            +- CometExpand (106)
               +- CometUnion (105)
                  :- CometProject (70)
                  :  +- CometFilter (69)
                  :     +- CometHashAggregate (68)
                  :        +- CometColumnarExchange (67)
                  :           +- RowToColumnar (66)
                  :              +- * HashAggregate (65)
                  :                 +- * Project (64)
                  :                    +- * BroadcastHashJoin Inner BuildRight (63)
                  :                       :- * Project (61)
                  :                       :  +- * BroadcastHashJoin Inner BuildRight (60)
                  :                       :     :- * BroadcastHashJoin LeftSemi BuildRight (53)
                  :                       :     :  :- * ColumnarToRow (3)
                  :                       :     :  :  +- CometFilter (2)
                  :                       :     :  :     +- CometScan parquet spark_catalog.default.store_sales (1)
                  :                       :     :  +- BroadcastExchange (52)
                  :                       :     :     +- * Project (51)
                  :                       :     :        +- * BroadcastHashJoin Inner BuildRight (50)
                  :                       :     :           :- * ColumnarToRow (6)
                  :                       :     :           :  +- CometFilter (5)
                  :                       :     :           :     +- CometScan parquet spark_catalog.default.item (4)
                  :                       :     :           +- BroadcastExchange (49)
                  :                       :     :              +- * BroadcastHashJoin LeftSemi BuildRight (48)
                  :                       :     :                 :- * ColumnarToRow (37)
                  :                       :     :                 :  +- CometHashAggregate (36)
                  :                       :     :                 :     +- CometColumnarExchange (35)
                  :                       :     :                 :        +- RowToColumnar (34)
                  :                       :     :                 :           +- * HashAggregate (33)
                  :                       :     :                 :              +- * Project (32)
                  :                       :     :                 :                 +- * BroadcastHashJoin Inner BuildRight (31)
                  :                       :     :                 :                    :- * Project (29)
                  :                       :     :                 :                    :  +- * BroadcastHashJoin Inner BuildRight (28)
                  :                       :     :                 :                    :     :- * ColumnarToRow (9)
                  :                       :     :                 :                    :     :  +- CometFilter (8)
                  :                       :     :                 :                    :     :     +- CometScan parquet spark_catalog.default.store_sales (7)
                  :                       :     :                 :                    :     +- BroadcastExchange (27)
                  :                       :     :                 :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (26)
                  :                       :     :                 :                    :           :- * ColumnarToRow (12)
                  :                       :     :                 :                    :           :  +- CometFilter (11)
                  :                       :     :                 :                    :           :     +- CometScan parquet spark_catalog.default.item (10)
                  :                       :     :                 :                    :           +- BroadcastExchange (25)
                  :                       :     :                 :                    :              +- * Project (24)
                  :                       :     :                 :                    :                 +- * BroadcastHashJoin Inner BuildRight (23)
                  :                       :     :                 :                    :                    :- * Project (21)
                  :                       :     :                 :                    :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
                  :                       :     :                 :                    :                    :     :- * ColumnarToRow (15)
                  :                       :     :                 :                    :                    :     :  +- CometFilter (14)
                  :                       :     :                 :                    :                    :     :     +- CometScan parquet spark_catalog.default.catalog_sales (13)
                  :                       :     :                 :                    :                    :     +- BroadcastExchange (19)
                  :                       :     :                 :                    :                    :        +- * ColumnarToRow (18)
                  :                       :     :                 :                    :                    :           +- CometFilter (17)
                  :                       :     :                 :                    :                    :              +- CometScan parquet spark_catalog.default.item (16)
                  :                       :     :                 :                    :                    +- ReusedExchange (22)
                  :                       :     :                 :                    +- ReusedExchange (30)
                  :                       :     :                 +- BroadcastExchange (47)
                  :                       :     :                    +- * Project (46)
                  :                       :     :                       +- * BroadcastHashJoin Inner BuildRight (45)
                  :                       :     :                          :- * Project (43)
                  :                       :     :                          :  +- * BroadcastHashJoin Inner BuildRight (42)
                  :                       :     :                          :     :- * ColumnarToRow (40)
                  :                       :     :                          :     :  +- CometFilter (39)
                  :                       :     :                          :     :     +- CometScan parquet spark_catalog.default.web_sales (38)
                  :                       :     :                          :     +- ReusedExchange (41)
                  :                       :     :                          +- ReusedExchange (44)
                  :                       :     +- BroadcastExchange (59)
                  :                       :        +- * BroadcastHashJoin LeftSemi BuildRight (58)
                  :                       :           :- * ColumnarToRow (56)
                  :                       :           :  +- CometFilter (55)
                  :                       :           :     +- CometScan parquet spark_catalog.default.item (54)
                  :                       :           +- ReusedExchange (57)
                  :                       +- ReusedExchange (62)
                  :- CometProject (87)
                  :  +- CometFilter (86)
                  :     +- CometHashAggregate (85)
                  :        +- CometColumnarExchange (84)
                  :           +- RowToColumnar (83)
                  :              +- * HashAggregate (82)
                  :                 +- * Project (81)
                  :                    +- * BroadcastHashJoin Inner BuildRight (80)
                  :                       :- * Project (78)
                  :                       :  +- * BroadcastHashJoin Inner BuildRight (77)
                  :                       :     :- * BroadcastHashJoin LeftSemi BuildRight (75)
                  :                       :     :  :- * ColumnarToRow (73)
                  :                       :     :  :  +- CometFilter (72)
                  :                       :     :  :     +- CometScan parquet spark_catalog.default.catalog_sales (71)
                  :                       :     :  +- ReusedExchange (74)
                  :                       :     +- ReusedExchange (76)
                  :                       +- ReusedExchange (79)
                  +- CometProject (104)
                     +- CometFilter (103)
                        +- CometHashAggregate (102)
                           +- CometColumnarExchange (101)
                              +- RowToColumnar (100)
                                 +- * HashAggregate (99)
                                    +- * Project (98)
                                       +- * BroadcastHashJoin Inner BuildRight (97)
                                          :- * Project (95)
                                          :  +- * BroadcastHashJoin Inner BuildRight (94)
                                          :     :- * BroadcastHashJoin LeftSemi BuildRight (92)
                                          :     :  :- * ColumnarToRow (90)
                                          :     :  :  +- CometFilter (89)
                                          :     :  :     +- CometScan parquet spark_catalog.default.web_sales (88)
                                          :     :  +- ReusedExchange (91)
                                          :     +- ReusedExchange (93)
                                          +- ReusedExchange (96)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(3) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(unknown) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) CometFilter
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(6) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) CometFilter
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(9) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(unknown) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) CometFilter
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(12) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#19)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) CometFilter
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(15) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]

(unknown) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) CometFilter
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Condition : isnotnull(i_item_sk#20)

(18) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]

(19) BroadcastExchange
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#20]
Join type: Inner
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]

(22) ReusedExchange [Reuses operator id: 142]
Output [1]: [d_date_sk#24]

(23) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#24]
Join type: Inner
Join condition: None

(24) Project [codegen id : 3]
Output [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Input [5]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23, d_date_sk#24]

(25) BroadcastExchange
Input [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=2]

(26) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)]
Right keys [6]: [coalesce(i_brand_id#21, 0), isnull(i_brand_id#21), coalesce(i_class_id#22, 0), isnull(i_class_id#22), coalesce(i_category_id#23, 0), isnull(i_category_id#23)]
Join type: LeftSemi
Join condition: None

(27) BroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#13]
Join type: Inner
Join condition: None

(29) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(30) ReusedExchange [Reuses operator id: 142]
Output [1]: [d_date_sk#25]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#25]
Join type: Inner
Join condition: None

(32) Project [codegen id : 6]
Output [3]: [i_brand_id#14 AS brand_id#26, i_class_id#15 AS class_id#27, i_category_id#16 AS category_id#28]
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#25]

(33) HashAggregate [codegen id : 6]
Input [3]: [brand_id#26, class_id#27, category_id#28]
Keys [3]: [brand_id#26, class_id#27, category_id#28]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#26, class_id#27, category_id#28]

(34) RowToColumnar
Input [3]: [brand_id#26, class_id#27, category_id#28]

(35) CometColumnarExchange
Input [3]: [brand_id#26, class_id#27, category_id#28]
Arguments: hashpartitioning(brand_id#26, class_id#27, category_id#28, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(36) CometHashAggregate
Input [3]: [brand_id#26, class_id#27, category_id#28]
Keys [3]: [brand_id#26, class_id#27, category_id#28]
Functions: []

(37) ColumnarToRow [codegen id : 10]
Input [3]: [brand_id#26, class_id#27, category_id#28]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#29, ws_sold_date_sk#30]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#30), dynamicpruningexpression(ws_sold_date_sk#30 IN dynamicpruning#31)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(39) CometFilter
Input [2]: [ws_item_sk#29, ws_sold_date_sk#30]
Condition : isnotnull(ws_item_sk#29)

(40) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#29, ws_sold_date_sk#30]

(41) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#32, i_brand_id#33, i_class_id#34, i_category_id#35]

(42) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#29]
Right keys [1]: [i_item_sk#32]
Join type: Inner
Join condition: None

(43) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#30, i_brand_id#33, i_class_id#34, i_category_id#35]
Input [6]: [ws_item_sk#29, ws_sold_date_sk#30, i_item_sk#32, i_brand_id#33, i_class_id#34, i_category_id#35]

(44) ReusedExchange [Reuses operator id: 142]
Output [1]: [d_date_sk#36]

(45) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#30]
Right keys [1]: [d_date_sk#36]
Join type: Inner
Join condition: None

(46) Project [codegen id : 9]
Output [3]: [i_brand_id#33, i_class_id#34, i_category_id#35]
Input [5]: [ws_sold_date_sk#30, i_brand_id#33, i_class_id#34, i_category_id#35, d_date_sk#36]

(47) BroadcastExchange
Input [3]: [i_brand_id#33, i_class_id#34, i_category_id#35]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=5]

(48) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#26, 0), isnull(brand_id#26), coalesce(class_id#27, 0), isnull(class_id#27), coalesce(category_id#28, 0), isnull(category_id#28)]
Right keys [6]: [coalesce(i_brand_id#33, 0), isnull(i_brand_id#33), coalesce(i_class_id#34, 0), isnull(i_class_id#34), coalesce(i_category_id#35, 0), isnull(i_category_id#35)]
Join type: LeftSemi
Join condition: None

(49) BroadcastExchange
Input [3]: [brand_id#26, class_id#27, category_id#28]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=6]

(50) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#26, class_id#27, category_id#28]
Join type: Inner
Join condition: None

(51) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#37]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#26, class_id#27, category_id#28]

(52) BroadcastExchange
Input [1]: [ss_item_sk#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(53) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#37]
Join type: LeftSemi
Join condition: None

(unknown) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(55) CometFilter
Input [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]
Condition : isnotnull(i_item_sk#38)

(56) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(57) ReusedExchange [Reuses operator id: 52]
Output [1]: [ss_item_sk#37]

(58) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#38]
Right keys [1]: [ss_item_sk#37]
Join type: LeftSemi
Join condition: None

(59) BroadcastExchange
Input [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(60) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#38]
Join type: Inner
Join condition: None

(61) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#39, i_class_id#40, i_category_id#41]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(62) ReusedExchange [Reuses operator id: 137]
Output [1]: [d_date_sk#42]

(63) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#42]
Join type: Inner
Join condition: None

(64) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#39, i_class_id#40, i_category_id#41]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#39, i_class_id#40, i_category_id#41, d_date_sk#42]

(65) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#39, i_class_id#40, i_category_id#41]
Keys [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#43, isEmpty#44, count#45]
Results [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]

(66) RowToColumnar
Input [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]

(67) CometColumnarExchange
Input [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]
Arguments: hashpartitioning(i_brand_id#39, i_class_id#40, i_category_id#41, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(68) CometHashAggregate
Input [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]
Keys [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]

(69) CometFilter
Input [5]: [i_brand_id#39, i_class_id#40, i_category_id#41, sales#49, number_sales#50]
Condition : (isnotnull(sales#49) AND (cast(sales#49 as decimal(32,6)) > cast(Subquery scalar-subquery#51, [id=#52] as decimal(32,6))))

(70) CometProject
Input [5]: [i_brand_id#39, i_class_id#40, i_category_id#41, sales#49, number_sales#50]
Arguments: [sales#49, number_sales#50, channel#53, i_brand_id#54, i_class_id#55, i_category_id#56], [sales#49, number_sales#50, store AS channel#53, i_brand_id#39 AS i_brand_id#54, i_class_id#40 AS i_class_id#55, i_category_id#41 AS i_category_id#56]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#60), dynamicpruningexpression(cs_sold_date_sk#60 IN dynamicpruning#61)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(72) CometFilter
Input [4]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60]
Condition : isnotnull(cs_item_sk#57)

(73) ColumnarToRow [codegen id : 50]
Input [4]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60]

(74) ReusedExchange [Reuses operator id: 52]
Output [1]: [ss_item_sk#37]

(75) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [cs_item_sk#57]
Right keys [1]: [ss_item_sk#37]
Join type: LeftSemi
Join condition: None

(76) ReusedExchange [Reuses operator id: 59]
Output [4]: [i_item_sk#62, i_brand_id#63, i_class_id#64, i_category_id#65]

(77) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [cs_item_sk#57]
Right keys [1]: [i_item_sk#62]
Join type: Inner
Join condition: None

(78) Project [codegen id : 50]
Output [6]: [cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60, i_brand_id#63, i_class_id#64, i_category_id#65]
Input [8]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60, i_item_sk#62, i_brand_id#63, i_class_id#64, i_category_id#65]

(79) ReusedExchange [Reuses operator id: 137]
Output [1]: [d_date_sk#66]

(80) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [cs_sold_date_sk#60]
Right keys [1]: [d_date_sk#66]
Join type: Inner
Join condition: None

(81) Project [codegen id : 50]
Output [5]: [cs_quantity#58, cs_list_price#59, i_brand_id#63, i_class_id#64, i_category_id#65]
Input [7]: [cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60, i_brand_id#63, i_class_id#64, i_category_id#65, d_date_sk#66]

(82) HashAggregate [codegen id : 50]
Input [5]: [cs_quantity#58, cs_list_price#59, i_brand_id#63, i_class_id#64, i_category_id#65]
Keys [3]: [i_brand_id#63, i_class_id#64, i_category_id#65]
Functions [2]: [partial_sum((cast(cs_quantity#58 as decimal(10,0)) * cs_list_price#59)), partial_count(1)]
Aggregate Attributes [3]: [sum#67, isEmpty#68, count#69]
Results [6]: [i_brand_id#63, i_class_id#64, i_category_id#65, sum#70, isEmpty#71, count#72]

(83) RowToColumnar
Input [6]: [i_brand_id#63, i_class_id#64, i_category_id#65, sum#70, isEmpty#71, count#72]

(84) CometColumnarExchange
Input [6]: [i_brand_id#63, i_class_id#64, i_category_id#65, sum#70, isEmpty#71, count#72]
Arguments: hashpartitioning(i_brand_id#63, i_class_id#64, i_category_id#65, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(85) CometHashAggregate
Input [6]: [i_brand_id#63, i_class_id#64, i_category_id#65, sum#70, isEmpty#71, count#72]
Keys [3]: [i_brand_id#63, i_class_id#64, i_category_id#65]
Functions [2]: [sum((cast(cs_quantity#58 as decimal(10,0)) * cs_list_price#59)), count(1)]

(86) CometFilter
Input [5]: [i_brand_id#63, i_class_id#64, i_category_id#65, sales#73, number_sales#74]
Condition : (isnotnull(sales#73) AND (cast(sales#73 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#51, [id=#52] as decimal(32,6))))

(87) CometProject
Input [5]: [i_brand_id#63, i_class_id#64, i_category_id#65, sales#73, number_sales#74]
Arguments: [sales#73, number_sales#74, channel#75, i_brand_id#63, i_class_id#64, i_category_id#65], [sales#73, number_sales#74, catalog AS channel#75, i_brand_id#63, i_class_id#64, i_category_id#65]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#76, ws_quantity#77, ws_list_price#78, ws_sold_date_sk#79]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#79), dynamicpruningexpression(ws_sold_date_sk#79 IN dynamicpruning#80)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(89) CometFilter
Input [4]: [ws_item_sk#76, ws_quantity#77, ws_list_price#78, ws_sold_date_sk#79]
Condition : isnotnull(ws_item_sk#76)

(90) ColumnarToRow [codegen id : 75]
Input [4]: [ws_item_sk#76, ws_quantity#77, ws_list_price#78, ws_sold_date_sk#79]

(91) ReusedExchange [Reuses operator id: 52]
Output [1]: [ss_item_sk#37]

(92) BroadcastHashJoin [codegen id : 75]
Left keys [1]: [ws_item_sk#76]
Right keys [1]: [ss_item_sk#37]
Join type: LeftSemi
Join condition: None

(93) ReusedExchange [Reuses operator id: 59]
Output [4]: [i_item_sk#81, i_brand_id#82, i_class_id#83, i_category_id#84]

(94) BroadcastHashJoin [codegen id : 75]
Left keys [1]: [ws_item_sk#76]
Right keys [1]: [i_item_sk#81]
Join type: Inner
Join condition: None

(95) Project [codegen id : 75]
Output [6]: [ws_quantity#77, ws_list_price#78, ws_sold_date_sk#79, i_brand_id#82, i_class_id#83, i_category_id#84]
Input [8]: [ws_item_sk#76, ws_quantity#77, ws_list_price#78, ws_sold_date_sk#79, i_item_sk#81, i_brand_id#82, i_class_id#83, i_category_id#84]

(96) ReusedExchange [Reuses operator id: 137]
Output [1]: [d_date_sk#85]

(97) BroadcastHashJoin [codegen id : 75]
Left keys [1]: [ws_sold_date_sk#79]
Right keys [1]: [d_date_sk#85]
Join type: Inner
Join condition: None

(98) Project [codegen id : 75]
Output [5]: [ws_quantity#77, ws_list_price#78, i_brand_id#82, i_class_id#83, i_category_id#84]
Input [7]: [ws_quantity#77, ws_list_price#78, ws_sold_date_sk#79, i_brand_id#82, i_class_id#83, i_category_id#84, d_date_sk#85]

(99) HashAggregate [codegen id : 75]
Input [5]: [ws_quantity#77, ws_list_price#78, i_brand_id#82, i_class_id#83, i_category_id#84]
Keys [3]: [i_brand_id#82, i_class_id#83, i_category_id#84]
Functions [2]: [partial_sum((cast(ws_quantity#77 as decimal(10,0)) * ws_list_price#78)), partial_count(1)]
Aggregate Attributes [3]: [sum#86, isEmpty#87, count#88]
Results [6]: [i_brand_id#82, i_class_id#83, i_category_id#84, sum#89, isEmpty#90, count#91]

(100) RowToColumnar
Input [6]: [i_brand_id#82, i_class_id#83, i_category_id#84, sum#89, isEmpty#90, count#91]

(101) CometColumnarExchange
Input [6]: [i_brand_id#82, i_class_id#83, i_category_id#84, sum#89, isEmpty#90, count#91]
Arguments: hashpartitioning(i_brand_id#82, i_class_id#83, i_category_id#84, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=11]

(102) CometHashAggregate
Input [6]: [i_brand_id#82, i_class_id#83, i_category_id#84, sum#89, isEmpty#90, count#91]
Keys [3]: [i_brand_id#82, i_class_id#83, i_category_id#84]
Functions [2]: [sum((cast(ws_quantity#77 as decimal(10,0)) * ws_list_price#78)), count(1)]

(103) CometFilter
Input [5]: [i_brand_id#82, i_class_id#83, i_category_id#84, sales#92, number_sales#93]
Condition : (isnotnull(sales#92) AND (cast(sales#92 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#51, [id=#52] as decimal(32,6))))

(104) CometProject
Input [5]: [i_brand_id#82, i_class_id#83, i_category_id#84, sales#92, number_sales#93]
Arguments: [sales#92, number_sales#93, channel#94, i_brand_id#82, i_class_id#83, i_category_id#84], [sales#92, number_sales#93, web AS channel#94, i_brand_id#82, i_class_id#83, i_category_id#84]

(105) CometUnion
Child 0 Input [6]: [sales#49, number_sales#50, channel#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Child 1 Input [6]: [sales#73, number_sales#74, channel#75, i_brand_id#63, i_class_id#64, i_category_id#65]
Child 2 Input [6]: [sales#92, number_sales#93, channel#94, i_brand_id#82, i_class_id#83, i_category_id#84]

(106) CometExpand
Input [6]: [sales#49, number_sales#50, channel#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Arguments: [[sales#49, number_sales#50, channel#53, i_brand_id#54, i_class_id#55, i_category_id#56, 0], [sales#49, number_sales#50, channel#53, i_brand_id#54, i_class_id#55, null, 1], [sales#49, number_sales#50, channel#53, i_brand_id#54, null, null, 3], [sales#49, number_sales#50, channel#53, null, null, null, 7], [sales#49, number_sales#50, null, null, null, null, 15]], [sales#49, number_sales#50, channel#95, i_brand_id#96, i_class_id#97, i_category_id#98, spark_grouping_id#99]

(107) CometHashAggregate
Input [7]: [sales#49, number_sales#50, channel#95, i_brand_id#96, i_class_id#97, i_category_id#98, spark_grouping_id#99]
Keys [5]: [channel#95, i_brand_id#96, i_class_id#97, i_category_id#98, spark_grouping_id#99]
Functions [2]: [partial_sum(sales#49), partial_sum(number_sales#50)]

(108) CometColumnarExchange
Input [8]: [channel#95, i_brand_id#96, i_class_id#97, i_category_id#98, spark_grouping_id#99, sum#100, isEmpty#101, sum#102]
Arguments: hashpartitioning(channel#95, i_brand_id#96, i_class_id#97, i_category_id#98, spark_grouping_id#99, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=12]

(109) CometHashAggregate
Input [8]: [channel#95, i_brand_id#96, i_class_id#97, i_category_id#98, spark_grouping_id#99, sum#100, isEmpty#101, sum#102]
Keys [5]: [channel#95, i_brand_id#96, i_class_id#97, i_category_id#98, spark_grouping_id#99]
Functions [2]: [sum(sales#49), sum(number_sales#50)]

(110) CometTakeOrderedAndProject
Input [6]: [channel#95, i_brand_id#96, i_class_id#97, i_category_id#98, sum(sales)#103, sum(number_sales)#104]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[channel#95 ASC NULLS FIRST,i_brand_id#96 ASC NULLS FIRST,i_class_id#97 ASC NULLS FIRST,i_category_id#98 ASC NULLS FIRST], output=[channel#95,i_brand_id#96,i_class_id#97,i_category_id#98,sum(sales)#103,sum(number_sales)#104]), 100, [channel#95 ASC NULLS FIRST, i_brand_id#96 ASC NULLS FIRST, i_class_id#97 ASC NULLS FIRST, i_category_id#98 ASC NULLS FIRST], [channel#95, i_brand_id#96, i_class_id#97, i_category_id#98, sum(sales)#103, sum(number_sales)#104]

(111) ColumnarToRow [codegen id : 76]
Input [6]: [channel#95, i_brand_id#96, i_class_id#97, i_category_id#98, sum(sales)#103, sum(number_sales)#104]

===== Subqueries =====

Subquery:1 Hosting operator id = 69 Hosting Expression = Subquery scalar-subquery#51, [id=#52]
* ColumnarToRow (132)
+- CometHashAggregate (131)
   +- CometColumnarExchange (130)
      +- RowToColumnar (129)
         +- * HashAggregate (128)
            +- Union (127)
               :- * Project (116)
               :  +- * BroadcastHashJoin Inner BuildRight (115)
               :     :- * ColumnarToRow (113)
               :     :  +- CometScan parquet spark_catalog.default.store_sales (112)
               :     +- ReusedExchange (114)
               :- * Project (121)
               :  +- * BroadcastHashJoin Inner BuildRight (120)
               :     :- * ColumnarToRow (118)
               :     :  +- CometScan parquet spark_catalog.default.catalog_sales (117)
               :     +- ReusedExchange (119)
               +- * Project (126)
                  +- * BroadcastHashJoin Inner BuildRight (125)
                     :- * ColumnarToRow (123)
                     :  +- CometScan parquet spark_catalog.default.web_sales (122)
                     +- ReusedExchange (124)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#105, ss_list_price#106, ss_sold_date_sk#107]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#107), dynamicpruningexpression(ss_sold_date_sk#107 IN dynamicpruning#108)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(113) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#105, ss_list_price#106, ss_sold_date_sk#107]

(114) ReusedExchange [Reuses operator id: 142]
Output [1]: [d_date_sk#109]

(115) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#107]
Right keys [1]: [d_date_sk#109]
Join type: Inner
Join condition: None

(116) Project [codegen id : 2]
Output [2]: [ss_quantity#105 AS quantity#110, ss_list_price#106 AS list_price#111]
Input [4]: [ss_quantity#105, ss_list_price#106, ss_sold_date_sk#107, d_date_sk#109]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#112, cs_list_price#113, cs_sold_date_sk#114]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#114), dynamicpruningexpression(cs_sold_date_sk#114 IN dynamicpruning#115)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(118) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#112, cs_list_price#113, cs_sold_date_sk#114]

(119) ReusedExchange [Reuses operator id: 142]
Output [1]: [d_date_sk#116]

(120) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#114]
Right keys [1]: [d_date_sk#116]
Join type: Inner
Join condition: None

(121) Project [codegen id : 4]
Output [2]: [cs_quantity#112 AS quantity#117, cs_list_price#113 AS list_price#118]
Input [4]: [cs_quantity#112, cs_list_price#113, cs_sold_date_sk#114, d_date_sk#116]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#119, ws_list_price#120, ws_sold_date_sk#121]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#121), dynamicpruningexpression(ws_sold_date_sk#121 IN dynamicpruning#122)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(123) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#119, ws_list_price#120, ws_sold_date_sk#121]

(124) ReusedExchange [Reuses operator id: 142]
Output [1]: [d_date_sk#123]

(125) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#121]
Right keys [1]: [d_date_sk#123]
Join type: Inner
Join condition: None

(126) Project [codegen id : 6]
Output [2]: [ws_quantity#119 AS quantity#124, ws_list_price#120 AS list_price#125]
Input [4]: [ws_quantity#119, ws_list_price#120, ws_sold_date_sk#121, d_date_sk#123]

(127) Union

(128) HashAggregate [codegen id : 7]
Input [2]: [quantity#110, list_price#111]
Keys: []
Functions [1]: [partial_avg((cast(quantity#110 as decimal(10,0)) * list_price#111))]
Aggregate Attributes [2]: [sum#126, count#127]
Results [2]: [sum#128, count#129]

(129) RowToColumnar
Input [2]: [sum#128, count#129]

(130) CometColumnarExchange
Input [2]: [sum#128, count#129]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=13]

(131) CometHashAggregate
Input [2]: [sum#128, count#129]
Keys: []
Functions [1]: [avg((cast(quantity#110 as decimal(10,0)) * list_price#111))]

(132) ColumnarToRow [codegen id : 8]
Input [1]: [average_sales#130]

Subquery:2 Hosting operator id = 112 Hosting Expression = ss_sold_date_sk#107 IN dynamicpruning#12

Subquery:3 Hosting operator id = 117 Hosting Expression = cs_sold_date_sk#114 IN dynamicpruning#12

Subquery:4 Hosting operator id = 122 Hosting Expression = ws_sold_date_sk#121 IN dynamicpruning#12

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (137)
+- * ColumnarToRow (136)
   +- CometProject (135)
      +- CometFilter (134)
         +- CometScan parquet spark_catalog.default.date_dim (133)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#42, d_year#131, d_moy#132]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(134) CometFilter
Input [3]: [d_date_sk#42, d_year#131, d_moy#132]
Condition : ((((isnotnull(d_year#131) AND isnotnull(d_moy#132)) AND (d_year#131 = 2001)) AND (d_moy#132 = 11)) AND isnotnull(d_date_sk#42))

(135) CometProject
Input [3]: [d_date_sk#42, d_year#131, d_moy#132]
Arguments: [d_date_sk#42], [d_date_sk#42]

(136) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#42]

(137) BroadcastExchange
Input [1]: [d_date_sk#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (142)
+- * ColumnarToRow (141)
   +- CometProject (140)
      +- CometFilter (139)
         +- CometScan parquet spark_catalog.default.date_dim (138)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#25, d_year#133]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(139) CometFilter
Input [2]: [d_date_sk#25, d_year#133]
Condition : (((isnotnull(d_year#133) AND (d_year#133 >= 1999)) AND (d_year#133 <= 2001)) AND isnotnull(d_date_sk#25))

(140) CometProject
Input [2]: [d_date_sk#25, d_year#133]
Arguments: [d_date_sk#25], [d_date_sk#25]

(141) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#25]

(142) BroadcastExchange
Input [1]: [d_date_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15]

Subquery:7 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:8 Hosting operator id = 38 Hosting Expression = ws_sold_date_sk#30 IN dynamicpruning#12

Subquery:9 Hosting operator id = 86 Hosting Expression = ReusedSubquery Subquery scalar-subquery#51, [id=#52]

Subquery:10 Hosting operator id = 71 Hosting Expression = cs_sold_date_sk#60 IN dynamicpruning#5

Subquery:11 Hosting operator id = 103 Hosting Expression = ReusedSubquery Subquery scalar-subquery#51, [id=#52]

Subquery:12 Hosting operator id = 88 Hosting Expression = ws_sold_date_sk#79 IN dynamicpruning#5


