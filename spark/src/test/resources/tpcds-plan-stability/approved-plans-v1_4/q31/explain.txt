== Physical Plan ==
* ColumnarToRow (104)
+- CometSort (103)
   +- CometColumnarExchange (102)
      +- RowToColumnar (101)
         +- * Project (100)
            +- * BroadcastHashJoin Inner BuildRight (99)
               :- * Project (83)
               :  +- * BroadcastHashJoin Inner BuildRight (82)
               :     :- * BroadcastHashJoin Inner BuildRight (66)
               :     :  :- * Project (50)
               :     :  :  +- * BroadcastHashJoin Inner BuildRight (49)
               :     :  :     :- * BroadcastHashJoin Inner BuildRight (33)
               :     :  :     :  :- * HashAggregate (17)
               :     :  :     :  :  +- * ColumnarToRow (16)
               :     :  :     :  :     +- CometColumnarExchange (15)
               :     :  :     :  :        +- RowToColumnar (14)
               :     :  :     :  :           +- * HashAggregate (13)
               :     :  :     :  :              +- * Project (12)
               :     :  :     :  :                 +- * BroadcastHashJoin Inner BuildRight (11)
               :     :  :     :  :                    :- * Project (6)
               :     :  :     :  :                    :  +- * BroadcastHashJoin Inner BuildRight (5)
               :     :  :     :  :                    :     :- * ColumnarToRow (3)
               :     :  :     :  :                    :     :  +- CometFilter (2)
               :     :  :     :  :                    :     :     +- CometScan parquet spark_catalog.default.store_sales (1)
               :     :  :     :  :                    :     +- ReusedExchange (4)
               :     :  :     :  :                    +- BroadcastExchange (10)
               :     :  :     :  :                       +- * ColumnarToRow (9)
               :     :  :     :  :                          +- CometFilter (8)
               :     :  :     :  :                             +- CometScan parquet spark_catalog.default.customer_address (7)
               :     :  :     :  +- BroadcastExchange (32)
               :     :  :     :     +- * HashAggregate (31)
               :     :  :     :        +- * ColumnarToRow (30)
               :     :  :     :           +- CometColumnarExchange (29)
               :     :  :     :              +- RowToColumnar (28)
               :     :  :     :                 +- * HashAggregate (27)
               :     :  :     :                    +- * Project (26)
               :     :  :     :                       +- * BroadcastHashJoin Inner BuildRight (25)
               :     :  :     :                          :- * Project (23)
               :     :  :     :                          :  +- * BroadcastHashJoin Inner BuildRight (22)
               :     :  :     :                          :     :- * ColumnarToRow (20)
               :     :  :     :                          :     :  +- CometFilter (19)
               :     :  :     :                          :     :     +- CometScan parquet spark_catalog.default.store_sales (18)
               :     :  :     :                          :     +- ReusedExchange (21)
               :     :  :     :                          +- ReusedExchange (24)
               :     :  :     +- BroadcastExchange (48)
               :     :  :        +- * HashAggregate (47)
               :     :  :           +- * ColumnarToRow (46)
               :     :  :              +- CometColumnarExchange (45)
               :     :  :                 +- RowToColumnar (44)
               :     :  :                    +- * HashAggregate (43)
               :     :  :                       +- * Project (42)
               :     :  :                          +- * BroadcastHashJoin Inner BuildRight (41)
               :     :  :                             :- * Project (39)
               :     :  :                             :  +- * BroadcastHashJoin Inner BuildRight (38)
               :     :  :                             :     :- * ColumnarToRow (36)
               :     :  :                             :     :  +- CometFilter (35)
               :     :  :                             :     :     +- CometScan parquet spark_catalog.default.store_sales (34)
               :     :  :                             :     +- ReusedExchange (37)
               :     :  :                             +- ReusedExchange (40)
               :     :  +- BroadcastExchange (65)
               :     :     +- * HashAggregate (64)
               :     :        +- * ColumnarToRow (63)
               :     :           +- CometColumnarExchange (62)
               :     :              +- RowToColumnar (61)
               :     :                 +- * HashAggregate (60)
               :     :                    +- * Project (59)
               :     :                       +- * BroadcastHashJoin Inner BuildRight (58)
               :     :                          :- * Project (56)
               :     :                          :  +- * BroadcastHashJoin Inner BuildRight (55)
               :     :                          :     :- * ColumnarToRow (53)
               :     :                          :     :  +- CometFilter (52)
               :     :                          :     :     +- CometScan parquet spark_catalog.default.web_sales (51)
               :     :                          :     +- ReusedExchange (54)
               :     :                          +- ReusedExchange (57)
               :     +- BroadcastExchange (81)
               :        +- * HashAggregate (80)
               :           +- * ColumnarToRow (79)
               :              +- CometColumnarExchange (78)
               :                 +- RowToColumnar (77)
               :                    +- * HashAggregate (76)
               :                       +- * Project (75)
               :                          +- * BroadcastHashJoin Inner BuildRight (74)
               :                             :- * Project (72)
               :                             :  +- * BroadcastHashJoin Inner BuildRight (71)
               :                             :     :- * ColumnarToRow (69)
               :                             :     :  +- CometFilter (68)
               :                             :     :     +- CometScan parquet spark_catalog.default.web_sales (67)
               :                             :     +- ReusedExchange (70)
               :                             +- ReusedExchange (73)
               +- BroadcastExchange (98)
                  +- * HashAggregate (97)
                     +- * ColumnarToRow (96)
                        +- CometColumnarExchange (95)
                           +- RowToColumnar (94)
                              +- * HashAggregate (93)
                                 +- * Project (92)
                                    +- * BroadcastHashJoin Inner BuildRight (91)
                                       :- * Project (89)
                                       :  +- * BroadcastHashJoin Inner BuildRight (88)
                                       :     :- * ColumnarToRow (86)
                                       :     :  +- CometFilter (85)
                                       :     :     +- CometScan parquet spark_catalog.default.web_sales (84)
                                       :     +- ReusedExchange (87)
                                       +- ReusedExchange (90)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_addr_sk#1)

(3) ColumnarToRow [codegen id : 3]
Input [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]

(4) ReusedExchange [Reuses operator id: 108]
Output [3]: [d_date_sk#5, d_year#6, d_qoy#7]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join type: Inner
Join condition: None

(6) Project [codegen id : 3]
Output [4]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7]
Input [6]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, d_date_sk#5, d_year#6, d_qoy#7]

(unknown) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#8, ca_county#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(8) CometFilter
Input [2]: [ca_address_sk#8, ca_county#9]
Condition : (isnotnull(ca_address_sk#8) AND isnotnull(ca_county#9))

(9) ColumnarToRow [codegen id : 2]
Input [2]: [ca_address_sk#8, ca_county#9]

(10) BroadcastExchange
Input [2]: [ca_address_sk#8, ca_county#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_addr_sk#1]
Right keys [1]: [ca_address_sk#8]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [4]: [ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_county#9]
Input [6]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_address_sk#8, ca_county#9]

(13) HashAggregate [codegen id : 3]
Input [4]: [ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_county#9]
Keys [3]: [ca_county#9, d_qoy#7, d_year#6]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#10]
Results [4]: [ca_county#9, d_qoy#7, d_year#6, sum#11]

(14) RowToColumnar
Input [4]: [ca_county#9, d_qoy#7, d_year#6, sum#11]

(15) CometColumnarExchange
Input [4]: [ca_county#9, d_qoy#7, d_year#6, sum#11]
Arguments: hashpartitioning(ca_county#9, d_qoy#7, d_year#6, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(16) ColumnarToRow [codegen id : 24]
Input [4]: [ca_county#9, d_qoy#7, d_year#6, sum#11]

(17) HashAggregate [codegen id : 24]
Input [4]: [ca_county#9, d_qoy#7, d_year#6, sum#11]
Keys [3]: [ca_county#9, d_qoy#7, d_year#6]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#12]
Results [3]: [ca_county#9, d_year#6, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#12,17,2) AS store_sales#13]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_addr_sk#14, ss_ext_sales_price#15, ss_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#16), dynamicpruningexpression(ss_sold_date_sk#16 IN dynamicpruning#17)]
PushedFilters: [IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(19) CometFilter
Input [3]: [ss_addr_sk#14, ss_ext_sales_price#15, ss_sold_date_sk#16]
Condition : isnotnull(ss_addr_sk#14)

(20) ColumnarToRow [codegen id : 6]
Input [3]: [ss_addr_sk#14, ss_ext_sales_price#15, ss_sold_date_sk#16]

(21) ReusedExchange [Reuses operator id: 112]
Output [3]: [d_date_sk#18, d_year#19, d_qoy#20]

(22) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#16]
Right keys [1]: [d_date_sk#18]
Join type: Inner
Join condition: None

(23) Project [codegen id : 6]
Output [4]: [ss_addr_sk#14, ss_ext_sales_price#15, d_year#19, d_qoy#20]
Input [6]: [ss_addr_sk#14, ss_ext_sales_price#15, ss_sold_date_sk#16, d_date_sk#18, d_year#19, d_qoy#20]

(24) ReusedExchange [Reuses operator id: 10]
Output [2]: [ca_address_sk#21, ca_county#22]

(25) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_addr_sk#14]
Right keys [1]: [ca_address_sk#21]
Join type: Inner
Join condition: None

(26) Project [codegen id : 6]
Output [4]: [ss_ext_sales_price#15, d_year#19, d_qoy#20, ca_county#22]
Input [6]: [ss_addr_sk#14, ss_ext_sales_price#15, d_year#19, d_qoy#20, ca_address_sk#21, ca_county#22]

(27) HashAggregate [codegen id : 6]
Input [4]: [ss_ext_sales_price#15, d_year#19, d_qoy#20, ca_county#22]
Keys [3]: [ca_county#22, d_qoy#20, d_year#19]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#15))]
Aggregate Attributes [1]: [sum#23]
Results [4]: [ca_county#22, d_qoy#20, d_year#19, sum#24]

(28) RowToColumnar
Input [4]: [ca_county#22, d_qoy#20, d_year#19, sum#24]

(29) CometColumnarExchange
Input [4]: [ca_county#22, d_qoy#20, d_year#19, sum#24]
Arguments: hashpartitioning(ca_county#22, d_qoy#20, d_year#19, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(30) ColumnarToRow [codegen id : 7]
Input [4]: [ca_county#22, d_qoy#20, d_year#19, sum#24]

(31) HashAggregate [codegen id : 7]
Input [4]: [ca_county#22, d_qoy#20, d_year#19, sum#24]
Keys [3]: [ca_county#22, d_qoy#20, d_year#19]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#15))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#15))#12]
Results [2]: [ca_county#22, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#15))#12,17,2) AS store_sales#25]

(32) BroadcastExchange
Input [2]: [ca_county#22, store_sales#25]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=4]

(33) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [ca_county#9]
Right keys [1]: [ca_county#22]
Join type: Inner
Join condition: None

(unknown) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_addr_sk#26, ss_ext_sales_price#27, ss_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#28), dynamicpruningexpression(ss_sold_date_sk#28 IN dynamicpruning#29)]
PushedFilters: [IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(35) CometFilter
Input [3]: [ss_addr_sk#26, ss_ext_sales_price#27, ss_sold_date_sk#28]
Condition : isnotnull(ss_addr_sk#26)

(36) ColumnarToRow [codegen id : 10]
Input [3]: [ss_addr_sk#26, ss_ext_sales_price#27, ss_sold_date_sk#28]

(37) ReusedExchange [Reuses operator id: 116]
Output [3]: [d_date_sk#30, d_year#31, d_qoy#32]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#28]
Right keys [1]: [d_date_sk#30]
Join type: Inner
Join condition: None

(39) Project [codegen id : 10]
Output [4]: [ss_addr_sk#26, ss_ext_sales_price#27, d_year#31, d_qoy#32]
Input [6]: [ss_addr_sk#26, ss_ext_sales_price#27, ss_sold_date_sk#28, d_date_sk#30, d_year#31, d_qoy#32]

(40) ReusedExchange [Reuses operator id: 10]
Output [2]: [ca_address_sk#33, ca_county#34]

(41) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_addr_sk#26]
Right keys [1]: [ca_address_sk#33]
Join type: Inner
Join condition: None

(42) Project [codegen id : 10]
Output [4]: [ss_ext_sales_price#27, d_year#31, d_qoy#32, ca_county#34]
Input [6]: [ss_addr_sk#26, ss_ext_sales_price#27, d_year#31, d_qoy#32, ca_address_sk#33, ca_county#34]

(43) HashAggregate [codegen id : 10]
Input [4]: [ss_ext_sales_price#27, d_year#31, d_qoy#32, ca_county#34]
Keys [3]: [ca_county#34, d_qoy#32, d_year#31]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#27))]
Aggregate Attributes [1]: [sum#35]
Results [4]: [ca_county#34, d_qoy#32, d_year#31, sum#36]

(44) RowToColumnar
Input [4]: [ca_county#34, d_qoy#32, d_year#31, sum#36]

(45) CometColumnarExchange
Input [4]: [ca_county#34, d_qoy#32, d_year#31, sum#36]
Arguments: hashpartitioning(ca_county#34, d_qoy#32, d_year#31, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(46) ColumnarToRow [codegen id : 11]
Input [4]: [ca_county#34, d_qoy#32, d_year#31, sum#36]

(47) HashAggregate [codegen id : 11]
Input [4]: [ca_county#34, d_qoy#32, d_year#31, sum#36]
Keys [3]: [ca_county#34, d_qoy#32, d_year#31]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#27))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#27))#12]
Results [2]: [ca_county#34, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#27))#12,17,2) AS store_sales#37]

(48) BroadcastExchange
Input [2]: [ca_county#34, store_sales#37]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=6]

(49) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [ca_county#22]
Right keys [1]: [ca_county#34]
Join type: Inner
Join condition: None

(50) Project [codegen id : 24]
Output [5]: [ca_county#9, d_year#6, store_sales#13, store_sales#25, store_sales#37]
Input [7]: [ca_county#9, d_year#6, store_sales#13, ca_county#22, store_sales#25, ca_county#34, store_sales#37]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_addr_sk#38, ws_ext_sales_price#39, ws_sold_date_sk#40]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#40), dynamicpruningexpression(ws_sold_date_sk#40 IN dynamicpruning#41)]
PushedFilters: [IsNotNull(ws_bill_addr_sk)]
ReadSchema: struct<ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(52) CometFilter
Input [3]: [ws_bill_addr_sk#38, ws_ext_sales_price#39, ws_sold_date_sk#40]
Condition : isnotnull(ws_bill_addr_sk#38)

(53) ColumnarToRow [codegen id : 14]
Input [3]: [ws_bill_addr_sk#38, ws_ext_sales_price#39, ws_sold_date_sk#40]

(54) ReusedExchange [Reuses operator id: 108]
Output [3]: [d_date_sk#42, d_year#43, d_qoy#44]

(55) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#40]
Right keys [1]: [d_date_sk#42]
Join type: Inner
Join condition: None

(56) Project [codegen id : 14]
Output [4]: [ws_bill_addr_sk#38, ws_ext_sales_price#39, d_year#43, d_qoy#44]
Input [6]: [ws_bill_addr_sk#38, ws_ext_sales_price#39, ws_sold_date_sk#40, d_date_sk#42, d_year#43, d_qoy#44]

(57) ReusedExchange [Reuses operator id: 10]
Output [2]: [ca_address_sk#45, ca_county#46]

(58) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_bill_addr_sk#38]
Right keys [1]: [ca_address_sk#45]
Join type: Inner
Join condition: None

(59) Project [codegen id : 14]
Output [4]: [ws_ext_sales_price#39, d_year#43, d_qoy#44, ca_county#46]
Input [6]: [ws_bill_addr_sk#38, ws_ext_sales_price#39, d_year#43, d_qoy#44, ca_address_sk#45, ca_county#46]

(60) HashAggregate [codegen id : 14]
Input [4]: [ws_ext_sales_price#39, d_year#43, d_qoy#44, ca_county#46]
Keys [3]: [ca_county#46, d_qoy#44, d_year#43]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#39))]
Aggregate Attributes [1]: [sum#47]
Results [4]: [ca_county#46, d_qoy#44, d_year#43, sum#48]

(61) RowToColumnar
Input [4]: [ca_county#46, d_qoy#44, d_year#43, sum#48]

(62) CometColumnarExchange
Input [4]: [ca_county#46, d_qoy#44, d_year#43, sum#48]
Arguments: hashpartitioning(ca_county#46, d_qoy#44, d_year#43, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(63) ColumnarToRow [codegen id : 15]
Input [4]: [ca_county#46, d_qoy#44, d_year#43, sum#48]

(64) HashAggregate [codegen id : 15]
Input [4]: [ca_county#46, d_qoy#44, d_year#43, sum#48]
Keys [3]: [ca_county#46, d_qoy#44, d_year#43]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#39))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#39))#49]
Results [2]: [ca_county#46, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#39))#49,17,2) AS web_sales#50]

(65) BroadcastExchange
Input [2]: [ca_county#46, web_sales#50]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=8]

(66) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [ca_county#9]
Right keys [1]: [ca_county#46]
Join type: Inner
Join condition: None

(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_addr_sk#51, ws_ext_sales_price#52, ws_sold_date_sk#53]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#53), dynamicpruningexpression(ws_sold_date_sk#53 IN dynamicpruning#54)]
PushedFilters: [IsNotNull(ws_bill_addr_sk)]
ReadSchema: struct<ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(68) CometFilter
Input [3]: [ws_bill_addr_sk#51, ws_ext_sales_price#52, ws_sold_date_sk#53]
Condition : isnotnull(ws_bill_addr_sk#51)

(69) ColumnarToRow [codegen id : 18]
Input [3]: [ws_bill_addr_sk#51, ws_ext_sales_price#52, ws_sold_date_sk#53]

(70) ReusedExchange [Reuses operator id: 112]
Output [3]: [d_date_sk#55, d_year#56, d_qoy#57]

(71) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [ws_sold_date_sk#53]
Right keys [1]: [d_date_sk#55]
Join type: Inner
Join condition: None

(72) Project [codegen id : 18]
Output [4]: [ws_bill_addr_sk#51, ws_ext_sales_price#52, d_year#56, d_qoy#57]
Input [6]: [ws_bill_addr_sk#51, ws_ext_sales_price#52, ws_sold_date_sk#53, d_date_sk#55, d_year#56, d_qoy#57]

(73) ReusedExchange [Reuses operator id: 10]
Output [2]: [ca_address_sk#58, ca_county#59]

(74) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [ws_bill_addr_sk#51]
Right keys [1]: [ca_address_sk#58]
Join type: Inner
Join condition: None

(75) Project [codegen id : 18]
Output [4]: [ws_ext_sales_price#52, d_year#56, d_qoy#57, ca_county#59]
Input [6]: [ws_bill_addr_sk#51, ws_ext_sales_price#52, d_year#56, d_qoy#57, ca_address_sk#58, ca_county#59]

(76) HashAggregate [codegen id : 18]
Input [4]: [ws_ext_sales_price#52, d_year#56, d_qoy#57, ca_county#59]
Keys [3]: [ca_county#59, d_qoy#57, d_year#56]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#52))]
Aggregate Attributes [1]: [sum#60]
Results [4]: [ca_county#59, d_qoy#57, d_year#56, sum#61]

(77) RowToColumnar
Input [4]: [ca_county#59, d_qoy#57, d_year#56, sum#61]

(78) CometColumnarExchange
Input [4]: [ca_county#59, d_qoy#57, d_year#56, sum#61]
Arguments: hashpartitioning(ca_county#59, d_qoy#57, d_year#56, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(79) ColumnarToRow [codegen id : 19]
Input [4]: [ca_county#59, d_qoy#57, d_year#56, sum#61]

(80) HashAggregate [codegen id : 19]
Input [4]: [ca_county#59, d_qoy#57, d_year#56, sum#61]
Keys [3]: [ca_county#59, d_qoy#57, d_year#56]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#52))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#52))#49]
Results [2]: [ca_county#59, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#52))#49,17,2) AS web_sales#62]

(81) BroadcastExchange
Input [2]: [ca_county#59, web_sales#62]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=10]

(82) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [ca_county#46]
Right keys [1]: [ca_county#59]
Join type: Inner
Join condition: (CASE WHEN (web_sales#50 > 0.00) THEN (web_sales#62 / web_sales#50) END > CASE WHEN (store_sales#13 > 0.00) THEN (store_sales#25 / store_sales#13) END)

(83) Project [codegen id : 24]
Output [8]: [ca_county#9, d_year#6, store_sales#13, store_sales#25, store_sales#37, ca_county#46, web_sales#50, web_sales#62]
Input [9]: [ca_county#9, d_year#6, store_sales#13, store_sales#25, store_sales#37, ca_county#46, web_sales#50, ca_county#59, web_sales#62]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_addr_sk#63, ws_ext_sales_price#64, ws_sold_date_sk#65]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#65), dynamicpruningexpression(ws_sold_date_sk#65 IN dynamicpruning#66)]
PushedFilters: [IsNotNull(ws_bill_addr_sk)]
ReadSchema: struct<ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(85) CometFilter
Input [3]: [ws_bill_addr_sk#63, ws_ext_sales_price#64, ws_sold_date_sk#65]
Condition : isnotnull(ws_bill_addr_sk#63)

(86) ColumnarToRow [codegen id : 22]
Input [3]: [ws_bill_addr_sk#63, ws_ext_sales_price#64, ws_sold_date_sk#65]

(87) ReusedExchange [Reuses operator id: 116]
Output [3]: [d_date_sk#67, d_year#68, d_qoy#69]

(88) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_sold_date_sk#65]
Right keys [1]: [d_date_sk#67]
Join type: Inner
Join condition: None

(89) Project [codegen id : 22]
Output [4]: [ws_bill_addr_sk#63, ws_ext_sales_price#64, d_year#68, d_qoy#69]
Input [6]: [ws_bill_addr_sk#63, ws_ext_sales_price#64, ws_sold_date_sk#65, d_date_sk#67, d_year#68, d_qoy#69]

(90) ReusedExchange [Reuses operator id: 10]
Output [2]: [ca_address_sk#70, ca_county#71]

(91) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_bill_addr_sk#63]
Right keys [1]: [ca_address_sk#70]
Join type: Inner
Join condition: None

(92) Project [codegen id : 22]
Output [4]: [ws_ext_sales_price#64, d_year#68, d_qoy#69, ca_county#71]
Input [6]: [ws_bill_addr_sk#63, ws_ext_sales_price#64, d_year#68, d_qoy#69, ca_address_sk#70, ca_county#71]

(93) HashAggregate [codegen id : 22]
Input [4]: [ws_ext_sales_price#64, d_year#68, d_qoy#69, ca_county#71]
Keys [3]: [ca_county#71, d_qoy#69, d_year#68]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#64))]
Aggregate Attributes [1]: [sum#72]
Results [4]: [ca_county#71, d_qoy#69, d_year#68, sum#73]

(94) RowToColumnar
Input [4]: [ca_county#71, d_qoy#69, d_year#68, sum#73]

(95) CometColumnarExchange
Input [4]: [ca_county#71, d_qoy#69, d_year#68, sum#73]
Arguments: hashpartitioning(ca_county#71, d_qoy#69, d_year#68, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=11]

(96) ColumnarToRow [codegen id : 23]
Input [4]: [ca_county#71, d_qoy#69, d_year#68, sum#73]

(97) HashAggregate [codegen id : 23]
Input [4]: [ca_county#71, d_qoy#69, d_year#68, sum#73]
Keys [3]: [ca_county#71, d_qoy#69, d_year#68]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#64))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#64))#49]
Results [2]: [ca_county#71, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#64))#49,17,2) AS web_sales#74]

(98) BroadcastExchange
Input [2]: [ca_county#71, web_sales#74]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=12]

(99) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [ca_county#46]
Right keys [1]: [ca_county#71]
Join type: Inner
Join condition: (CASE WHEN (web_sales#62 > 0.00) THEN (web_sales#74 / web_sales#62) END > CASE WHEN (store_sales#25 > 0.00) THEN (store_sales#37 / store_sales#25) END)

(100) Project [codegen id : 24]
Output [6]: [ca_county#9, d_year#6, (web_sales#62 / web_sales#50) AS web_q1_q2_increase#75, (store_sales#25 / store_sales#13) AS store_q1_q2_increase#76, (web_sales#74 / web_sales#62) AS web_q2_q3_increase#77, (store_sales#37 / store_sales#25) AS store_q2_q3_increase#78]
Input [10]: [ca_county#9, d_year#6, store_sales#13, store_sales#25, store_sales#37, ca_county#46, web_sales#50, web_sales#62, ca_county#71, web_sales#74]

(101) RowToColumnar
Input [6]: [ca_county#9, d_year#6, web_q1_q2_increase#75, store_q1_q2_increase#76, web_q2_q3_increase#77, store_q2_q3_increase#78]

(102) CometColumnarExchange
Input [6]: [ca_county#9, d_year#6, web_q1_q2_increase#75, store_q1_q2_increase#76, web_q2_q3_increase#77, store_q2_q3_increase#78]
Arguments: rangepartitioning(ca_county#9 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=13]

(103) CometSort
Input [6]: [ca_county#9, d_year#6, web_q1_q2_increase#75, store_q1_q2_increase#76, web_q2_q3_increase#77, store_q2_q3_increase#78]
Arguments: [ca_county#9, d_year#6, web_q1_q2_increase#75, store_q1_q2_increase#76, web_q2_q3_increase#77, store_q2_q3_increase#78], [ca_county#9 ASC NULLS FIRST]

(104) ColumnarToRow [codegen id : 25]
Input [6]: [ca_county#9, d_year#6, web_q1_q2_increase#75, store_q1_q2_increase#76, web_q2_q3_increase#77, store_q2_q3_increase#78]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (108)
+- * ColumnarToRow (107)
   +- CometFilter (106)
      +- CometScan parquet spark_catalog.default.date_dim (105)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(106) CometFilter
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Condition : ((((isnotnull(d_qoy#7) AND isnotnull(d_year#6)) AND (d_qoy#7 = 1)) AND (d_year#6 = 2000)) AND isnotnull(d_date_sk#5))

(107) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]

(108) BroadcastExchange
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=14]

Subquery:2 Hosting operator id = 18 Hosting Expression = ss_sold_date_sk#16 IN dynamicpruning#17
BroadcastExchange (112)
+- * ColumnarToRow (111)
   +- CometFilter (110)
      +- CometScan parquet spark_catalog.default.date_dim (109)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#18, d_year#19, d_qoy#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(110) CometFilter
Input [3]: [d_date_sk#18, d_year#19, d_qoy#20]
Condition : ((((isnotnull(d_qoy#20) AND isnotnull(d_year#19)) AND (d_qoy#20 = 2)) AND (d_year#19 = 2000)) AND isnotnull(d_date_sk#18))

(111) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#18, d_year#19, d_qoy#20]

(112) BroadcastExchange
Input [3]: [d_date_sk#18, d_year#19, d_qoy#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=15]

Subquery:3 Hosting operator id = 34 Hosting Expression = ss_sold_date_sk#28 IN dynamicpruning#29
BroadcastExchange (116)
+- * ColumnarToRow (115)
   +- CometFilter (114)
      +- CometScan parquet spark_catalog.default.date_dim (113)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#30, d_year#31, d_qoy#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,3), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(114) CometFilter
Input [3]: [d_date_sk#30, d_year#31, d_qoy#32]
Condition : ((((isnotnull(d_qoy#32) AND isnotnull(d_year#31)) AND (d_qoy#32 = 3)) AND (d_year#31 = 2000)) AND isnotnull(d_date_sk#30))

(115) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#30, d_year#31, d_qoy#32]

(116) BroadcastExchange
Input [3]: [d_date_sk#30, d_year#31, d_qoy#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=16]

Subquery:4 Hosting operator id = 51 Hosting Expression = ws_sold_date_sk#40 IN dynamicpruning#4

Subquery:5 Hosting operator id = 67 Hosting Expression = ws_sold_date_sk#53 IN dynamicpruning#17

Subquery:6 Hosting operator id = 84 Hosting Expression = ws_sold_date_sk#65 IN dynamicpruning#29


