== Physical Plan ==
* HashAggregate (77)
+- * ColumnarToRow (76)
   +- CometColumnarExchange (75)
      +- RowToColumnar (74)
         +- * HashAggregate (73)
            +- Union (72)
               :- * Project (51)
               :  +- * BroadcastHashJoin Inner BuildRight (50)
               :     :- * Project (48)
               :     :  +- * SortMergeJoin LeftSemi (47)
               :     :     :- * ColumnarToRow (28)
               :     :     :  +- CometSort (27)
               :     :     :     +- CometColumnarExchange (26)
               :     :     :        +- RowToColumnar (25)
               :     :     :           +- * Project (24)
               :     :     :              +- * BroadcastHashJoin LeftSemi BuildRight (23)
               :     :     :                 :- * ColumnarToRow (2)
               :     :     :                 :  +- CometScan parquet spark_catalog.default.catalog_sales (1)
               :     :     :                 +- BroadcastExchange (22)
               :     :     :                    +- * Project (21)
               :     :     :                       +- * Filter (20)
               :     :     :                          +- * HashAggregate (19)
               :     :     :                             +- * ColumnarToRow (18)
               :     :     :                                +- CometColumnarExchange (17)
               :     :     :                                   +- RowToColumnar (16)
               :     :     :                                      +- * HashAggregate (15)
               :     :     :                                         +- * Project (14)
               :     :     :                                            +- * BroadcastHashJoin Inner BuildRight (13)
               :     :     :                                               :- * Project (8)
               :     :     :                                               :  +- * BroadcastHashJoin Inner BuildRight (7)
               :     :     :                                               :     :- * ColumnarToRow (5)
               :     :     :                                               :     :  +- CometFilter (4)
               :     :     :                                               :     :     +- CometScan parquet spark_catalog.default.store_sales (3)
               :     :     :                                               :     +- ReusedExchange (6)
               :     :     :                                               +- BroadcastExchange (12)
               :     :     :                                                  +- * ColumnarToRow (11)
               :     :     :                                                     +- CometFilter (10)
               :     :     :                                                        +- CometScan parquet spark_catalog.default.item (9)
               :     :     +- * Sort (46)
               :     :        +- * Project (45)
               :     :           +- * Filter (44)
               :     :              +- * HashAggregate (43)
               :     :                 +- * ColumnarToRow (42)
               :     :                    +- CometColumnarExchange (41)
               :     :                       +- RowToColumnar (40)
               :     :                          +- * HashAggregate (39)
               :     :                             +- * Project (38)
               :     :                                +- * BroadcastHashJoin Inner BuildRight (37)
               :     :                                   :- * ColumnarToRow (32)
               :     :                                   :  +- CometProject (31)
               :     :                                   :     +- CometFilter (30)
               :     :                                   :        +- CometScan parquet spark_catalog.default.store_sales (29)
               :     :                                   +- BroadcastExchange (36)
               :     :                                      +- * ColumnarToRow (35)
               :     :                                         +- CometFilter (34)
               :     :                                            +- CometScan parquet spark_catalog.default.customer (33)
               :     +- ReusedExchange (49)
               +- * Project (71)
                  +- * BroadcastHashJoin Inner BuildRight (70)
                     :- * Project (68)
                     :  +- * SortMergeJoin LeftSemi (67)
                     :     :- * ColumnarToRow (60)
                     :     :  +- CometSort (59)
                     :     :     +- CometColumnarExchange (58)
                     :     :        +- RowToColumnar (57)
                     :     :           +- * Project (56)
                     :     :              +- * BroadcastHashJoin LeftSemi BuildRight (55)
                     :     :                 :- * ColumnarToRow (53)
                     :     :                 :  +- CometScan parquet spark_catalog.default.web_sales (52)
                     :     :                 +- ReusedExchange (54)
                     :     +- * Sort (66)
                     :        +- * Project (65)
                     :           +- * Filter (64)
                     :              +- * HashAggregate (63)
                     :                 +- * ColumnarToRow (62)
                     :                    +- ReusedExchange (61)
                     +- ReusedExchange (69)


(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(4) CometFilter
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_item_sk#7)

(5) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]

(6) ReusedExchange [Reuses operator id: 87]
Output [2]: [d_date_sk#10, d_date#11]

(7) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join type: Inner
Join condition: None

(8) Project [codegen id : 3]
Output [2]: [ss_item_sk#7, d_date#11]
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#10, d_date#11]

(unknown) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#12, i_item_desc#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(10) CometFilter
Input [2]: [i_item_sk#12, i_item_desc#13]
Condition : isnotnull(i_item_sk#12)

(11) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]

(12) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_desc#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(13) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#12]
Join type: Inner
Join condition: None

(14) Project [codegen id : 3]
Output [3]: [d_date#11, i_item_sk#12, substr(i_item_desc#13, 1, 30) AS _groupingexpression#14]
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#12, i_item_desc#13]

(15) HashAggregate [codegen id : 3]
Input [3]: [d_date#11, i_item_sk#12, _groupingexpression#14]
Keys [3]: [_groupingexpression#14, i_item_sk#12, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#15]
Results [4]: [_groupingexpression#14, i_item_sk#12, d_date#11, count#16]

(16) RowToColumnar
Input [4]: [_groupingexpression#14, i_item_sk#12, d_date#11, count#16]

(17) CometColumnarExchange
Input [4]: [_groupingexpression#14, i_item_sk#12, d_date#11, count#16]
Arguments: hashpartitioning(_groupingexpression#14, i_item_sk#12, d_date#11, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(18) ColumnarToRow [codegen id : 4]
Input [4]: [_groupingexpression#14, i_item_sk#12, d_date#11, count#16]

(19) HashAggregate [codegen id : 4]
Input [4]: [_groupingexpression#14, i_item_sk#12, d_date#11, count#16]
Keys [3]: [_groupingexpression#14, i_item_sk#12, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#17]
Results [2]: [i_item_sk#12 AS item_sk#18, count(1)#17 AS cnt#19]

(20) Filter [codegen id : 4]
Input [2]: [item_sk#18, cnt#19]
Condition : (cnt#19 > 4)

(21) Project [codegen id : 4]
Output [1]: [item_sk#18]
Input [2]: [item_sk#18, cnt#19]

(22) BroadcastExchange
Input [1]: [item_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#18]
Join type: LeftSemi
Join condition: None

(24) Project [codegen id : 5]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(25) RowToColumnar
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(26) CometColumnarExchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(27) CometSort
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5], [cs_bill_customer_sk#1 ASC NULLS FIRST]

(28) ColumnarToRow [codegen id : 6]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22, ss_sold_date_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(30) CometFilter
Input [4]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22, ss_sold_date_sk#23]
Condition : isnotnull(ss_customer_sk#20)

(31) CometProject
Input [4]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22, ss_sold_date_sk#23]
Arguments: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22], [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22]

(32) ColumnarToRow [codegen id : 8]
Input [3]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22]

(unknown) Scan parquet spark_catalog.default.customer
Output [1]: [c_customer_sk#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(34) CometFilter
Input [1]: [c_customer_sk#24]
Condition : isnotnull(c_customer_sk#24)

(35) ColumnarToRow [codegen id : 7]
Input [1]: [c_customer_sk#24]

(36) BroadcastExchange
Input [1]: [c_customer_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(37) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_customer_sk#20]
Right keys [1]: [c_customer_sk#24]
Join type: Inner
Join condition: None

(38) Project [codegen id : 8]
Output [3]: [ss_quantity#21, ss_sales_price#22, c_customer_sk#24]
Input [4]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22, c_customer_sk#24]

(39) HashAggregate [codegen id : 8]
Input [3]: [ss_quantity#21, ss_sales_price#22, c_customer_sk#24]
Keys [1]: [c_customer_sk#24]
Functions [1]: [partial_sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))]
Aggregate Attributes [2]: [sum#25, isEmpty#26]
Results [3]: [c_customer_sk#24, sum#27, isEmpty#28]

(40) RowToColumnar
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]

(41) CometColumnarExchange
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]
Arguments: hashpartitioning(c_customer_sk#24, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(42) ColumnarToRow [codegen id : 9]
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]

(43) HashAggregate [codegen id : 9]
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]
Keys [1]: [c_customer_sk#24]
Functions [1]: [sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))#29]
Results [2]: [c_customer_sk#24, sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))#29 AS ssales#30]

(44) Filter [codegen id : 9]
Input [2]: [c_customer_sk#24, ssales#30]
Condition : (isnotnull(ssales#30) AND (cast(ssales#30 as decimal(38,8)) > (0.500000 * Subquery scalar-subquery#31, [id=#32])))

(45) Project [codegen id : 9]
Output [1]: [c_customer_sk#24]
Input [2]: [c_customer_sk#24, ssales#30]

(46) Sort [codegen id : 9]
Input [1]: [c_customer_sk#24]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 11]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#24]
Join type: LeftSemi
Join condition: None

(48) Project [codegen id : 11]
Output [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(49) ReusedExchange [Reuses operator id: 82]
Output [1]: [d_date_sk#33]

(50) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#33]
Join type: Inner
Join condition: None

(51) Project [codegen id : 11]
Output [1]: [(cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4) AS sales#34]
Input [4]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#33]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [5]: [ws_item_sk#35, ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#39), dynamicpruningexpression(ws_sold_date_sk#39 IN dynamicpruning#40)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(53) ColumnarToRow [codegen id : 16]
Input [5]: [ws_item_sk#35, ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]

(54) ReusedExchange [Reuses operator id: 22]
Output [1]: [item_sk#18]

(55) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#35]
Right keys [1]: [item_sk#18]
Join type: LeftSemi
Join condition: None

(56) Project [codegen id : 16]
Output [4]: [ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Input [5]: [ws_item_sk#35, ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]

(57) RowToColumnar
Input [4]: [ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]

(58) CometColumnarExchange
Input [4]: [ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Arguments: hashpartitioning(ws_bill_customer_sk#36, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(59) CometSort
Input [4]: [ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Arguments: [ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39], [ws_bill_customer_sk#36 ASC NULLS FIRST]

(60) ColumnarToRow [codegen id : 17]
Input [4]: [ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]

(61) ReusedExchange [Reuses operator id: 41]
Output [3]: [c_customer_sk#24, sum#27, isEmpty#28]

(62) ColumnarToRow [codegen id : 20]
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]

(63) HashAggregate [codegen id : 20]
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]
Keys [1]: [c_customer_sk#24]
Functions [1]: [sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))#29]
Results [2]: [c_customer_sk#24, sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))#29 AS ssales#30]

(64) Filter [codegen id : 20]
Input [2]: [c_customer_sk#24, ssales#30]
Condition : (isnotnull(ssales#30) AND (cast(ssales#30 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#31, [id=#32])))

(65) Project [codegen id : 20]
Output [1]: [c_customer_sk#24]
Input [2]: [c_customer_sk#24, ssales#30]

(66) Sort [codegen id : 20]
Input [1]: [c_customer_sk#24]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(67) SortMergeJoin [codegen id : 22]
Left keys [1]: [ws_bill_customer_sk#36]
Right keys [1]: [c_customer_sk#24]
Join type: LeftSemi
Join condition: None

(68) Project [codegen id : 22]
Output [3]: [ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Input [4]: [ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]

(69) ReusedExchange [Reuses operator id: 82]
Output [1]: [d_date_sk#41]

(70) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_sold_date_sk#39]
Right keys [1]: [d_date_sk#41]
Join type: Inner
Join condition: None

(71) Project [codegen id : 22]
Output [1]: [(cast(ws_quantity#37 as decimal(10,0)) * ws_list_price#38) AS sales#42]
Input [4]: [ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39, d_date_sk#41]

(72) Union

(73) HashAggregate [codegen id : 23]
Input [1]: [sales#34]
Keys: []
Functions [1]: [partial_sum(sales#34)]
Aggregate Attributes [2]: [sum#43, isEmpty#44]
Results [2]: [sum#45, isEmpty#46]

(74) RowToColumnar
Input [2]: [sum#45, isEmpty#46]

(75) CometColumnarExchange
Input [2]: [sum#45, isEmpty#46]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=8]

(76) ColumnarToRow [codegen id : 24]
Input [2]: [sum#45, isEmpty#46]

(77) HashAggregate [codegen id : 24]
Input [2]: [sum#45, isEmpty#46]
Keys: []
Functions [1]: [sum(sales#34)]
Aggregate Attributes [1]: [sum(sales#34)#47]
Results [1]: [sum(sales#34)#47 AS sum(sales)#48]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (82)
+- * ColumnarToRow (81)
   +- CometProject (80)
      +- CometFilter (79)
         +- CometScan parquet spark_catalog.default.date_dim (78)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#33, d_year#49, d_moy#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(79) CometFilter
Input [3]: [d_date_sk#33, d_year#49, d_moy#50]
Condition : ((((isnotnull(d_year#49) AND isnotnull(d_moy#50)) AND (d_year#49 = 2000)) AND (d_moy#50 = 2)) AND isnotnull(d_date_sk#33))

(80) CometProject
Input [3]: [d_date_sk#33, d_year#49, d_moy#50]
Arguments: [d_date_sk#33], [d_date_sk#33]

(81) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#33]

(82) BroadcastExchange
Input [1]: [d_date_sk#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

Subquery:2 Hosting operator id = 3 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (87)
+- * ColumnarToRow (86)
   +- CometProject (85)
      +- CometFilter (84)
         +- CometScan parquet spark_catalog.default.date_dim (83)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(84) CometFilter
Input [3]: [d_date_sk#10, d_date#11, d_year#51]
Condition : (d_year#51 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(85) CometProject
Input [3]: [d_date_sk#10, d_date#11, d_year#51]
Arguments: [d_date_sk#10, d_date#11], [d_date_sk#10, d_date#11]

(86) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_date#11]

(87) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]

Subquery:3 Hosting operator id = 44 Hosting Expression = Subquery scalar-subquery#31, [id=#32]
* HashAggregate (106)
+- * ColumnarToRow (105)
   +- CometColumnarExchange (104)
      +- RowToColumnar (103)
         +- * HashAggregate (102)
            +- * HashAggregate (101)
               +- * ColumnarToRow (100)
                  +- CometColumnarExchange (99)
                     +- RowToColumnar (98)
                        +- * HashAggregate (97)
                           +- * Project (96)
                              +- * BroadcastHashJoin Inner BuildRight (95)
                                 :- * Project (93)
                                 :  +- * BroadcastHashJoin Inner BuildRight (92)
                                 :     :- * ColumnarToRow (90)
                                 :     :  +- CometFilter (89)
                                 :     :     +- CometScan parquet spark_catalog.default.store_sales (88)
                                 :     +- ReusedExchange (91)
                                 +- ReusedExchange (94)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#52, ss_quantity#53, ss_sales_price#54, ss_sold_date_sk#55]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#55), dynamicpruningexpression(ss_sold_date_sk#55 IN dynamicpruning#56)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(89) CometFilter
Input [4]: [ss_customer_sk#52, ss_quantity#53, ss_sales_price#54, ss_sold_date_sk#55]
Condition : isnotnull(ss_customer_sk#52)

(90) ColumnarToRow [codegen id : 3]
Input [4]: [ss_customer_sk#52, ss_quantity#53, ss_sales_price#54, ss_sold_date_sk#55]

(91) ReusedExchange [Reuses operator id: 36]
Output [1]: [c_customer_sk#57]

(92) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#52]
Right keys [1]: [c_customer_sk#57]
Join type: Inner
Join condition: None

(93) Project [codegen id : 3]
Output [4]: [ss_quantity#53, ss_sales_price#54, ss_sold_date_sk#55, c_customer_sk#57]
Input [5]: [ss_customer_sk#52, ss_quantity#53, ss_sales_price#54, ss_sold_date_sk#55, c_customer_sk#57]

(94) ReusedExchange [Reuses operator id: 111]
Output [1]: [d_date_sk#58]

(95) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#55]
Right keys [1]: [d_date_sk#58]
Join type: Inner
Join condition: None

(96) Project [codegen id : 3]
Output [3]: [ss_quantity#53, ss_sales_price#54, c_customer_sk#57]
Input [5]: [ss_quantity#53, ss_sales_price#54, ss_sold_date_sk#55, c_customer_sk#57, d_date_sk#58]

(97) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#53, ss_sales_price#54, c_customer_sk#57]
Keys [1]: [c_customer_sk#57]
Functions [1]: [partial_sum((cast(ss_quantity#53 as decimal(10,0)) * ss_sales_price#54))]
Aggregate Attributes [2]: [sum#59, isEmpty#60]
Results [3]: [c_customer_sk#57, sum#61, isEmpty#62]

(98) RowToColumnar
Input [3]: [c_customer_sk#57, sum#61, isEmpty#62]

(99) CometColumnarExchange
Input [3]: [c_customer_sk#57, sum#61, isEmpty#62]
Arguments: hashpartitioning(c_customer_sk#57, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=11]

(100) ColumnarToRow [codegen id : 4]
Input [3]: [c_customer_sk#57, sum#61, isEmpty#62]

(101) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#57, sum#61, isEmpty#62]
Keys [1]: [c_customer_sk#57]
Functions [1]: [sum((cast(ss_quantity#53 as decimal(10,0)) * ss_sales_price#54))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#53 as decimal(10,0)) * ss_sales_price#54))#63]
Results [1]: [sum((cast(ss_quantity#53 as decimal(10,0)) * ss_sales_price#54))#63 AS csales#64]

(102) HashAggregate [codegen id : 4]
Input [1]: [csales#64]
Keys: []
Functions [1]: [partial_max(csales#64)]
Aggregate Attributes [1]: [max#65]
Results [1]: [max#66]

(103) RowToColumnar
Input [1]: [max#66]

(104) CometColumnarExchange
Input [1]: [max#66]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=12]

(105) ColumnarToRow [codegen id : 5]
Input [1]: [max#66]

(106) HashAggregate [codegen id : 5]
Input [1]: [max#66]
Keys: []
Functions [1]: [max(csales#64)]
Aggregate Attributes [1]: [max(csales#64)#67]
Results [1]: [max(csales#64)#67 AS tpcds_cmax#68]

Subquery:4 Hosting operator id = 88 Hosting Expression = ss_sold_date_sk#55 IN dynamicpruning#56
BroadcastExchange (111)
+- * ColumnarToRow (110)
   +- CometProject (109)
      +- CometFilter (108)
         +- CometScan parquet spark_catalog.default.date_dim (107)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#58, d_year#69]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(108) CometFilter
Input [2]: [d_date_sk#58, d_year#69]
Condition : (d_year#69 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#58))

(109) CometProject
Input [2]: [d_date_sk#58, d_year#69]
Arguments: [d_date_sk#58], [d_date_sk#58]

(110) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#58]

(111) BroadcastExchange
Input [1]: [d_date_sk#58]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:5 Hosting operator id = 52 Hosting Expression = ws_sold_date_sk#39 IN dynamicpruning#6

Subquery:6 Hosting operator id = 64 Hosting Expression = ReusedSubquery Subquery scalar-subquery#31, [id=#32]


