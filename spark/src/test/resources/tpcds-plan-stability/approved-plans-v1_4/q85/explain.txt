== Physical Plan ==
* ColumnarToRow (49)
+- CometTakeOrderedAndProject (48)
   +- CometHashAggregate (47)
      +- CometColumnarExchange (46)
         +- RowToColumnar (45)
            +- * HashAggregate (44)
               +- * Project (43)
                  +- * BroadcastHashJoin Inner BuildRight (42)
                     :- * Project (37)
                     :  +- * BroadcastHashJoin Inner BuildRight (36)
                     :     :- * Project (34)
                     :     :  +- * BroadcastHashJoin Inner BuildRight (33)
                     :     :     :- * Project (27)
                     :     :     :  +- * BroadcastHashJoin Inner BuildRight (26)
                     :     :     :     :- * Project (21)
                     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (20)
                     :     :     :     :     :- * Project (15)
                     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (14)
                     :     :     :     :     :     :- * ColumnarToRow (9)
                     :     :     :     :     :     :  +- CometProject (8)
                     :     :     :     :     :     :     +- CometBroadcastHashJoin (7)
                     :     :     :     :     :     :        :- CometBroadcastExchange (3)
                     :     :     :     :     :     :        :  +- CometFilter (2)
                     :     :     :     :     :     :        :     +- CometScan parquet spark_catalog.default.web_sales (1)
                     :     :     :     :     :     :        +- CometProject (6)
                     :     :     :     :     :     :           +- CometFilter (5)
                     :     :     :     :     :     :              +- CometScan parquet spark_catalog.default.web_returns (4)
                     :     :     :     :     :     +- BroadcastExchange (13)
                     :     :     :     :     :        +- * ColumnarToRow (12)
                     :     :     :     :     :           +- CometFilter (11)
                     :     :     :     :     :              +- CometScan parquet spark_catalog.default.web_page (10)
                     :     :     :     :     +- BroadcastExchange (19)
                     :     :     :     :        +- * ColumnarToRow (18)
                     :     :     :     :           +- CometFilter (17)
                     :     :     :     :              +- CometScan parquet spark_catalog.default.customer_demographics (16)
                     :     :     :     +- BroadcastExchange (25)
                     :     :     :        +- * ColumnarToRow (24)
                     :     :     :           +- CometFilter (23)
                     :     :     :              +- CometScan parquet spark_catalog.default.customer_demographics (22)
                     :     :     +- BroadcastExchange (32)
                     :     :        +- * ColumnarToRow (31)
                     :     :           +- CometProject (30)
                     :     :              +- CometFilter (29)
                     :     :                 +- CometScan parquet spark_catalog.default.customer_address (28)
                     :     +- ReusedExchange (35)
                     +- BroadcastExchange (41)
                        +- * ColumnarToRow (40)
                           +- CometFilter (39)
                              +- CometScan parquet spark_catalog.default.reason (38)


(unknown) Scan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#7), dynamicpruningexpression(ws_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_page_sk), Or(Or(And(GreaterThanOrEqual(ws_sales_price,100.00),LessThanOrEqual(ws_sales_price,150.00)),And(GreaterThanOrEqual(ws_sales_price,50.00),LessThanOrEqual(ws_sales_price,100.00))),And(GreaterThanOrEqual(ws_sales_price,150.00),LessThanOrEqual(ws_sales_price,200.00))), Or(Or(And(GreaterThanOrEqual(ws_net_profit,100.00),LessThanOrEqual(ws_net_profit,200.00)),And(GreaterThanOrEqual(ws_net_profit,150.00),LessThanOrEqual(ws_net_profit,300.00))),And(GreaterThanOrEqual(ws_net_profit,50.00),LessThanOrEqual(ws_net_profit,250.00)))]
ReadSchema: struct<ws_item_sk:int,ws_web_page_sk:int,ws_order_number:int,ws_quantity:int,ws_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) CometFilter
Input [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Condition : ((((isnotnull(ws_item_sk#1) AND isnotnull(ws_order_number#3)) AND isnotnull(ws_web_page_sk#2)) AND ((((ws_sales_price#5 >= 100.00) AND (ws_sales_price#5 <= 150.00)) OR ((ws_sales_price#5 >= 50.00) AND (ws_sales_price#5 <= 100.00))) OR ((ws_sales_price#5 >= 150.00) AND (ws_sales_price#5 <= 200.00)))) AND ((((ws_net_profit#6 >= 100.00) AND (ws_net_profit#6 <= 200.00)) OR ((ws_net_profit#6 >= 150.00) AND (ws_net_profit#6 <= 300.00))) OR ((ws_net_profit#6 >= 50.00) AND (ws_net_profit#6 <= 250.00))))

(3) CometBroadcastExchange
Input [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Arguments: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]

(unknown) Scan parquet spark_catalog.default.web_returns
Output [9]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16, wr_returned_date_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr_returning_cdemo_sk), IsNotNull(wr_refunded_addr_sk), IsNotNull(wr_reason_sk)]
ReadSchema: struct<wr_item_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_cdemo_sk:int,wr_reason_sk:int,wr_order_number:int,wr_fee:decimal(7,2),wr_refunded_cash:decimal(7,2)>

(5) CometFilter
Input [9]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16, wr_returned_date_sk#17]
Condition : (((((isnotnull(wr_item_sk#9) AND isnotnull(wr_order_number#14)) AND isnotnull(wr_refunded_cdemo_sk#10)) AND isnotnull(wr_returning_cdemo_sk#12)) AND isnotnull(wr_refunded_addr_sk#11)) AND isnotnull(wr_reason_sk#13))

(6) CometProject
Input [9]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16, wr_returned_date_sk#17]
Arguments: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16], [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16]

(7) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Right output [8]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16]
Arguments: [ws_item_sk#1, ws_order_number#3], [wr_item_sk#9, wr_order_number#14], Inner

(8) CometProject
Input [15]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16]
Arguments: [ws_web_page_sk#2, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16], [ws_web_page_sk#2, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]

(9) ColumnarToRow [codegen id : 7]
Input [11]: [ws_web_page_sk#2, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]

(unknown) Scan parquet spark_catalog.default.web_page
Output [1]: [wp_web_page_sk#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(11) CometFilter
Input [1]: [wp_web_page_sk#18]
Condition : isnotnull(wp_web_page_sk#18)

(12) ColumnarToRow [codegen id : 1]
Input [1]: [wp_web_page_sk#18]

(13) BroadcastExchange
Input [1]: [wp_web_page_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(14) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ws_web_page_sk#2]
Right keys [1]: [wp_web_page_sk#18]
Join type: Inner
Join condition: None

(15) Project [codegen id : 7]
Output [10]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Input [12]: [ws_web_page_sk#2, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, wp_web_page_sk#18]

(unknown) Scan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,Advanced Degree     )),And(EqualTo(cd_marital_status,S),EqualTo(cd_education_status,College             ))),And(EqualTo(cd_marital_status,W),EqualTo(cd_education_status,2 yr Degree         )))]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(17) CometFilter
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Condition : (((isnotnull(cd_demo_sk#19) AND isnotnull(cd_marital_status#20)) AND isnotnull(cd_education_status#21)) AND ((((cd_marital_status#20 = M) AND (cd_education_status#21 = Advanced Degree     )) OR ((cd_marital_status#20 = S) AND (cd_education_status#21 = College             ))) OR ((cd_marital_status#20 = W) AND (cd_education_status#21 = 2 yr Degree         ))))

(18) ColumnarToRow [codegen id : 2]
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]

(19) BroadcastExchange
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(20) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [wr_refunded_cdemo_sk#10]
Right keys [1]: [cd_demo_sk#19]
Join type: Inner
Join condition: ((((((cd_marital_status#20 = M) AND (cd_education_status#21 = Advanced Degree     )) AND (ws_sales_price#5 >= 100.00)) AND (ws_sales_price#5 <= 150.00)) OR ((((cd_marital_status#20 = S) AND (cd_education_status#21 = College             )) AND (ws_sales_price#5 >= 50.00)) AND (ws_sales_price#5 <= 100.00))) OR ((((cd_marital_status#20 = W) AND (cd_education_status#21 = 2 yr Degree         )) AND (ws_sales_price#5 >= 150.00)) AND (ws_sales_price#5 <= 200.00)))

(21) Project [codegen id : 7]
Output [10]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, cd_marital_status#20, cd_education_status#21]
Input [13]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]

(unknown) Scan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(23) CometFilter
Input [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]
Condition : ((isnotnull(cd_demo_sk#22) AND isnotnull(cd_marital_status#23)) AND isnotnull(cd_education_status#24))

(24) ColumnarToRow [codegen id : 3]
Input [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]

(25) BroadcastExchange
Input [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]
Arguments: HashedRelationBroadcastMode(List(input[0, int, false], input[1, string, false], input[2, string, false]),false), [plan_id=3]

(26) BroadcastHashJoin [codegen id : 7]
Left keys [3]: [wr_returning_cdemo_sk#12, cd_marital_status#20, cd_education_status#21]
Right keys [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]
Join type: Inner
Join condition: None

(27) Project [codegen id : 7]
Output [7]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#11, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Input [13]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, cd_marital_status#20, cd_education_status#21, cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]

(unknown) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#25, ca_state#26, ca_country#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_state, [IN,NJ,OH]),In(ca_state, [CT,KY,WI])),In(ca_state, [AR,IA,LA]))]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(29) CometFilter
Input [3]: [ca_address_sk#25, ca_state#26, ca_country#27]
Condition : (((isnotnull(ca_country#27) AND (ca_country#27 = United States)) AND isnotnull(ca_address_sk#25)) AND ((ca_state#26 IN (IN,OH,NJ) OR ca_state#26 IN (WI,CT,KY)) OR ca_state#26 IN (LA,IA,AR)))

(30) CometProject
Input [3]: [ca_address_sk#25, ca_state#26, ca_country#27]
Arguments: [ca_address_sk#25, ca_state#26], [ca_address_sk#25, ca_state#26]

(31) ColumnarToRow [codegen id : 4]
Input [2]: [ca_address_sk#25, ca_state#26]

(32) BroadcastExchange
Input [2]: [ca_address_sk#25, ca_state#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(33) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [wr_refunded_addr_sk#11]
Right keys [1]: [ca_address_sk#25]
Join type: Inner
Join condition: ((((ca_state#26 IN (IN,OH,NJ) AND (ws_net_profit#6 >= 100.00)) AND (ws_net_profit#6 <= 200.00)) OR ((ca_state#26 IN (WI,CT,KY) AND (ws_net_profit#6 >= 150.00)) AND (ws_net_profit#6 <= 300.00))) OR ((ca_state#26 IN (LA,IA,AR) AND (ws_net_profit#6 >= 50.00)) AND (ws_net_profit#6 <= 250.00)))

(34) Project [codegen id : 7]
Output [5]: [ws_quantity#4, ws_sold_date_sk#7, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Input [9]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#11, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, ca_address_sk#25, ca_state#26]

(35) ReusedExchange [Reuses operator id: 54]
Output [1]: [d_date_sk#28]

(36) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ws_sold_date_sk#7]
Right keys [1]: [d_date_sk#28]
Join type: Inner
Join condition: None

(37) Project [codegen id : 7]
Output [4]: [ws_quantity#4, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Input [6]: [ws_quantity#4, ws_sold_date_sk#7, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, d_date_sk#28]

(unknown) Scan parquet spark_catalog.default.reason
Output [2]: [r_reason_sk#29, r_reason_desc#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/reason]
PushedFilters: [IsNotNull(r_reason_sk)]
ReadSchema: struct<r_reason_sk:int,r_reason_desc:string>

(39) CometFilter
Input [2]: [r_reason_sk#29, r_reason_desc#30]
Condition : isnotnull(r_reason_sk#29)

(40) ColumnarToRow [codegen id : 6]
Input [2]: [r_reason_sk#29, r_reason_desc#30]

(41) BroadcastExchange
Input [2]: [r_reason_sk#29, r_reason_desc#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(42) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [wr_reason_sk#13]
Right keys [1]: [r_reason_sk#29]
Join type: Inner
Join condition: None

(43) Project [codegen id : 7]
Output [4]: [ws_quantity#4, wr_fee#15, wr_refunded_cash#16, r_reason_desc#30]
Input [6]: [ws_quantity#4, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, r_reason_sk#29, r_reason_desc#30]

(44) HashAggregate [codegen id : 7]
Input [4]: [ws_quantity#4, wr_fee#15, wr_refunded_cash#16, r_reason_desc#30]
Keys [1]: [r_reason_desc#30]
Functions [3]: [partial_avg(ws_quantity#4), partial_avg(UnscaledValue(wr_refunded_cash#16)), partial_avg(UnscaledValue(wr_fee#15))]
Aggregate Attributes [6]: [sum#31, count#32, sum#33, count#34, sum#35, count#36]
Results [7]: [r_reason_desc#30, sum#37, count#38, sum#39, count#40, sum#41, count#42]

(45) RowToColumnar
Input [7]: [r_reason_desc#30, sum#37, count#38, sum#39, count#40, sum#41, count#42]

(46) CometColumnarExchange
Input [7]: [r_reason_desc#30, sum#37, count#38, sum#39, count#40, sum#41, count#42]
Arguments: hashpartitioning(r_reason_desc#30, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(47) CometHashAggregate
Input [7]: [r_reason_desc#30, sum#37, count#38, sum#39, count#40, sum#41, count#42]
Keys [1]: [r_reason_desc#30]
Functions [3]: [avg(ws_quantity#4), avg(UnscaledValue(wr_refunded_cash#16)), avg(UnscaledValue(wr_fee#15))]

(48) CometTakeOrderedAndProject
Input [4]: [substr(r_reason_desc, 1, 20)#43, avg(ws_quantity)#44, avg(wr_refunded_cash)#45, avg(wr_fee)#46]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[substr(r_reason_desc, 1, 20)#43 ASC NULLS FIRST,avg(ws_quantity)#44 ASC NULLS FIRST,avg(wr_refunded_cash)#45 ASC NULLS FIRST,avg(wr_fee)#46 ASC NULLS FIRST], output=[substr(r_reason_desc, 1, 20)#43,avg(ws_quantity)#44,avg(wr_refunded_cash)#45,avg(wr_fee)#46]), 100, [substr(r_reason_desc, 1, 20)#43 ASC NULLS FIRST, avg(ws_quantity)#44 ASC NULLS FIRST, avg(wr_refunded_cash)#45 ASC NULLS FIRST, avg(wr_fee)#46 ASC NULLS FIRST], [substr(r_reason_desc, 1, 20)#43, avg(ws_quantity)#44, avg(wr_refunded_cash)#45, avg(wr_fee)#46]

(49) ColumnarToRow [codegen id : 8]
Input [4]: [substr(r_reason_desc, 1, 20)#43, avg(ws_quantity)#44, avg(wr_refunded_cash)#45, avg(wr_fee)#46]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (54)
+- * ColumnarToRow (53)
   +- CometProject (52)
      +- CometFilter (51)
         +- CometScan parquet spark_catalog.default.date_dim (50)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#28, d_year#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(51) CometFilter
Input [2]: [d_date_sk#28, d_year#47]
Condition : ((isnotnull(d_year#47) AND (d_year#47 = 2000)) AND isnotnull(d_date_sk#28))

(52) CometProject
Input [2]: [d_date_sk#28, d_year#47]
Arguments: [d_date_sk#28], [d_date_sk#28]

(53) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#28]

(54) BroadcastExchange
Input [1]: [d_date_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]


