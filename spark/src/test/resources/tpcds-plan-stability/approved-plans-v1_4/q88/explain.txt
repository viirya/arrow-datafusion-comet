== Physical Plan ==
* BroadcastNestedLoopJoin Inner BuildRight (198)
:- * BroadcastNestedLoopJoin Inner BuildRight (174)
:  :- * BroadcastNestedLoopJoin Inner BuildRight (150)
:  :  :- * BroadcastNestedLoopJoin Inner BuildRight (126)
:  :  :  :- * BroadcastNestedLoopJoin Inner BuildRight (102)
:  :  :  :  :- * BroadcastNestedLoopJoin Inner BuildRight (78)
:  :  :  :  :  :- * BroadcastNestedLoopJoin Inner BuildRight (54)
:  :  :  :  :  :  :- * ColumnarToRow (30)
:  :  :  :  :  :  :  +- CometHashAggregate (29)
:  :  :  :  :  :  :     +- CometColumnarExchange (28)
:  :  :  :  :  :  :        +- RowToColumnar (27)
:  :  :  :  :  :  :           +- * HashAggregate (26)
:  :  :  :  :  :  :              +- * Project (25)
:  :  :  :  :  :  :                 +- * BroadcastHashJoin Inner BuildRight (24)
:  :  :  :  :  :  :                    :- * Project (18)
:  :  :  :  :  :  :                    :  +- * BroadcastHashJoin Inner BuildRight (17)
:  :  :  :  :  :  :                    :     :- * Project (11)
:  :  :  :  :  :  :                    :     :  +- * BroadcastHashJoin Inner BuildRight (10)
:  :  :  :  :  :  :                    :     :     :- * ColumnarToRow (4)
:  :  :  :  :  :  :                    :     :     :  +- CometProject (3)
:  :  :  :  :  :  :                    :     :     :     +- CometFilter (2)
:  :  :  :  :  :  :                    :     :     :        +- CometScan parquet spark_catalog.default.store_sales (1)
:  :  :  :  :  :  :                    :     :     +- BroadcastExchange (9)
:  :  :  :  :  :  :                    :     :        +- * ColumnarToRow (8)
:  :  :  :  :  :  :                    :     :           +- CometProject (7)
:  :  :  :  :  :  :                    :     :              +- CometFilter (6)
:  :  :  :  :  :  :                    :     :                 +- CometScan parquet spark_catalog.default.household_demographics (5)
:  :  :  :  :  :  :                    :     +- BroadcastExchange (16)
:  :  :  :  :  :  :                    :        +- * ColumnarToRow (15)
:  :  :  :  :  :  :                    :           +- CometProject (14)
:  :  :  :  :  :  :                    :              +- CometFilter (13)
:  :  :  :  :  :  :                    :                 +- CometScan parquet spark_catalog.default.time_dim (12)
:  :  :  :  :  :  :                    +- BroadcastExchange (23)
:  :  :  :  :  :  :                       +- * ColumnarToRow (22)
:  :  :  :  :  :  :                          +- CometProject (21)
:  :  :  :  :  :  :                             +- CometFilter (20)
:  :  :  :  :  :  :                                +- CometScan parquet spark_catalog.default.store (19)
:  :  :  :  :  :  +- BroadcastExchange (53)
:  :  :  :  :  :     +- * ColumnarToRow (52)
:  :  :  :  :  :        +- CometHashAggregate (51)
:  :  :  :  :  :           +- CometColumnarExchange (50)
:  :  :  :  :  :              +- RowToColumnar (49)
:  :  :  :  :  :                 +- * HashAggregate (48)
:  :  :  :  :  :                    +- * Project (47)
:  :  :  :  :  :                       +- * BroadcastHashJoin Inner BuildRight (46)
:  :  :  :  :  :                          :- * Project (44)
:  :  :  :  :  :                          :  +- * BroadcastHashJoin Inner BuildRight (43)
:  :  :  :  :  :                          :     :- * Project (37)
:  :  :  :  :  :                          :     :  +- * BroadcastHashJoin Inner BuildRight (36)
:  :  :  :  :  :                          :     :     :- * ColumnarToRow (34)
:  :  :  :  :  :                          :     :     :  +- CometProject (33)
:  :  :  :  :  :                          :     :     :     +- CometFilter (32)
:  :  :  :  :  :                          :     :     :        +- CometScan parquet spark_catalog.default.store_sales (31)
:  :  :  :  :  :                          :     :     +- ReusedExchange (35)
:  :  :  :  :  :                          :     +- BroadcastExchange (42)
:  :  :  :  :  :                          :        +- * ColumnarToRow (41)
:  :  :  :  :  :                          :           +- CometProject (40)
:  :  :  :  :  :                          :              +- CometFilter (39)
:  :  :  :  :  :                          :                 +- CometScan parquet spark_catalog.default.time_dim (38)
:  :  :  :  :  :                          +- ReusedExchange (45)
:  :  :  :  :  +- BroadcastExchange (77)
:  :  :  :  :     +- * ColumnarToRow (76)
:  :  :  :  :        +- CometHashAggregate (75)
:  :  :  :  :           +- CometColumnarExchange (74)
:  :  :  :  :              +- RowToColumnar (73)
:  :  :  :  :                 +- * HashAggregate (72)
:  :  :  :  :                    +- * Project (71)
:  :  :  :  :                       +- * BroadcastHashJoin Inner BuildRight (70)
:  :  :  :  :                          :- * Project (68)
:  :  :  :  :                          :  +- * BroadcastHashJoin Inner BuildRight (67)
:  :  :  :  :                          :     :- * Project (61)
:  :  :  :  :                          :     :  +- * BroadcastHashJoin Inner BuildRight (60)
:  :  :  :  :                          :     :     :- * ColumnarToRow (58)
:  :  :  :  :                          :     :     :  +- CometProject (57)
:  :  :  :  :                          :     :     :     +- CometFilter (56)
:  :  :  :  :                          :     :     :        +- CometScan parquet spark_catalog.default.store_sales (55)
:  :  :  :  :                          :     :     +- ReusedExchange (59)
:  :  :  :  :                          :     +- BroadcastExchange (66)
:  :  :  :  :                          :        +- * ColumnarToRow (65)
:  :  :  :  :                          :           +- CometProject (64)
:  :  :  :  :                          :              +- CometFilter (63)
:  :  :  :  :                          :                 +- CometScan parquet spark_catalog.default.time_dim (62)
:  :  :  :  :                          +- ReusedExchange (69)
:  :  :  :  +- BroadcastExchange (101)
:  :  :  :     +- * ColumnarToRow (100)
:  :  :  :        +- CometHashAggregate (99)
:  :  :  :           +- CometColumnarExchange (98)
:  :  :  :              +- RowToColumnar (97)
:  :  :  :                 +- * HashAggregate (96)
:  :  :  :                    +- * Project (95)
:  :  :  :                       +- * BroadcastHashJoin Inner BuildRight (94)
:  :  :  :                          :- * Project (92)
:  :  :  :                          :  +- * BroadcastHashJoin Inner BuildRight (91)
:  :  :  :                          :     :- * Project (85)
:  :  :  :                          :     :  +- * BroadcastHashJoin Inner BuildRight (84)
:  :  :  :                          :     :     :- * ColumnarToRow (82)
:  :  :  :                          :     :     :  +- CometProject (81)
:  :  :  :                          :     :     :     +- CometFilter (80)
:  :  :  :                          :     :     :        +- CometScan parquet spark_catalog.default.store_sales (79)
:  :  :  :                          :     :     +- ReusedExchange (83)
:  :  :  :                          :     +- BroadcastExchange (90)
:  :  :  :                          :        +- * ColumnarToRow (89)
:  :  :  :                          :           +- CometProject (88)
:  :  :  :                          :              +- CometFilter (87)
:  :  :  :                          :                 +- CometScan parquet spark_catalog.default.time_dim (86)
:  :  :  :                          +- ReusedExchange (93)
:  :  :  +- BroadcastExchange (125)
:  :  :     +- * ColumnarToRow (124)
:  :  :        +- CometHashAggregate (123)
:  :  :           +- CometColumnarExchange (122)
:  :  :              +- RowToColumnar (121)
:  :  :                 +- * HashAggregate (120)
:  :  :                    +- * Project (119)
:  :  :                       +- * BroadcastHashJoin Inner BuildRight (118)
:  :  :                          :- * Project (116)
:  :  :                          :  +- * BroadcastHashJoin Inner BuildRight (115)
:  :  :                          :     :- * Project (109)
:  :  :                          :     :  +- * BroadcastHashJoin Inner BuildRight (108)
:  :  :                          :     :     :- * ColumnarToRow (106)
:  :  :                          :     :     :  +- CometProject (105)
:  :  :                          :     :     :     +- CometFilter (104)
:  :  :                          :     :     :        +- CometScan parquet spark_catalog.default.store_sales (103)
:  :  :                          :     :     +- ReusedExchange (107)
:  :  :                          :     +- BroadcastExchange (114)
:  :  :                          :        +- * ColumnarToRow (113)
:  :  :                          :           +- CometProject (112)
:  :  :                          :              +- CometFilter (111)
:  :  :                          :                 +- CometScan parquet spark_catalog.default.time_dim (110)
:  :  :                          +- ReusedExchange (117)
:  :  +- BroadcastExchange (149)
:  :     +- * ColumnarToRow (148)
:  :        +- CometHashAggregate (147)
:  :           +- CometColumnarExchange (146)
:  :              +- RowToColumnar (145)
:  :                 +- * HashAggregate (144)
:  :                    +- * Project (143)
:  :                       +- * BroadcastHashJoin Inner BuildRight (142)
:  :                          :- * Project (140)
:  :                          :  +- * BroadcastHashJoin Inner BuildRight (139)
:  :                          :     :- * Project (133)
:  :                          :     :  +- * BroadcastHashJoin Inner BuildRight (132)
:  :                          :     :     :- * ColumnarToRow (130)
:  :                          :     :     :  +- CometProject (129)
:  :                          :     :     :     +- CometFilter (128)
:  :                          :     :     :        +- CometScan parquet spark_catalog.default.store_sales (127)
:  :                          :     :     +- ReusedExchange (131)
:  :                          :     +- BroadcastExchange (138)
:  :                          :        +- * ColumnarToRow (137)
:  :                          :           +- CometProject (136)
:  :                          :              +- CometFilter (135)
:  :                          :                 +- CometScan parquet spark_catalog.default.time_dim (134)
:  :                          +- ReusedExchange (141)
:  +- BroadcastExchange (173)
:     +- * ColumnarToRow (172)
:        +- CometHashAggregate (171)
:           +- CometColumnarExchange (170)
:              +- RowToColumnar (169)
:                 +- * HashAggregate (168)
:                    +- * Project (167)
:                       +- * BroadcastHashJoin Inner BuildRight (166)
:                          :- * Project (164)
:                          :  +- * BroadcastHashJoin Inner BuildRight (163)
:                          :     :- * Project (157)
:                          :     :  +- * BroadcastHashJoin Inner BuildRight (156)
:                          :     :     :- * ColumnarToRow (154)
:                          :     :     :  +- CometProject (153)
:                          :     :     :     +- CometFilter (152)
:                          :     :     :        +- CometScan parquet spark_catalog.default.store_sales (151)
:                          :     :     +- ReusedExchange (155)
:                          :     +- BroadcastExchange (162)
:                          :        +- * ColumnarToRow (161)
:                          :           +- CometProject (160)
:                          :              +- CometFilter (159)
:                          :                 +- CometScan parquet spark_catalog.default.time_dim (158)
:                          +- ReusedExchange (165)
+- BroadcastExchange (197)
   +- * ColumnarToRow (196)
      +- CometHashAggregate (195)
         +- CometColumnarExchange (194)
            +- RowToColumnar (193)
               +- * HashAggregate (192)
                  +- * Project (191)
                     +- * BroadcastHashJoin Inner BuildRight (190)
                        :- * Project (188)
                        :  +- * BroadcastHashJoin Inner BuildRight (187)
                        :     :- * Project (181)
                        :     :  +- * BroadcastHashJoin Inner BuildRight (180)
                        :     :     :- * ColumnarToRow (178)
                        :     :     :  +- CometProject (177)
                        :     :     :     +- CometFilter (176)
                        :     :     :        +- CometScan parquet spark_catalog.default.store_sales (175)
                        :     :     +- ReusedExchange (179)
                        :     +- BroadcastExchange (186)
                        :        +- * ColumnarToRow (185)
                        :           +- CometProject (184)
                        :              +- CometFilter (183)
                        :                 +- CometScan parquet spark_catalog.default.time_dim (182)
                        +- ReusedExchange (189)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_sold_time_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_sold_date_sk#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>

(2) CometFilter
Input [4]: [ss_sold_time_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_sold_date_sk#4]
Condition : ((isnotnull(ss_hdemo_sk#2) AND isnotnull(ss_sold_time_sk#1)) AND isnotnull(ss_store_sk#3))

(3) CometProject
Input [4]: [ss_sold_time_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_sold_date_sk#4]
Arguments: [ss_sold_time_sk#1, ss_hdemo_sk#2, ss_store_sk#3], [ss_sold_time_sk#1, ss_hdemo_sk#2, ss_store_sk#3]

(4) ColumnarToRow [codegen id : 4]
Input [3]: [ss_sold_time_sk#1, ss_hdemo_sk#2, ss_store_sk#3]

(unknown) Scan parquet spark_catalog.default.household_demographics
Output [3]: [hd_demo_sk#5, hd_dep_count#6, hd_vehicle_count#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(Or(And(EqualTo(hd_dep_count,4),LessThanOrEqual(hd_vehicle_count,6)),And(EqualTo(hd_dep_count,2),LessThanOrEqual(hd_vehicle_count,4))),And(EqualTo(hd_dep_count,0),LessThanOrEqual(hd_vehicle_count,2))), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(6) CometFilter
Input [3]: [hd_demo_sk#5, hd_dep_count#6, hd_vehicle_count#7]
Condition : (((((hd_dep_count#6 = 4) AND (hd_vehicle_count#7 <= 6)) OR ((hd_dep_count#6 = 2) AND (hd_vehicle_count#7 <= 4))) OR ((hd_dep_count#6 = 0) AND (hd_vehicle_count#7 <= 2))) AND isnotnull(hd_demo_sk#5))

(7) CometProject
Input [3]: [hd_demo_sk#5, hd_dep_count#6, hd_vehicle_count#7]
Arguments: [hd_demo_sk#5], [hd_demo_sk#5]

(8) ColumnarToRow [codegen id : 1]
Input [1]: [hd_demo_sk#5]

(9) BroadcastExchange
Input [1]: [hd_demo_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_hdemo_sk#2]
Right keys [1]: [hd_demo_sk#5]
Join type: Inner
Join condition: None

(11) Project [codegen id : 4]
Output [2]: [ss_sold_time_sk#1, ss_store_sk#3]
Input [4]: [ss_sold_time_sk#1, ss_hdemo_sk#2, ss_store_sk#3, hd_demo_sk#5]

(unknown) Scan parquet spark_catalog.default.time_dim
Output [3]: [t_time_sk#8, t_hour#9, t_minute#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/time_dim]
PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,8), GreaterThanOrEqual(t_minute,30), IsNotNull(t_time_sk)]
ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>

(13) CometFilter
Input [3]: [t_time_sk#8, t_hour#9, t_minute#10]
Condition : ((((isnotnull(t_hour#9) AND isnotnull(t_minute#10)) AND (t_hour#9 = 8)) AND (t_minute#10 >= 30)) AND isnotnull(t_time_sk#8))

(14) CometProject
Input [3]: [t_time_sk#8, t_hour#9, t_minute#10]
Arguments: [t_time_sk#8], [t_time_sk#8]

(15) ColumnarToRow [codegen id : 2]
Input [1]: [t_time_sk#8]

(16) BroadcastExchange
Input [1]: [t_time_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_time_sk#1]
Right keys [1]: [t_time_sk#8]
Join type: Inner
Join condition: None

(18) Project [codegen id : 4]
Output [1]: [ss_store_sk#3]
Input [3]: [ss_sold_time_sk#1, ss_store_sk#3, t_time_sk#8]

(unknown) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#11, s_store_name#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_name), EqualTo(s_store_name,ese), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(20) CometFilter
Input [2]: [s_store_sk#11, s_store_name#12]
Condition : ((isnotnull(s_store_name#12) AND (s_store_name#12 = ese)) AND isnotnull(s_store_sk#11))

(21) CometProject
Input [2]: [s_store_sk#11, s_store_name#12]
Arguments: [s_store_sk#11], [s_store_sk#11]

(22) ColumnarToRow [codegen id : 3]
Input [1]: [s_store_sk#11]

(23) BroadcastExchange
Input [1]: [s_store_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(24) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#11]
Join type: Inner
Join condition: None

(25) Project [codegen id : 4]
Output: []
Input [2]: [ss_store_sk#3, s_store_sk#11]

(26) HashAggregate [codegen id : 4]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#13]
Results [1]: [count#14]

(27) RowToColumnar
Input [1]: [count#14]

(28) CometColumnarExchange
Input [1]: [count#14]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(29) CometHashAggregate
Input [1]: [count#14]
Keys: []
Functions [1]: [count(1)]

(30) ColumnarToRow [codegen id : 40]
Input [1]: [h8_30_to_9#15]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_sold_time_sk#16, ss_hdemo_sk#17, ss_store_sk#18, ss_sold_date_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>

(32) CometFilter
Input [4]: [ss_sold_time_sk#16, ss_hdemo_sk#17, ss_store_sk#18, ss_sold_date_sk#19]
Condition : ((isnotnull(ss_hdemo_sk#17) AND isnotnull(ss_sold_time_sk#16)) AND isnotnull(ss_store_sk#18))

(33) CometProject
Input [4]: [ss_sold_time_sk#16, ss_hdemo_sk#17, ss_store_sk#18, ss_sold_date_sk#19]
Arguments: [ss_sold_time_sk#16, ss_hdemo_sk#17, ss_store_sk#18], [ss_sold_time_sk#16, ss_hdemo_sk#17, ss_store_sk#18]

(34) ColumnarToRow [codegen id : 8]
Input [3]: [ss_sold_time_sk#16, ss_hdemo_sk#17, ss_store_sk#18]

(35) ReusedExchange [Reuses operator id: 9]
Output [1]: [hd_demo_sk#20]

(36) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_hdemo_sk#17]
Right keys [1]: [hd_demo_sk#20]
Join type: Inner
Join condition: None

(37) Project [codegen id : 8]
Output [2]: [ss_sold_time_sk#16, ss_store_sk#18]
Input [4]: [ss_sold_time_sk#16, ss_hdemo_sk#17, ss_store_sk#18, hd_demo_sk#20]

(unknown) Scan parquet spark_catalog.default.time_dim
Output [3]: [t_time_sk#21, t_hour#22, t_minute#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/time_dim]
PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,9), LessThan(t_minute,30), IsNotNull(t_time_sk)]
ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>

(39) CometFilter
Input [3]: [t_time_sk#21, t_hour#22, t_minute#23]
Condition : ((((isnotnull(t_hour#22) AND isnotnull(t_minute#23)) AND (t_hour#22 = 9)) AND (t_minute#23 < 30)) AND isnotnull(t_time_sk#21))

(40) CometProject
Input [3]: [t_time_sk#21, t_hour#22, t_minute#23]
Arguments: [t_time_sk#21], [t_time_sk#21]

(41) ColumnarToRow [codegen id : 6]
Input [1]: [t_time_sk#21]

(42) BroadcastExchange
Input [1]: [t_time_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(43) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_time_sk#16]
Right keys [1]: [t_time_sk#21]
Join type: Inner
Join condition: None

(44) Project [codegen id : 8]
Output [1]: [ss_store_sk#18]
Input [3]: [ss_sold_time_sk#16, ss_store_sk#18, t_time_sk#21]

(45) ReusedExchange [Reuses operator id: 23]
Output [1]: [s_store_sk#24]

(46) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#18]
Right keys [1]: [s_store_sk#24]
Join type: Inner
Join condition: None

(47) Project [codegen id : 8]
Output: []
Input [2]: [ss_store_sk#18, s_store_sk#24]

(48) HashAggregate [codegen id : 8]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#25]
Results [1]: [count#26]

(49) RowToColumnar
Input [1]: [count#26]

(50) CometColumnarExchange
Input [1]: [count#26]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(51) CometHashAggregate
Input [1]: [count#26]
Keys: []
Functions [1]: [count(1)]

(52) ColumnarToRow [codegen id : 9]
Input [1]: [h9_to_9_30#27]

(53) BroadcastExchange
Input [1]: [h9_to_9_30#27]
Arguments: IdentityBroadcastMode, [plan_id=7]

(54) BroadcastNestedLoopJoin [codegen id : 40]
Join type: Inner
Join condition: None

(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_sold_time_sk#28, ss_hdemo_sk#29, ss_store_sk#30, ss_sold_date_sk#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>

(56) CometFilter
Input [4]: [ss_sold_time_sk#28, ss_hdemo_sk#29, ss_store_sk#30, ss_sold_date_sk#31]
Condition : ((isnotnull(ss_hdemo_sk#29) AND isnotnull(ss_sold_time_sk#28)) AND isnotnull(ss_store_sk#30))

(57) CometProject
Input [4]: [ss_sold_time_sk#28, ss_hdemo_sk#29, ss_store_sk#30, ss_sold_date_sk#31]
Arguments: [ss_sold_time_sk#28, ss_hdemo_sk#29, ss_store_sk#30], [ss_sold_time_sk#28, ss_hdemo_sk#29, ss_store_sk#30]

(58) ColumnarToRow [codegen id : 13]
Input [3]: [ss_sold_time_sk#28, ss_hdemo_sk#29, ss_store_sk#30]

(59) ReusedExchange [Reuses operator id: 9]
Output [1]: [hd_demo_sk#32]

(60) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_hdemo_sk#29]
Right keys [1]: [hd_demo_sk#32]
Join type: Inner
Join condition: None

(61) Project [codegen id : 13]
Output [2]: [ss_sold_time_sk#28, ss_store_sk#30]
Input [4]: [ss_sold_time_sk#28, ss_hdemo_sk#29, ss_store_sk#30, hd_demo_sk#32]

(unknown) Scan parquet spark_catalog.default.time_dim
Output [3]: [t_time_sk#33, t_hour#34, t_minute#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/time_dim]
PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,9), GreaterThanOrEqual(t_minute,30), IsNotNull(t_time_sk)]
ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>

(63) CometFilter
Input [3]: [t_time_sk#33, t_hour#34, t_minute#35]
Condition : ((((isnotnull(t_hour#34) AND isnotnull(t_minute#35)) AND (t_hour#34 = 9)) AND (t_minute#35 >= 30)) AND isnotnull(t_time_sk#33))

(64) CometProject
Input [3]: [t_time_sk#33, t_hour#34, t_minute#35]
Arguments: [t_time_sk#33], [t_time_sk#33]

(65) ColumnarToRow [codegen id : 11]
Input [1]: [t_time_sk#33]

(66) BroadcastExchange
Input [1]: [t_time_sk#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

(67) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_time_sk#28]
Right keys [1]: [t_time_sk#33]
Join type: Inner
Join condition: None

(68) Project [codegen id : 13]
Output [1]: [ss_store_sk#30]
Input [3]: [ss_sold_time_sk#28, ss_store_sk#30, t_time_sk#33]

(69) ReusedExchange [Reuses operator id: 23]
Output [1]: [s_store_sk#36]

(70) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_store_sk#30]
Right keys [1]: [s_store_sk#36]
Join type: Inner
Join condition: None

(71) Project [codegen id : 13]
Output: []
Input [2]: [ss_store_sk#30, s_store_sk#36]

(72) HashAggregate [codegen id : 13]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#37]
Results [1]: [count#38]

(73) RowToColumnar
Input [1]: [count#38]

(74) CometColumnarExchange
Input [1]: [count#38]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(75) CometHashAggregate
Input [1]: [count#38]
Keys: []
Functions [1]: [count(1)]

(76) ColumnarToRow [codegen id : 14]
Input [1]: [h9_30_to_10#39]

(77) BroadcastExchange
Input [1]: [h9_30_to_10#39]
Arguments: IdentityBroadcastMode, [plan_id=10]

(78) BroadcastNestedLoopJoin [codegen id : 40]
Join type: Inner
Join condition: None

(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_sold_time_sk#40, ss_hdemo_sk#41, ss_store_sk#42, ss_sold_date_sk#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>

(80) CometFilter
Input [4]: [ss_sold_time_sk#40, ss_hdemo_sk#41, ss_store_sk#42, ss_sold_date_sk#43]
Condition : ((isnotnull(ss_hdemo_sk#41) AND isnotnull(ss_sold_time_sk#40)) AND isnotnull(ss_store_sk#42))

(81) CometProject
Input [4]: [ss_sold_time_sk#40, ss_hdemo_sk#41, ss_store_sk#42, ss_sold_date_sk#43]
Arguments: [ss_sold_time_sk#40, ss_hdemo_sk#41, ss_store_sk#42], [ss_sold_time_sk#40, ss_hdemo_sk#41, ss_store_sk#42]

(82) ColumnarToRow [codegen id : 18]
Input [3]: [ss_sold_time_sk#40, ss_hdemo_sk#41, ss_store_sk#42]

(83) ReusedExchange [Reuses operator id: 9]
Output [1]: [hd_demo_sk#44]

(84) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [ss_hdemo_sk#41]
Right keys [1]: [hd_demo_sk#44]
Join type: Inner
Join condition: None

(85) Project [codegen id : 18]
Output [2]: [ss_sold_time_sk#40, ss_store_sk#42]
Input [4]: [ss_sold_time_sk#40, ss_hdemo_sk#41, ss_store_sk#42, hd_demo_sk#44]

(unknown) Scan parquet spark_catalog.default.time_dim
Output [3]: [t_time_sk#45, t_hour#46, t_minute#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/time_dim]
PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,10), LessThan(t_minute,30), IsNotNull(t_time_sk)]
ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>

(87) CometFilter
Input [3]: [t_time_sk#45, t_hour#46, t_minute#47]
Condition : ((((isnotnull(t_hour#46) AND isnotnull(t_minute#47)) AND (t_hour#46 = 10)) AND (t_minute#47 < 30)) AND isnotnull(t_time_sk#45))

(88) CometProject
Input [3]: [t_time_sk#45, t_hour#46, t_minute#47]
Arguments: [t_time_sk#45], [t_time_sk#45]

(89) ColumnarToRow [codegen id : 16]
Input [1]: [t_time_sk#45]

(90) BroadcastExchange
Input [1]: [t_time_sk#45]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

(91) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [ss_sold_time_sk#40]
Right keys [1]: [t_time_sk#45]
Join type: Inner
Join condition: None

(92) Project [codegen id : 18]
Output [1]: [ss_store_sk#42]
Input [3]: [ss_sold_time_sk#40, ss_store_sk#42, t_time_sk#45]

(93) ReusedExchange [Reuses operator id: 23]
Output [1]: [s_store_sk#48]

(94) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [ss_store_sk#42]
Right keys [1]: [s_store_sk#48]
Join type: Inner
Join condition: None

(95) Project [codegen id : 18]
Output: []
Input [2]: [ss_store_sk#42, s_store_sk#48]

(96) HashAggregate [codegen id : 18]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#49]
Results [1]: [count#50]

(97) RowToColumnar
Input [1]: [count#50]

(98) CometColumnarExchange
Input [1]: [count#50]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=12]

(99) CometHashAggregate
Input [1]: [count#50]
Keys: []
Functions [1]: [count(1)]

(100) ColumnarToRow [codegen id : 19]
Input [1]: [h10_to_10_30#51]

(101) BroadcastExchange
Input [1]: [h10_to_10_30#51]
Arguments: IdentityBroadcastMode, [plan_id=13]

(102) BroadcastNestedLoopJoin [codegen id : 40]
Join type: Inner
Join condition: None

(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_sold_time_sk#52, ss_hdemo_sk#53, ss_store_sk#54, ss_sold_date_sk#55]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>

(104) CometFilter
Input [4]: [ss_sold_time_sk#52, ss_hdemo_sk#53, ss_store_sk#54, ss_sold_date_sk#55]
Condition : ((isnotnull(ss_hdemo_sk#53) AND isnotnull(ss_sold_time_sk#52)) AND isnotnull(ss_store_sk#54))

(105) CometProject
Input [4]: [ss_sold_time_sk#52, ss_hdemo_sk#53, ss_store_sk#54, ss_sold_date_sk#55]
Arguments: [ss_sold_time_sk#52, ss_hdemo_sk#53, ss_store_sk#54], [ss_sold_time_sk#52, ss_hdemo_sk#53, ss_store_sk#54]

(106) ColumnarToRow [codegen id : 23]
Input [3]: [ss_sold_time_sk#52, ss_hdemo_sk#53, ss_store_sk#54]

(107) ReusedExchange [Reuses operator id: 9]
Output [1]: [hd_demo_sk#56]

(108) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ss_hdemo_sk#53]
Right keys [1]: [hd_demo_sk#56]
Join type: Inner
Join condition: None

(109) Project [codegen id : 23]
Output [2]: [ss_sold_time_sk#52, ss_store_sk#54]
Input [4]: [ss_sold_time_sk#52, ss_hdemo_sk#53, ss_store_sk#54, hd_demo_sk#56]

(unknown) Scan parquet spark_catalog.default.time_dim
Output [3]: [t_time_sk#57, t_hour#58, t_minute#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/time_dim]
PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,10), GreaterThanOrEqual(t_minute,30), IsNotNull(t_time_sk)]
ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>

(111) CometFilter
Input [3]: [t_time_sk#57, t_hour#58, t_minute#59]
Condition : ((((isnotnull(t_hour#58) AND isnotnull(t_minute#59)) AND (t_hour#58 = 10)) AND (t_minute#59 >= 30)) AND isnotnull(t_time_sk#57))

(112) CometProject
Input [3]: [t_time_sk#57, t_hour#58, t_minute#59]
Arguments: [t_time_sk#57], [t_time_sk#57]

(113) ColumnarToRow [codegen id : 21]
Input [1]: [t_time_sk#57]

(114) BroadcastExchange
Input [1]: [t_time_sk#57]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

(115) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ss_sold_time_sk#52]
Right keys [1]: [t_time_sk#57]
Join type: Inner
Join condition: None

(116) Project [codegen id : 23]
Output [1]: [ss_store_sk#54]
Input [3]: [ss_sold_time_sk#52, ss_store_sk#54, t_time_sk#57]

(117) ReusedExchange [Reuses operator id: 23]
Output [1]: [s_store_sk#60]

(118) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ss_store_sk#54]
Right keys [1]: [s_store_sk#60]
Join type: Inner
Join condition: None

(119) Project [codegen id : 23]
Output: []
Input [2]: [ss_store_sk#54, s_store_sk#60]

(120) HashAggregate [codegen id : 23]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#61]
Results [1]: [count#62]

(121) RowToColumnar
Input [1]: [count#62]

(122) CometColumnarExchange
Input [1]: [count#62]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=15]

(123) CometHashAggregate
Input [1]: [count#62]
Keys: []
Functions [1]: [count(1)]

(124) ColumnarToRow [codegen id : 24]
Input [1]: [h10_30_to_11#63]

(125) BroadcastExchange
Input [1]: [h10_30_to_11#63]
Arguments: IdentityBroadcastMode, [plan_id=16]

(126) BroadcastNestedLoopJoin [codegen id : 40]
Join type: Inner
Join condition: None

(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_sold_time_sk#64, ss_hdemo_sk#65, ss_store_sk#66, ss_sold_date_sk#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>

(128) CometFilter
Input [4]: [ss_sold_time_sk#64, ss_hdemo_sk#65, ss_store_sk#66, ss_sold_date_sk#67]
Condition : ((isnotnull(ss_hdemo_sk#65) AND isnotnull(ss_sold_time_sk#64)) AND isnotnull(ss_store_sk#66))

(129) CometProject
Input [4]: [ss_sold_time_sk#64, ss_hdemo_sk#65, ss_store_sk#66, ss_sold_date_sk#67]
Arguments: [ss_sold_time_sk#64, ss_hdemo_sk#65, ss_store_sk#66], [ss_sold_time_sk#64, ss_hdemo_sk#65, ss_store_sk#66]

(130) ColumnarToRow [codegen id : 28]
Input [3]: [ss_sold_time_sk#64, ss_hdemo_sk#65, ss_store_sk#66]

(131) ReusedExchange [Reuses operator id: 9]
Output [1]: [hd_demo_sk#68]

(132) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ss_hdemo_sk#65]
Right keys [1]: [hd_demo_sk#68]
Join type: Inner
Join condition: None

(133) Project [codegen id : 28]
Output [2]: [ss_sold_time_sk#64, ss_store_sk#66]
Input [4]: [ss_sold_time_sk#64, ss_hdemo_sk#65, ss_store_sk#66, hd_demo_sk#68]

(unknown) Scan parquet spark_catalog.default.time_dim
Output [3]: [t_time_sk#69, t_hour#70, t_minute#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/time_dim]
PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,11), LessThan(t_minute,30), IsNotNull(t_time_sk)]
ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>

(135) CometFilter
Input [3]: [t_time_sk#69, t_hour#70, t_minute#71]
Condition : ((((isnotnull(t_hour#70) AND isnotnull(t_minute#71)) AND (t_hour#70 = 11)) AND (t_minute#71 < 30)) AND isnotnull(t_time_sk#69))

(136) CometProject
Input [3]: [t_time_sk#69, t_hour#70, t_minute#71]
Arguments: [t_time_sk#69], [t_time_sk#69]

(137) ColumnarToRow [codegen id : 26]
Input [1]: [t_time_sk#69]

(138) BroadcastExchange
Input [1]: [t_time_sk#69]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=17]

(139) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ss_sold_time_sk#64]
Right keys [1]: [t_time_sk#69]
Join type: Inner
Join condition: None

(140) Project [codegen id : 28]
Output [1]: [ss_store_sk#66]
Input [3]: [ss_sold_time_sk#64, ss_store_sk#66, t_time_sk#69]

(141) ReusedExchange [Reuses operator id: 23]
Output [1]: [s_store_sk#72]

(142) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ss_store_sk#66]
Right keys [1]: [s_store_sk#72]
Join type: Inner
Join condition: None

(143) Project [codegen id : 28]
Output: []
Input [2]: [ss_store_sk#66, s_store_sk#72]

(144) HashAggregate [codegen id : 28]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#73]
Results [1]: [count#74]

(145) RowToColumnar
Input [1]: [count#74]

(146) CometColumnarExchange
Input [1]: [count#74]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=18]

(147) CometHashAggregate
Input [1]: [count#74]
Keys: []
Functions [1]: [count(1)]

(148) ColumnarToRow [codegen id : 29]
Input [1]: [h11_to_11_30#75]

(149) BroadcastExchange
Input [1]: [h11_to_11_30#75]
Arguments: IdentityBroadcastMode, [plan_id=19]

(150) BroadcastNestedLoopJoin [codegen id : 40]
Join type: Inner
Join condition: None

(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_sold_time_sk#76, ss_hdemo_sk#77, ss_store_sk#78, ss_sold_date_sk#79]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>

(152) CometFilter
Input [4]: [ss_sold_time_sk#76, ss_hdemo_sk#77, ss_store_sk#78, ss_sold_date_sk#79]
Condition : ((isnotnull(ss_hdemo_sk#77) AND isnotnull(ss_sold_time_sk#76)) AND isnotnull(ss_store_sk#78))

(153) CometProject
Input [4]: [ss_sold_time_sk#76, ss_hdemo_sk#77, ss_store_sk#78, ss_sold_date_sk#79]
Arguments: [ss_sold_time_sk#76, ss_hdemo_sk#77, ss_store_sk#78], [ss_sold_time_sk#76, ss_hdemo_sk#77, ss_store_sk#78]

(154) ColumnarToRow [codegen id : 33]
Input [3]: [ss_sold_time_sk#76, ss_hdemo_sk#77, ss_store_sk#78]

(155) ReusedExchange [Reuses operator id: 9]
Output [1]: [hd_demo_sk#80]

(156) BroadcastHashJoin [codegen id : 33]
Left keys [1]: [ss_hdemo_sk#77]
Right keys [1]: [hd_demo_sk#80]
Join type: Inner
Join condition: None

(157) Project [codegen id : 33]
Output [2]: [ss_sold_time_sk#76, ss_store_sk#78]
Input [4]: [ss_sold_time_sk#76, ss_hdemo_sk#77, ss_store_sk#78, hd_demo_sk#80]

(unknown) Scan parquet spark_catalog.default.time_dim
Output [3]: [t_time_sk#81, t_hour#82, t_minute#83]
Batched: true
Location [not included in comparison]/{warehouse_dir}/time_dim]
PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,11), GreaterThanOrEqual(t_minute,30), IsNotNull(t_time_sk)]
ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>

(159) CometFilter
Input [3]: [t_time_sk#81, t_hour#82, t_minute#83]
Condition : ((((isnotnull(t_hour#82) AND isnotnull(t_minute#83)) AND (t_hour#82 = 11)) AND (t_minute#83 >= 30)) AND isnotnull(t_time_sk#81))

(160) CometProject
Input [3]: [t_time_sk#81, t_hour#82, t_minute#83]
Arguments: [t_time_sk#81], [t_time_sk#81]

(161) ColumnarToRow [codegen id : 31]
Input [1]: [t_time_sk#81]

(162) BroadcastExchange
Input [1]: [t_time_sk#81]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=20]

(163) BroadcastHashJoin [codegen id : 33]
Left keys [1]: [ss_sold_time_sk#76]
Right keys [1]: [t_time_sk#81]
Join type: Inner
Join condition: None

(164) Project [codegen id : 33]
Output [1]: [ss_store_sk#78]
Input [3]: [ss_sold_time_sk#76, ss_store_sk#78, t_time_sk#81]

(165) ReusedExchange [Reuses operator id: 23]
Output [1]: [s_store_sk#84]

(166) BroadcastHashJoin [codegen id : 33]
Left keys [1]: [ss_store_sk#78]
Right keys [1]: [s_store_sk#84]
Join type: Inner
Join condition: None

(167) Project [codegen id : 33]
Output: []
Input [2]: [ss_store_sk#78, s_store_sk#84]

(168) HashAggregate [codegen id : 33]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#85]
Results [1]: [count#86]

(169) RowToColumnar
Input [1]: [count#86]

(170) CometColumnarExchange
Input [1]: [count#86]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=21]

(171) CometHashAggregate
Input [1]: [count#86]
Keys: []
Functions [1]: [count(1)]

(172) ColumnarToRow [codegen id : 34]
Input [1]: [h11_30_to_12#87]

(173) BroadcastExchange
Input [1]: [h11_30_to_12#87]
Arguments: IdentityBroadcastMode, [plan_id=22]

(174) BroadcastNestedLoopJoin [codegen id : 40]
Join type: Inner
Join condition: None

(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_sold_time_sk#88, ss_hdemo_sk#89, ss_store_sk#90, ss_sold_date_sk#91]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>

(176) CometFilter
Input [4]: [ss_sold_time_sk#88, ss_hdemo_sk#89, ss_store_sk#90, ss_sold_date_sk#91]
Condition : ((isnotnull(ss_hdemo_sk#89) AND isnotnull(ss_sold_time_sk#88)) AND isnotnull(ss_store_sk#90))

(177) CometProject
Input [4]: [ss_sold_time_sk#88, ss_hdemo_sk#89, ss_store_sk#90, ss_sold_date_sk#91]
Arguments: [ss_sold_time_sk#88, ss_hdemo_sk#89, ss_store_sk#90], [ss_sold_time_sk#88, ss_hdemo_sk#89, ss_store_sk#90]

(178) ColumnarToRow [codegen id : 38]
Input [3]: [ss_sold_time_sk#88, ss_hdemo_sk#89, ss_store_sk#90]

(179) ReusedExchange [Reuses operator id: 9]
Output [1]: [hd_demo_sk#92]

(180) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [ss_hdemo_sk#89]
Right keys [1]: [hd_demo_sk#92]
Join type: Inner
Join condition: None

(181) Project [codegen id : 38]
Output [2]: [ss_sold_time_sk#88, ss_store_sk#90]
Input [4]: [ss_sold_time_sk#88, ss_hdemo_sk#89, ss_store_sk#90, hd_demo_sk#92]

(unknown) Scan parquet spark_catalog.default.time_dim
Output [3]: [t_time_sk#93, t_hour#94, t_minute#95]
Batched: true
Location [not included in comparison]/{warehouse_dir}/time_dim]
PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,12), LessThan(t_minute,30), IsNotNull(t_time_sk)]
ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>

(183) CometFilter
Input [3]: [t_time_sk#93, t_hour#94, t_minute#95]
Condition : ((((isnotnull(t_hour#94) AND isnotnull(t_minute#95)) AND (t_hour#94 = 12)) AND (t_minute#95 < 30)) AND isnotnull(t_time_sk#93))

(184) CometProject
Input [3]: [t_time_sk#93, t_hour#94, t_minute#95]
Arguments: [t_time_sk#93], [t_time_sk#93]

(185) ColumnarToRow [codegen id : 36]
Input [1]: [t_time_sk#93]

(186) BroadcastExchange
Input [1]: [t_time_sk#93]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=23]

(187) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [ss_sold_time_sk#88]
Right keys [1]: [t_time_sk#93]
Join type: Inner
Join condition: None

(188) Project [codegen id : 38]
Output [1]: [ss_store_sk#90]
Input [3]: [ss_sold_time_sk#88, ss_store_sk#90, t_time_sk#93]

(189) ReusedExchange [Reuses operator id: 23]
Output [1]: [s_store_sk#96]

(190) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [ss_store_sk#90]
Right keys [1]: [s_store_sk#96]
Join type: Inner
Join condition: None

(191) Project [codegen id : 38]
Output: []
Input [2]: [ss_store_sk#90, s_store_sk#96]

(192) HashAggregate [codegen id : 38]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#97]
Results [1]: [count#98]

(193) RowToColumnar
Input [1]: [count#98]

(194) CometColumnarExchange
Input [1]: [count#98]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=24]

(195) CometHashAggregate
Input [1]: [count#98]
Keys: []
Functions [1]: [count(1)]

(196) ColumnarToRow [codegen id : 39]
Input [1]: [h12_to_12_30#99]

(197) BroadcastExchange
Input [1]: [h12_to_12_30#99]
Arguments: IdentityBroadcastMode, [plan_id=25]

(198) BroadcastNestedLoopJoin [codegen id : 40]
Join type: Inner
Join condition: None

