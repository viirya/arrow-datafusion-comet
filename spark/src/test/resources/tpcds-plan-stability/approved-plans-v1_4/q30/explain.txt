== Physical Plan ==
TakeOrderedAndProject (55)
+- * Project (54)
   +- * BroadcastHashJoin Inner BuildRight (53)
      :- * Project (47)
      :  +- * BroadcastHashJoin Inner BuildRight (46)
      :     :- * Project (41)
      :     :  +- * BroadcastHashJoin Inner BuildRight (40)
      :     :     :- * Filter (18)
      :     :     :  +- * HashAggregate (17)
      :     :     :     +- * ColumnarToRow (16)
      :     :     :        +- CometColumnarExchange (15)
      :     :     :           +- RowToColumnar (14)
      :     :     :              +- * HashAggregate (13)
      :     :     :                 +- * Project (12)
      :     :     :                    +- * BroadcastHashJoin Inner BuildRight (11)
      :     :     :                       :- * Project (6)
      :     :     :                       :  +- * BroadcastHashJoin Inner BuildRight (5)
      :     :     :                       :     :- * ColumnarToRow (3)
      :     :     :                       :     :  +- CometFilter (2)
      :     :     :                       :     :     +- CometScan parquet spark_catalog.default.web_returns (1)
      :     :     :                       :     +- ReusedExchange (4)
      :     :     :                       +- BroadcastExchange (10)
      :     :     :                          +- * ColumnarToRow (9)
      :     :     :                             +- CometFilter (8)
      :     :     :                                +- CometScan parquet spark_catalog.default.customer_address (7)
      :     :     +- BroadcastExchange (39)
      :     :        +- * Filter (38)
      :     :           +- * HashAggregate (37)
      :     :              +- * ColumnarToRow (36)
      :     :                 +- CometColumnarExchange (35)
      :     :                    +- RowToColumnar (34)
      :     :                       +- * HashAggregate (33)
      :     :                          +- * HashAggregate (32)
      :     :                             +- * ColumnarToRow (31)
      :     :                                +- CometColumnarExchange (30)
      :     :                                   +- RowToColumnar (29)
      :     :                                      +- * HashAggregate (28)
      :     :                                         +- * Project (27)
      :     :                                            +- * BroadcastHashJoin Inner BuildRight (26)
      :     :                                               :- * Project (24)
      :     :                                               :  +- * BroadcastHashJoin Inner BuildRight (23)
      :     :                                               :     :- * ColumnarToRow (21)
      :     :                                               :     :  +- CometFilter (20)
      :     :                                               :     :     +- CometScan parquet spark_catalog.default.web_returns (19)
      :     :                                               :     +- ReusedExchange (22)
      :     :                                               +- ReusedExchange (25)
      :     +- BroadcastExchange (45)
      :        +- * ColumnarToRow (44)
      :           +- CometFilter (43)
      :              +- CometScan parquet spark_catalog.default.customer (42)
      +- BroadcastExchange (52)
         +- * ColumnarToRow (51)
            +- CometProject (50)
               +- CometFilter (49)
                  +- CometScan parquet spark_catalog.default.customer_address (48)


(unknown) Scan parquet spark_catalog.default.web_returns
Output [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#4), dynamicpruningexpression(wr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(wr_returning_addr_sk), IsNotNull(wr_returning_customer_sk)]
ReadSchema: struct<wr_returning_customer_sk:int,wr_returning_addr_sk:int,wr_return_amt:decimal(7,2)>

(2) CometFilter
Input [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Condition : (isnotnull(wr_returning_addr_sk#2) AND isnotnull(wr_returning_customer_sk#1))

(3) ColumnarToRow [codegen id : 3]
Input [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]

(4) ReusedExchange [Reuses operator id: 60]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [wr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(6) Project [codegen id : 3]
Output [3]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3]
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4, d_date_sk#6]

(unknown) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#7, ca_state#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(8) CometFilter
Input [2]: [ca_address_sk#7, ca_state#8]
Condition : (isnotnull(ca_address_sk#7) AND isnotnull(ca_state#8))

(9) ColumnarToRow [codegen id : 2]
Input [2]: [ca_address_sk#7, ca_state#8]

(10) BroadcastExchange
Input [2]: [ca_address_sk#7, ca_state#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [wr_returning_addr_sk#2]
Right keys [1]: [ca_address_sk#7]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#8]
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, ca_address_sk#7, ca_state#8]

(13) HashAggregate [codegen id : 3]
Input [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#8]
Keys [2]: [wr_returning_customer_sk#1, ca_state#8]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#3))]
Aggregate Attributes [1]: [sum#9]
Results [3]: [wr_returning_customer_sk#1, ca_state#8, sum#10]

(14) RowToColumnar
Input [3]: [wr_returning_customer_sk#1, ca_state#8, sum#10]

(15) CometColumnarExchange
Input [3]: [wr_returning_customer_sk#1, ca_state#8, sum#10]
Arguments: hashpartitioning(wr_returning_customer_sk#1, ca_state#8, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(16) ColumnarToRow [codegen id : 11]
Input [3]: [wr_returning_customer_sk#1, ca_state#8, sum#10]

(17) HashAggregate [codegen id : 11]
Input [3]: [wr_returning_customer_sk#1, ca_state#8, sum#10]
Keys [2]: [wr_returning_customer_sk#1, ca_state#8]
Functions [1]: [sum(UnscaledValue(wr_return_amt#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(wr_return_amt#3))#11]
Results [3]: [wr_returning_customer_sk#1 AS ctr_customer_sk#12, ca_state#8 AS ctr_state#13, MakeDecimal(sum(UnscaledValue(wr_return_amt#3))#11,17,2) AS ctr_total_return#14]

(18) Filter [codegen id : 11]
Input [3]: [ctr_customer_sk#12, ctr_state#13, ctr_total_return#14]
Condition : isnotnull(ctr_total_return#14)

(unknown) Scan parquet spark_catalog.default.web_returns
Output [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#4), dynamicpruningexpression(wr_returned_date_sk#4 IN dynamicpruning#15)]
PushedFilters: [IsNotNull(wr_returning_addr_sk)]
ReadSchema: struct<wr_returning_customer_sk:int,wr_returning_addr_sk:int,wr_return_amt:decimal(7,2)>

(20) CometFilter
Input [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Condition : isnotnull(wr_returning_addr_sk#2)

(21) ColumnarToRow [codegen id : 6]
Input [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]

(22) ReusedExchange [Reuses operator id: 60]
Output [1]: [d_date_sk#6]

(23) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [wr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(24) Project [codegen id : 6]
Output [3]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3]
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4, d_date_sk#6]

(25) ReusedExchange [Reuses operator id: 10]
Output [2]: [ca_address_sk#7, ca_state#8]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [wr_returning_addr_sk#2]
Right keys [1]: [ca_address_sk#7]
Join type: Inner
Join condition: None

(27) Project [codegen id : 6]
Output [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#8]
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, ca_address_sk#7, ca_state#8]

(28) HashAggregate [codegen id : 6]
Input [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#8]
Keys [2]: [wr_returning_customer_sk#1, ca_state#8]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#3))]
Aggregate Attributes [1]: [sum#16]
Results [3]: [wr_returning_customer_sk#1, ca_state#8, sum#17]

(29) RowToColumnar
Input [3]: [wr_returning_customer_sk#1, ca_state#8, sum#17]

(30) CometColumnarExchange
Input [3]: [wr_returning_customer_sk#1, ca_state#8, sum#17]
Arguments: hashpartitioning(wr_returning_customer_sk#1, ca_state#8, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(31) ColumnarToRow [codegen id : 7]
Input [3]: [wr_returning_customer_sk#1, ca_state#8, sum#17]

(32) HashAggregate [codegen id : 7]
Input [3]: [wr_returning_customer_sk#1, ca_state#8, sum#17]
Keys [2]: [wr_returning_customer_sk#1, ca_state#8]
Functions [1]: [sum(UnscaledValue(wr_return_amt#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(wr_return_amt#3))#11]
Results [2]: [ca_state#8 AS ctr_state#13, MakeDecimal(sum(UnscaledValue(wr_return_amt#3))#11,17,2) AS ctr_total_return#14]

(33) HashAggregate [codegen id : 7]
Input [2]: [ctr_state#13, ctr_total_return#14]
Keys [1]: [ctr_state#13]
Functions [1]: [partial_avg(ctr_total_return#14)]
Aggregate Attributes [2]: [sum#18, count#19]
Results [3]: [ctr_state#13, sum#20, count#21]

(34) RowToColumnar
Input [3]: [ctr_state#13, sum#20, count#21]

(35) CometColumnarExchange
Input [3]: [ctr_state#13, sum#20, count#21]
Arguments: hashpartitioning(ctr_state#13, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(36) ColumnarToRow [codegen id : 8]
Input [3]: [ctr_state#13, sum#20, count#21]

(37) HashAggregate [codegen id : 8]
Input [3]: [ctr_state#13, sum#20, count#21]
Keys [1]: [ctr_state#13]
Functions [1]: [avg(ctr_total_return#14)]
Aggregate Attributes [1]: [avg(ctr_total_return#14)#22]
Results [2]: [(avg(ctr_total_return#14)#22 * 1.2) AS (avg(ctr_total_return) * 1.2)#23, ctr_state#13 AS ctr_state#13#24]

(38) Filter [codegen id : 8]
Input [2]: [(avg(ctr_total_return) * 1.2)#23, ctr_state#13#24]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#23)

(39) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#23, ctr_state#13#24]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=5]

(40) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ctr_state#13]
Right keys [1]: [ctr_state#13#24]
Join type: Inner
Join condition: (cast(ctr_total_return#14 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#23)

(41) Project [codegen id : 11]
Output [2]: [ctr_customer_sk#12, ctr_total_return#14]
Input [5]: [ctr_customer_sk#12, ctr_state#13, ctr_total_return#14, (avg(ctr_total_return) * 1.2)#23, ctr_state#13#24]

(unknown) Scan parquet spark_catalog.default.customer
Output [14]: [c_customer_sk#25, c_customer_id#26, c_current_addr_sk#27, c_salutation#28, c_first_name#29, c_last_name#30, c_preferred_cust_flag#31, c_birth_day#32, c_birth_month#33, c_birth_year#34, c_birth_country#35, c_login#36, c_email_address#37, c_last_review_date#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(43) CometFilter
Input [14]: [c_customer_sk#25, c_customer_id#26, c_current_addr_sk#27, c_salutation#28, c_first_name#29, c_last_name#30, c_preferred_cust_flag#31, c_birth_day#32, c_birth_month#33, c_birth_year#34, c_birth_country#35, c_login#36, c_email_address#37, c_last_review_date#38]
Condition : (isnotnull(c_customer_sk#25) AND isnotnull(c_current_addr_sk#27))

(44) ColumnarToRow [codegen id : 9]
Input [14]: [c_customer_sk#25, c_customer_id#26, c_current_addr_sk#27, c_salutation#28, c_first_name#29, c_last_name#30, c_preferred_cust_flag#31, c_birth_day#32, c_birth_month#33, c_birth_year#34, c_birth_country#35, c_login#36, c_email_address#37, c_last_review_date#38]

(45) BroadcastExchange
Input [14]: [c_customer_sk#25, c_customer_id#26, c_current_addr_sk#27, c_salutation#28, c_first_name#29, c_last_name#30, c_preferred_cust_flag#31, c_birth_day#32, c_birth_month#33, c_birth_year#34, c_birth_country#35, c_login#36, c_email_address#37, c_last_review_date#38]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]

(46) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ctr_customer_sk#12]
Right keys [1]: [c_customer_sk#25]
Join type: Inner
Join condition: None

(47) Project [codegen id : 11]
Output [14]: [ctr_total_return#14, c_customer_id#26, c_current_addr_sk#27, c_salutation#28, c_first_name#29, c_last_name#30, c_preferred_cust_flag#31, c_birth_day#32, c_birth_month#33, c_birth_year#34, c_birth_country#35, c_login#36, c_email_address#37, c_last_review_date#38]
Input [16]: [ctr_customer_sk#12, ctr_total_return#14, c_customer_sk#25, c_customer_id#26, c_current_addr_sk#27, c_salutation#28, c_first_name#29, c_last_name#30, c_preferred_cust_flag#31, c_birth_day#32, c_birth_month#33, c_birth_year#34, c_birth_country#35, c_login#36, c_email_address#37, c_last_review_date#38]

(unknown) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#39, ca_state#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(49) CometFilter
Input [2]: [ca_address_sk#39, ca_state#40]
Condition : ((isnotnull(ca_state#40) AND (ca_state#40 = GA)) AND isnotnull(ca_address_sk#39))

(50) CometProject
Input [2]: [ca_address_sk#39, ca_state#40]
Arguments: [ca_address_sk#39], [ca_address_sk#39]

(51) ColumnarToRow [codegen id : 10]
Input [1]: [ca_address_sk#39]

(52) BroadcastExchange
Input [1]: [ca_address_sk#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(53) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [c_current_addr_sk#27]
Right keys [1]: [ca_address_sk#39]
Join type: Inner
Join condition: None

(54) Project [codegen id : 11]
Output [13]: [c_customer_id#26, c_salutation#28, c_first_name#29, c_last_name#30, c_preferred_cust_flag#31, c_birth_day#32, c_birth_month#33, c_birth_year#34, c_birth_country#35, c_login#36, c_email_address#37, c_last_review_date#38, ctr_total_return#14]
Input [15]: [ctr_total_return#14, c_customer_id#26, c_current_addr_sk#27, c_salutation#28, c_first_name#29, c_last_name#30, c_preferred_cust_flag#31, c_birth_day#32, c_birth_month#33, c_birth_year#34, c_birth_country#35, c_login#36, c_email_address#37, c_last_review_date#38, ca_address_sk#39]

(55) TakeOrderedAndProject
Input [13]: [c_customer_id#26, c_salutation#28, c_first_name#29, c_last_name#30, c_preferred_cust_flag#31, c_birth_day#32, c_birth_month#33, c_birth_year#34, c_birth_country#35, c_login#36, c_email_address#37, c_last_review_date#38, ctr_total_return#14]
Arguments: 100, [c_customer_id#26 ASC NULLS FIRST, c_salutation#28 ASC NULLS FIRST, c_first_name#29 ASC NULLS FIRST, c_last_name#30 ASC NULLS FIRST, c_preferred_cust_flag#31 ASC NULLS FIRST, c_birth_day#32 ASC NULLS FIRST, c_birth_month#33 ASC NULLS FIRST, c_birth_year#34 ASC NULLS FIRST, c_birth_country#35 ASC NULLS FIRST, c_login#36 ASC NULLS FIRST, c_email_address#37 ASC NULLS FIRST, c_last_review_date#38 ASC NULLS FIRST, ctr_total_return#14 ASC NULLS FIRST], [c_customer_id#26, c_salutation#28, c_first_name#29, c_last_name#30, c_preferred_cust_flag#31, c_birth_day#32, c_birth_month#33, c_birth_year#34, c_birth_country#35, c_login#36, c_email_address#37, c_last_review_date#38, ctr_total_return#14]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = wr_returned_date_sk#4 IN dynamicpruning#5
BroadcastExchange (60)
+- * ColumnarToRow (59)
   +- CometProject (58)
      +- CometFilter (57)
         +- CometScan parquet spark_catalog.default.date_dim (56)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_year#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(57) CometFilter
Input [2]: [d_date_sk#6, d_year#41]
Condition : ((isnotnull(d_year#41) AND (d_year#41 = 2002)) AND isnotnull(d_date_sk#6))

(58) CometProject
Input [2]: [d_date_sk#6, d_year#41]
Arguments: [d_date_sk#6], [d_date_sk#6]

(59) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#6]

(60) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 19 Hosting Expression = wr_returned_date_sk#4 IN dynamicpruning#5


