== Physical Plan ==
TakeOrderedAndProject (53)
+- * Project (52)
   +- * BroadcastHashJoin Inner BuildRight (51)
      :- * Project (45)
      :  +- * BroadcastHashJoin Inner BuildRight (44)
      :     :- * Project (39)
      :     :  +- * BroadcastHashJoin Inner BuildRight (38)
      :     :     :- * ColumnarToRow (18)
      :     :     :  +- CometFilter (17)
      :     :     :     +- CometHashAggregate (16)
      :     :     :        +- CometColumnarExchange (15)
      :     :     :           +- RowToColumnar (14)
      :     :     :              +- * HashAggregate (13)
      :     :     :                 +- * Project (12)
      :     :     :                    +- * BroadcastHashJoin Inner BuildRight (11)
      :     :     :                       :- * Project (6)
      :     :     :                       :  +- * BroadcastHashJoin Inner BuildRight (5)
      :     :     :                       :     :- * ColumnarToRow (3)
      :     :     :                       :     :  +- CometFilter (2)
      :     :     :                       :     :     +- CometScan parquet spark_catalog.default.web_returns (1)
      :     :     :                       :     +- ReusedExchange (4)
      :     :     :                       +- BroadcastExchange (10)
      :     :     :                          +- * ColumnarToRow (9)
      :     :     :                             +- CometFilter (8)
      :     :     :                                +- CometScan parquet spark_catalog.default.customer_address (7)
      :     :     +- BroadcastExchange (37)
      :     :        +- * ColumnarToRow (36)
      :     :           +- CometFilter (35)
      :     :              +- CometHashAggregate (34)
      :     :                 +- CometColumnarExchange (33)
      :     :                    +- CometHashAggregate (32)
      :     :                       +- CometHashAggregate (31)
      :     :                          +- CometColumnarExchange (30)
      :     :                             +- RowToColumnar (29)
      :     :                                +- * HashAggregate (28)
      :     :                                   +- * Project (27)
      :     :                                      +- * BroadcastHashJoin Inner BuildRight (26)
      :     :                                         :- * Project (24)
      :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (23)
      :     :                                         :     :- * ColumnarToRow (21)
      :     :                                         :     :  +- CometFilter (20)
      :     :                                         :     :     +- CometScan parquet spark_catalog.default.web_returns (19)
      :     :                                         :     +- ReusedExchange (22)
      :     :                                         +- ReusedExchange (25)
      :     +- BroadcastExchange (43)
      :        +- * ColumnarToRow (42)
      :           +- CometFilter (41)
      :              +- CometScan parquet spark_catalog.default.customer (40)
      +- BroadcastExchange (50)
         +- * ColumnarToRow (49)
            +- CometProject (48)
               +- CometFilter (47)
                  +- CometScan parquet spark_catalog.default.customer_address (46)


(unknown) Scan parquet spark_catalog.default.web_returns
Output [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#4), dynamicpruningexpression(wr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(wr_returning_addr_sk), IsNotNull(wr_returning_customer_sk)]
ReadSchema: struct<wr_returning_customer_sk:int,wr_returning_addr_sk:int,wr_return_amt:decimal(7,2)>

(2) CometFilter
Input [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Condition : (isnotnull(wr_returning_addr_sk#2) AND isnotnull(wr_returning_customer_sk#1))

(3) ColumnarToRow [codegen id : 3]
Input [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]

(4) ReusedExchange [Reuses operator id: 58]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [wr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(6) Project [codegen id : 3]
Output [3]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3]
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4, d_date_sk#6]

(unknown) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#7, ca_state#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(8) CometFilter
Input [2]: [ca_address_sk#7, ca_state#8]
Condition : (isnotnull(ca_address_sk#7) AND isnotnull(ca_state#8))

(9) ColumnarToRow [codegen id : 2]
Input [2]: [ca_address_sk#7, ca_state#8]

(10) BroadcastExchange
Input [2]: [ca_address_sk#7, ca_state#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [wr_returning_addr_sk#2]
Right keys [1]: [ca_address_sk#7]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#8]
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, ca_address_sk#7, ca_state#8]

(13) HashAggregate [codegen id : 3]
Input [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#8]
Keys [2]: [wr_returning_customer_sk#1, ca_state#8]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#3))]
Aggregate Attributes [1]: [sum#9]
Results [3]: [wr_returning_customer_sk#1, ca_state#8, sum#10]

(14) RowToColumnar
Input [3]: [wr_returning_customer_sk#1, ca_state#8, sum#10]

(15) CometColumnarExchange
Input [3]: [wr_returning_customer_sk#1, ca_state#8, sum#10]
Arguments: hashpartitioning(wr_returning_customer_sk#1, ca_state#8, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(16) CometHashAggregate
Input [3]: [wr_returning_customer_sk#1, ca_state#8, sum#10]
Keys [2]: [wr_returning_customer_sk#1, ca_state#8]
Functions [1]: [sum(UnscaledValue(wr_return_amt#3))]

(17) CometFilter
Input [3]: [ctr_customer_sk#11, ctr_state#12, ctr_total_return#13]
Condition : isnotnull(ctr_total_return#13)

(18) ColumnarToRow [codegen id : 10]
Input [3]: [ctr_customer_sk#11, ctr_state#12, ctr_total_return#13]

(unknown) Scan parquet spark_catalog.default.web_returns
Output [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#4), dynamicpruningexpression(wr_returned_date_sk#4 IN dynamicpruning#14)]
PushedFilters: [IsNotNull(wr_returning_addr_sk)]
ReadSchema: struct<wr_returning_customer_sk:int,wr_returning_addr_sk:int,wr_return_amt:decimal(7,2)>

(20) CometFilter
Input [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Condition : isnotnull(wr_returning_addr_sk#2)

(21) ColumnarToRow [codegen id : 6]
Input [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]

(22) ReusedExchange [Reuses operator id: 58]
Output [1]: [d_date_sk#6]

(23) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [wr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(24) Project [codegen id : 6]
Output [3]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3]
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4, d_date_sk#6]

(25) ReusedExchange [Reuses operator id: 10]
Output [2]: [ca_address_sk#7, ca_state#8]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [wr_returning_addr_sk#2]
Right keys [1]: [ca_address_sk#7]
Join type: Inner
Join condition: None

(27) Project [codegen id : 6]
Output [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#8]
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, ca_address_sk#7, ca_state#8]

(28) HashAggregate [codegen id : 6]
Input [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#8]
Keys [2]: [wr_returning_customer_sk#1, ca_state#8]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#3))]
Aggregate Attributes [1]: [sum#15]
Results [3]: [wr_returning_customer_sk#1, ca_state#8, sum#16]

(29) RowToColumnar
Input [3]: [wr_returning_customer_sk#1, ca_state#8, sum#16]

(30) CometColumnarExchange
Input [3]: [wr_returning_customer_sk#1, ca_state#8, sum#16]
Arguments: hashpartitioning(wr_returning_customer_sk#1, ca_state#8, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(31) CometHashAggregate
Input [3]: [wr_returning_customer_sk#1, ca_state#8, sum#16]
Keys [2]: [wr_returning_customer_sk#1, ca_state#8]
Functions [1]: [sum(UnscaledValue(wr_return_amt#3))]

(32) CometHashAggregate
Input [2]: [ctr_state#12, ctr_total_return#13]
Keys [1]: [ctr_state#12]
Functions [1]: [partial_avg(ctr_total_return#13)]

(33) CometColumnarExchange
Input [3]: [ctr_state#12, sum#17, count#18]
Arguments: hashpartitioning(ctr_state#12, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(34) CometHashAggregate
Input [3]: [ctr_state#12, sum#17, count#18]
Keys [1]: [ctr_state#12]
Functions [1]: [avg(ctr_total_return#13)]

(35) CometFilter
Input [2]: [(avg(ctr_total_return) * 1.2)#19, ctr_state#12#20]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#19)

(36) ColumnarToRow [codegen id : 7]
Input [2]: [(avg(ctr_total_return) * 1.2)#19, ctr_state#12#20]

(37) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#19, ctr_state#12#20]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=5]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ctr_state#12]
Right keys [1]: [ctr_state#12#20]
Join type: Inner
Join condition: (cast(ctr_total_return#13 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#19)

(39) Project [codegen id : 10]
Output [2]: [ctr_customer_sk#11, ctr_total_return#13]
Input [5]: [ctr_customer_sk#11, ctr_state#12, ctr_total_return#13, (avg(ctr_total_return) * 1.2)#19, ctr_state#12#20]

(unknown) Scan parquet spark_catalog.default.customer
Output [14]: [c_customer_sk#21, c_customer_id#22, c_current_addr_sk#23, c_salutation#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_day#28, c_birth_month#29, c_birth_year#30, c_birth_country#31, c_login#32, c_email_address#33, c_last_review_date#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(41) CometFilter
Input [14]: [c_customer_sk#21, c_customer_id#22, c_current_addr_sk#23, c_salutation#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_day#28, c_birth_month#29, c_birth_year#30, c_birth_country#31, c_login#32, c_email_address#33, c_last_review_date#34]
Condition : (isnotnull(c_customer_sk#21) AND isnotnull(c_current_addr_sk#23))

(42) ColumnarToRow [codegen id : 8]
Input [14]: [c_customer_sk#21, c_customer_id#22, c_current_addr_sk#23, c_salutation#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_day#28, c_birth_month#29, c_birth_year#30, c_birth_country#31, c_login#32, c_email_address#33, c_last_review_date#34]

(43) BroadcastExchange
Input [14]: [c_customer_sk#21, c_customer_id#22, c_current_addr_sk#23, c_salutation#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_day#28, c_birth_month#29, c_birth_year#30, c_birth_country#31, c_login#32, c_email_address#33, c_last_review_date#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]

(44) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ctr_customer_sk#11]
Right keys [1]: [c_customer_sk#21]
Join type: Inner
Join condition: None

(45) Project [codegen id : 10]
Output [14]: [ctr_total_return#13, c_customer_id#22, c_current_addr_sk#23, c_salutation#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_day#28, c_birth_month#29, c_birth_year#30, c_birth_country#31, c_login#32, c_email_address#33, c_last_review_date#34]
Input [16]: [ctr_customer_sk#11, ctr_total_return#13, c_customer_sk#21, c_customer_id#22, c_current_addr_sk#23, c_salutation#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_day#28, c_birth_month#29, c_birth_year#30, c_birth_country#31, c_login#32, c_email_address#33, c_last_review_date#34]

(unknown) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#35, ca_state#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(47) CometFilter
Input [2]: [ca_address_sk#35, ca_state#36]
Condition : ((isnotnull(ca_state#36) AND (ca_state#36 = GA)) AND isnotnull(ca_address_sk#35))

(48) CometProject
Input [2]: [ca_address_sk#35, ca_state#36]
Arguments: [ca_address_sk#35], [ca_address_sk#35]

(49) ColumnarToRow [codegen id : 9]
Input [1]: [ca_address_sk#35]

(50) BroadcastExchange
Input [1]: [ca_address_sk#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(51) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_current_addr_sk#23]
Right keys [1]: [ca_address_sk#35]
Join type: Inner
Join condition: None

(52) Project [codegen id : 10]
Output [13]: [c_customer_id#22, c_salutation#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_day#28, c_birth_month#29, c_birth_year#30, c_birth_country#31, c_login#32, c_email_address#33, c_last_review_date#34, ctr_total_return#13]
Input [15]: [ctr_total_return#13, c_customer_id#22, c_current_addr_sk#23, c_salutation#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_day#28, c_birth_month#29, c_birth_year#30, c_birth_country#31, c_login#32, c_email_address#33, c_last_review_date#34, ca_address_sk#35]

(53) TakeOrderedAndProject
Input [13]: [c_customer_id#22, c_salutation#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_day#28, c_birth_month#29, c_birth_year#30, c_birth_country#31, c_login#32, c_email_address#33, c_last_review_date#34, ctr_total_return#13]
Arguments: 100, [c_customer_id#22 ASC NULLS FIRST, c_salutation#24 ASC NULLS FIRST, c_first_name#25 ASC NULLS FIRST, c_last_name#26 ASC NULLS FIRST, c_preferred_cust_flag#27 ASC NULLS FIRST, c_birth_day#28 ASC NULLS FIRST, c_birth_month#29 ASC NULLS FIRST, c_birth_year#30 ASC NULLS FIRST, c_birth_country#31 ASC NULLS FIRST, c_login#32 ASC NULLS FIRST, c_email_address#33 ASC NULLS FIRST, c_last_review_date#34 ASC NULLS FIRST, ctr_total_return#13 ASC NULLS FIRST], [c_customer_id#22, c_salutation#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_day#28, c_birth_month#29, c_birth_year#30, c_birth_country#31, c_login#32, c_email_address#33, c_last_review_date#34, ctr_total_return#13]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = wr_returned_date_sk#4 IN dynamicpruning#5
BroadcastExchange (58)
+- * ColumnarToRow (57)
   +- CometProject (56)
      +- CometFilter (55)
         +- CometScan parquet spark_catalog.default.date_dim (54)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_year#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(55) CometFilter
Input [2]: [d_date_sk#6, d_year#37]
Condition : ((isnotnull(d_year#37) AND (d_year#37 = 2002)) AND isnotnull(d_date_sk#6))

(56) CometProject
Input [2]: [d_date_sk#6, d_year#37]
Arguments: [d_date_sk#6], [d_date_sk#6]

(57) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#6]

(58) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 19 Hosting Expression = wr_returned_date_sk#4 IN dynamicpruning#5


