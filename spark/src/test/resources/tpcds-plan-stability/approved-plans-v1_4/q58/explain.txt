== Physical Plan ==
TakeOrderedAndProject (55)
+- * Project (54)
   +- * BroadcastHashJoin Inner BuildRight (53)
      :- * Project (36)
      :  +- * BroadcastHashJoin Inner BuildRight (35)
      :     :- * ColumnarToRow (18)
      :     :  +- CometFilter (17)
      :     :     +- CometHashAggregate (16)
      :     :        +- CometColumnarExchange (15)
      :     :           +- RowToColumnar (14)
      :     :              +- * HashAggregate (13)
      :     :                 +- * Project (12)
      :     :                    +- * BroadcastHashJoin Inner BuildRight (11)
      :     :                       :- * Project (9)
      :     :                       :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :                       :     :- * ColumnarToRow (3)
      :     :                       :     :  +- CometFilter (2)
      :     :                       :     :     +- CometScan parquet spark_catalog.default.store_sales (1)
      :     :                       :     +- BroadcastExchange (7)
      :     :                       :        +- * ColumnarToRow (6)
      :     :                       :           +- CometFilter (5)
      :     :                       :              +- CometScan parquet spark_catalog.default.item (4)
      :     :                       +- ReusedExchange (10)
      :     +- BroadcastExchange (34)
      :        +- * ColumnarToRow (33)
      :           +- CometFilter (32)
      :              +- CometHashAggregate (31)
      :                 +- CometColumnarExchange (30)
      :                    +- RowToColumnar (29)
      :                       +- * HashAggregate (28)
      :                          +- * Project (27)
      :                             +- * BroadcastHashJoin Inner BuildRight (26)
      :                                :- * Project (24)
      :                                :  +- * BroadcastHashJoin Inner BuildRight (23)
      :                                :     :- * ColumnarToRow (21)
      :                                :     :  +- CometFilter (20)
      :                                :     :     +- CometScan parquet spark_catalog.default.catalog_sales (19)
      :                                :     +- ReusedExchange (22)
      :                                +- ReusedExchange (25)
      +- BroadcastExchange (52)
         +- * ColumnarToRow (51)
            +- CometFilter (50)
               +- CometHashAggregate (49)
                  +- CometColumnarExchange (48)
                     +- RowToColumnar (47)
                        +- * HashAggregate (46)
                           +- * Project (45)
                              +- * BroadcastHashJoin Inner BuildRight (44)
                                 :- * Project (42)
                                 :  +- * BroadcastHashJoin Inner BuildRight (41)
                                 :     :- * ColumnarToRow (39)
                                 :     :  +- CometFilter (38)
                                 :     :     +- CometScan parquet spark_catalog.default.web_sales (37)
                                 :     +- ReusedExchange (40)
                                 +- ReusedExchange (43)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_item_sk#1)

(3) ColumnarToRow [codegen id : 4]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]

(unknown) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#5, i_item_id#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(5) CometFilter
Input [2]: [i_item_sk#5, i_item_id#6]
Condition : (isnotnull(i_item_sk#5) AND isnotnull(i_item_id#6))

(6) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#5, i_item_id#6]

(7) BroadcastExchange
Input [2]: [i_item_sk#5, i_item_id#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#5]
Join type: Inner
Join condition: None

(9) Project [codegen id : 4]
Output [3]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6]
Input [5]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_sk#5, i_item_id#6]

(10) ReusedExchange [Reuses operator id: 66]
Output [1]: [d_date_sk#7]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#7]
Join type: Inner
Join condition: None

(12) Project [codegen id : 4]
Output [2]: [ss_ext_sales_price#2, i_item_id#6]
Input [4]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6, d_date_sk#7]

(13) HashAggregate [codegen id : 4]
Input [2]: [ss_ext_sales_price#2, i_item_id#6]
Keys [1]: [i_item_id#6]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#8]
Results [2]: [i_item_id#6, sum#9]

(14) RowToColumnar
Input [2]: [i_item_id#6, sum#9]

(15) CometColumnarExchange
Input [2]: [i_item_id#6, sum#9]
Arguments: hashpartitioning(i_item_id#6, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(16) CometHashAggregate
Input [2]: [i_item_id#6, sum#9]
Keys [1]: [i_item_id#6]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]

(17) CometFilter
Input [2]: [item_id#10, ss_item_rev#11]
Condition : isnotnull(ss_item_rev#11)

(18) ColumnarToRow [codegen id : 15]
Input [2]: [item_id#10, ss_item_rev#11]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_item_sk#12, cs_ext_sales_price#13, cs_sold_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#14), dynamicpruningexpression(cs_sold_date_sk#14 IN dynamicpruning#15)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(20) CometFilter
Input [3]: [cs_item_sk#12, cs_ext_sales_price#13, cs_sold_date_sk#14]
Condition : isnotnull(cs_item_sk#12)

(21) ColumnarToRow [codegen id : 8]
Input [3]: [cs_item_sk#12, cs_ext_sales_price#13, cs_sold_date_sk#14]

(22) ReusedExchange [Reuses operator id: 7]
Output [2]: [i_item_sk#16, i_item_id#17]

(23) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#12]
Right keys [1]: [i_item_sk#16]
Join type: Inner
Join condition: None

(24) Project [codegen id : 8]
Output [3]: [cs_ext_sales_price#13, cs_sold_date_sk#14, i_item_id#17]
Input [5]: [cs_item_sk#12, cs_ext_sales_price#13, cs_sold_date_sk#14, i_item_sk#16, i_item_id#17]

(25) ReusedExchange [Reuses operator id: 66]
Output [1]: [d_date_sk#18]

(26) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#14]
Right keys [1]: [d_date_sk#18]
Join type: Inner
Join condition: None

(27) Project [codegen id : 8]
Output [2]: [cs_ext_sales_price#13, i_item_id#17]
Input [4]: [cs_ext_sales_price#13, cs_sold_date_sk#14, i_item_id#17, d_date_sk#18]

(28) HashAggregate [codegen id : 8]
Input [2]: [cs_ext_sales_price#13, i_item_id#17]
Keys [1]: [i_item_id#17]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#13))]
Aggregate Attributes [1]: [sum#19]
Results [2]: [i_item_id#17, sum#20]

(29) RowToColumnar
Input [2]: [i_item_id#17, sum#20]

(30) CometColumnarExchange
Input [2]: [i_item_id#17, sum#20]
Arguments: hashpartitioning(i_item_id#17, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(31) CometHashAggregate
Input [2]: [i_item_id#17, sum#20]
Keys [1]: [i_item_id#17]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#13))]

(32) CometFilter
Input [2]: [item_id#21, cs_item_rev#22]
Condition : isnotnull(cs_item_rev#22)

(33) ColumnarToRow [codegen id : 9]
Input [2]: [item_id#21, cs_item_rev#22]

(34) BroadcastExchange
Input [2]: [item_id#21, cs_item_rev#22]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=4]

(35) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [item_id#10]
Right keys [1]: [item_id#21]
Join type: Inner
Join condition: ((((cast(ss_item_rev#11 as decimal(19,3)) >= (0.9 * cs_item_rev#22)) AND (cast(ss_item_rev#11 as decimal(20,3)) <= (1.1 * cs_item_rev#22))) AND (cast(cs_item_rev#22 as decimal(19,3)) >= (0.9 * ss_item_rev#11))) AND (cast(cs_item_rev#22 as decimal(20,3)) <= (1.1 * ss_item_rev#11)))

(36) Project [codegen id : 15]
Output [3]: [item_id#10, ss_item_rev#11, cs_item_rev#22]
Input [4]: [item_id#10, ss_item_rev#11, item_id#21, cs_item_rev#22]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#23, ws_ext_sales_price#24, ws_sold_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#25), dynamicpruningexpression(ws_sold_date_sk#25 IN dynamicpruning#26)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(38) CometFilter
Input [3]: [ws_item_sk#23, ws_ext_sales_price#24, ws_sold_date_sk#25]
Condition : isnotnull(ws_item_sk#23)

(39) ColumnarToRow [codegen id : 13]
Input [3]: [ws_item_sk#23, ws_ext_sales_price#24, ws_sold_date_sk#25]

(40) ReusedExchange [Reuses operator id: 7]
Output [2]: [i_item_sk#27, i_item_id#28]

(41) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [i_item_sk#27]
Join type: Inner
Join condition: None

(42) Project [codegen id : 13]
Output [3]: [ws_ext_sales_price#24, ws_sold_date_sk#25, i_item_id#28]
Input [5]: [ws_item_sk#23, ws_ext_sales_price#24, ws_sold_date_sk#25, i_item_sk#27, i_item_id#28]

(43) ReusedExchange [Reuses operator id: 66]
Output [1]: [d_date_sk#29]

(44) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_sold_date_sk#25]
Right keys [1]: [d_date_sk#29]
Join type: Inner
Join condition: None

(45) Project [codegen id : 13]
Output [2]: [ws_ext_sales_price#24, i_item_id#28]
Input [4]: [ws_ext_sales_price#24, ws_sold_date_sk#25, i_item_id#28, d_date_sk#29]

(46) HashAggregate [codegen id : 13]
Input [2]: [ws_ext_sales_price#24, i_item_id#28]
Keys [1]: [i_item_id#28]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#24))]
Aggregate Attributes [1]: [sum#30]
Results [2]: [i_item_id#28, sum#31]

(47) RowToColumnar
Input [2]: [i_item_id#28, sum#31]

(48) CometColumnarExchange
Input [2]: [i_item_id#28, sum#31]
Arguments: hashpartitioning(i_item_id#28, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(49) CometHashAggregate
Input [2]: [i_item_id#28, sum#31]
Keys [1]: [i_item_id#28]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#24))]

(50) CometFilter
Input [2]: [item_id#32, ws_item_rev#33]
Condition : isnotnull(ws_item_rev#33)

(51) ColumnarToRow [codegen id : 14]
Input [2]: [item_id#32, ws_item_rev#33]

(52) BroadcastExchange
Input [2]: [item_id#32, ws_item_rev#33]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=6]

(53) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [item_id#10]
Right keys [1]: [item_id#32]
Join type: Inner
Join condition: ((((((((cast(ss_item_rev#11 as decimal(19,3)) >= (0.9 * ws_item_rev#33)) AND (cast(ss_item_rev#11 as decimal(20,3)) <= (1.1 * ws_item_rev#33))) AND (cast(cs_item_rev#22 as decimal(19,3)) >= (0.9 * ws_item_rev#33))) AND (cast(cs_item_rev#22 as decimal(20,3)) <= (1.1 * ws_item_rev#33))) AND (cast(ws_item_rev#33 as decimal(19,3)) >= (0.9 * ss_item_rev#11))) AND (cast(ws_item_rev#33 as decimal(20,3)) <= (1.1 * ss_item_rev#11))) AND (cast(ws_item_rev#33 as decimal(19,3)) >= (0.9 * cs_item_rev#22))) AND (cast(ws_item_rev#33 as decimal(20,3)) <= (1.1 * cs_item_rev#22)))

(54) Project [codegen id : 15]
Output [8]: [item_id#10, ss_item_rev#11, (((ss_item_rev#11 / ((ss_item_rev#11 + cs_item_rev#22) + ws_item_rev#33)) / 3) * 100) AS ss_dev#34, cs_item_rev#22, (((cs_item_rev#22 / ((ss_item_rev#11 + cs_item_rev#22) + ws_item_rev#33)) / 3) * 100) AS cs_dev#35, ws_item_rev#33, (((ws_item_rev#33 / ((ss_item_rev#11 + cs_item_rev#22) + ws_item_rev#33)) / 3) * 100) AS ws_dev#36, (((ss_item_rev#11 + cs_item_rev#22) + ws_item_rev#33) / 3) AS average#37]
Input [5]: [item_id#10, ss_item_rev#11, cs_item_rev#22, item_id#32, ws_item_rev#33]

(55) TakeOrderedAndProject
Input [8]: [item_id#10, ss_item_rev#11, ss_dev#34, cs_item_rev#22, cs_dev#35, ws_item_rev#33, ws_dev#36, average#37]
Arguments: 100, [item_id#10 ASC NULLS FIRST, ss_item_rev#11 ASC NULLS FIRST], [item_id#10, ss_item_rev#11, ss_dev#34, cs_item_rev#22, cs_dev#35, ws_item_rev#33, ws_dev#36, average#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (66)
+- * Project (65)
   +- * BroadcastHashJoin LeftSemi BuildRight (64)
      :- * ColumnarToRow (58)
      :  +- CometFilter (57)
      :     +- CometScan parquet spark_catalog.default.date_dim (56)
      +- BroadcastExchange (63)
         +- * ColumnarToRow (62)
            +- CometProject (61)
               +- CometFilter (60)
                  +- CometScan parquet spark_catalog.default.date_dim (59)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_date#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(57) CometFilter
Input [2]: [d_date_sk#7, d_date#38]
Condition : isnotnull(d_date_sk#7)

(58) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#7, d_date#38]

(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date#39, d_week_seq#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(60) CometFilter
Input [2]: [d_date#39, d_week_seq#40]
Condition : (isnotnull(d_week_seq#40) AND (d_week_seq#40 = Subquery scalar-subquery#41, [id=#42]))

(61) CometProject
Input [2]: [d_date#39, d_week_seq#40]
Arguments: [d_date#39], [d_date#39]

(62) ColumnarToRow [codegen id : 1]
Input [1]: [d_date#39]

(63) BroadcastExchange
Input [1]: [d_date#39]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [plan_id=7]

(64) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [d_date#38]
Right keys [1]: [d_date#39]
Join type: LeftSemi
Join condition: None

(65) Project [codegen id : 2]
Output [1]: [d_date_sk#7]
Input [2]: [d_date_sk#7, d_date#38]

(66) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 60 Hosting Expression = Subquery scalar-subquery#41, [id=#42]
* ColumnarToRow (70)
+- CometProject (69)
   +- CometFilter (68)
      +- CometScan parquet spark_catalog.default.date_dim (67)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date#43, d_week_seq#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(68) CometFilter
Input [2]: [d_date#43, d_week_seq#44]
Condition : (isnotnull(d_date#43) AND (d_date#43 = 2000-01-03))

(69) CometProject
Input [2]: [d_date#43, d_week_seq#44]
Arguments: [d_week_seq#44], [d_week_seq#44]

(70) ColumnarToRow [codegen id : 1]
Input [1]: [d_week_seq#44]

Subquery:3 Hosting operator id = 19 Hosting Expression = cs_sold_date_sk#14 IN dynamicpruning#4

Subquery:4 Hosting operator id = 37 Hosting Expression = ws_sold_date_sk#25 IN dynamicpruning#4


