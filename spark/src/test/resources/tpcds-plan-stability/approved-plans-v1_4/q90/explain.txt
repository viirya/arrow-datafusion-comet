== Physical Plan ==
* Project (55)
+- * BroadcastNestedLoopJoin Inner BuildRight (54)
   :- * ColumnarToRow (30)
   :  +- CometHashAggregate (29)
   :     +- CometColumnarExchange (28)
   :        +- RowToColumnar (27)
   :           +- * HashAggregate (26)
   :              +- * Project (25)
   :                 +- * BroadcastHashJoin Inner BuildRight (24)
   :                    :- * Project (18)
   :                    :  +- * BroadcastHashJoin Inner BuildRight (17)
   :                    :     :- * Project (11)
   :                    :     :  +- * BroadcastHashJoin Inner BuildRight (10)
   :                    :     :     :- * ColumnarToRow (4)
   :                    :     :     :  +- CometProject (3)
   :                    :     :     :     +- CometFilter (2)
   :                    :     :     :        +- CometScan parquet spark_catalog.default.web_sales (1)
   :                    :     :     +- BroadcastExchange (9)
   :                    :     :        +- * ColumnarToRow (8)
   :                    :     :           +- CometProject (7)
   :                    :     :              +- CometFilter (6)
   :                    :     :                 +- CometScan parquet spark_catalog.default.household_demographics (5)
   :                    :     +- BroadcastExchange (16)
   :                    :        +- * ColumnarToRow (15)
   :                    :           +- CometProject (14)
   :                    :              +- CometFilter (13)
   :                    :                 +- CometScan parquet spark_catalog.default.time_dim (12)
   :                    +- BroadcastExchange (23)
   :                       +- * ColumnarToRow (22)
   :                          +- CometProject (21)
   :                             +- CometFilter (20)
   :                                +- CometScan parquet spark_catalog.default.web_page (19)
   +- BroadcastExchange (53)
      +- * ColumnarToRow (52)
         +- CometHashAggregate (51)
            +- CometColumnarExchange (50)
               +- RowToColumnar (49)
                  +- * HashAggregate (48)
                     +- * Project (47)
                        +- * BroadcastHashJoin Inner BuildRight (46)
                           :- * Project (44)
                           :  +- * BroadcastHashJoin Inner BuildRight (43)
                           :     :- * Project (37)
                           :     :  +- * BroadcastHashJoin Inner BuildRight (36)
                           :     :     :- * ColumnarToRow (34)
                           :     :     :  +- CometProject (33)
                           :     :     :     +- CometFilter (32)
                           :     :     :        +- CometScan parquet spark_catalog.default.web_sales (31)
                           :     :     +- ReusedExchange (35)
                           :     +- BroadcastExchange (42)
                           :        +- * ColumnarToRow (41)
                           :           +- CometProject (40)
                           :              +- CometFilter (39)
                           :                 +- CometScan parquet spark_catalog.default.time_dim (38)
                           +- ReusedExchange (45)


(unknown) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_sold_time_sk#1, ws_ship_hdemo_sk#2, ws_web_page_sk#3, ws_sold_date_sk#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_ship_hdemo_sk), IsNotNull(ws_sold_time_sk), IsNotNull(ws_web_page_sk)]
ReadSchema: struct<ws_sold_time_sk:int,ws_ship_hdemo_sk:int,ws_web_page_sk:int>

(2) CometFilter
Input [4]: [ws_sold_time_sk#1, ws_ship_hdemo_sk#2, ws_web_page_sk#3, ws_sold_date_sk#4]
Condition : ((isnotnull(ws_ship_hdemo_sk#2) AND isnotnull(ws_sold_time_sk#1)) AND isnotnull(ws_web_page_sk#3))

(3) CometProject
Input [4]: [ws_sold_time_sk#1, ws_ship_hdemo_sk#2, ws_web_page_sk#3, ws_sold_date_sk#4]
Arguments: [ws_sold_time_sk#1, ws_ship_hdemo_sk#2, ws_web_page_sk#3], [ws_sold_time_sk#1, ws_ship_hdemo_sk#2, ws_web_page_sk#3]

(4) ColumnarToRow [codegen id : 4]
Input [3]: [ws_sold_time_sk#1, ws_ship_hdemo_sk#2, ws_web_page_sk#3]

(unknown) Scan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#5, hd_dep_count#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_dep_count), EqualTo(hd_dep_count,6), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int>

(6) CometFilter
Input [2]: [hd_demo_sk#5, hd_dep_count#6]
Condition : ((isnotnull(hd_dep_count#6) AND (hd_dep_count#6 = 6)) AND isnotnull(hd_demo_sk#5))

(7) CometProject
Input [2]: [hd_demo_sk#5, hd_dep_count#6]
Arguments: [hd_demo_sk#5], [hd_demo_sk#5]

(8) ColumnarToRow [codegen id : 1]
Input [1]: [hd_demo_sk#5]

(9) BroadcastExchange
Input [1]: [hd_demo_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ws_ship_hdemo_sk#2]
Right keys [1]: [hd_demo_sk#5]
Join type: Inner
Join condition: None

(11) Project [codegen id : 4]
Output [2]: [ws_sold_time_sk#1, ws_web_page_sk#3]
Input [4]: [ws_sold_time_sk#1, ws_ship_hdemo_sk#2, ws_web_page_sk#3, hd_demo_sk#5]

(unknown) Scan parquet spark_catalog.default.time_dim
Output [2]: [t_time_sk#7, t_hour#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/time_dim]
PushedFilters: [IsNotNull(t_hour), GreaterThanOrEqual(t_hour,8), LessThanOrEqual(t_hour,9), IsNotNull(t_time_sk)]
ReadSchema: struct<t_time_sk:int,t_hour:int>

(13) CometFilter
Input [2]: [t_time_sk#7, t_hour#8]
Condition : (((isnotnull(t_hour#8) AND (t_hour#8 >= 8)) AND (t_hour#8 <= 9)) AND isnotnull(t_time_sk#7))

(14) CometProject
Input [2]: [t_time_sk#7, t_hour#8]
Arguments: [t_time_sk#7], [t_time_sk#7]

(15) ColumnarToRow [codegen id : 2]
Input [1]: [t_time_sk#7]

(16) BroadcastExchange
Input [1]: [t_time_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ws_sold_time_sk#1]
Right keys [1]: [t_time_sk#7]
Join type: Inner
Join condition: None

(18) Project [codegen id : 4]
Output [1]: [ws_web_page_sk#3]
Input [3]: [ws_sold_time_sk#1, ws_web_page_sk#3, t_time_sk#7]

(unknown) Scan parquet spark_catalog.default.web_page
Output [2]: [wp_web_page_sk#9, wp_char_count#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_char_count), GreaterThanOrEqual(wp_char_count,5000), LessThanOrEqual(wp_char_count,5200), IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int,wp_char_count:int>

(20) CometFilter
Input [2]: [wp_web_page_sk#9, wp_char_count#10]
Condition : (((isnotnull(wp_char_count#10) AND (wp_char_count#10 >= 5000)) AND (wp_char_count#10 <= 5200)) AND isnotnull(wp_web_page_sk#9))

(21) CometProject
Input [2]: [wp_web_page_sk#9, wp_char_count#10]
Arguments: [wp_web_page_sk#9], [wp_web_page_sk#9]

(22) ColumnarToRow [codegen id : 3]
Input [1]: [wp_web_page_sk#9]

(23) BroadcastExchange
Input [1]: [wp_web_page_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(24) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ws_web_page_sk#3]
Right keys [1]: [wp_web_page_sk#9]
Join type: Inner
Join condition: None

(25) Project [codegen id : 4]
Output: []
Input [2]: [ws_web_page_sk#3, wp_web_page_sk#9]

(26) HashAggregate [codegen id : 4]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#11]
Results [1]: [count#12]

(27) RowToColumnar
Input [1]: [count#12]

(28) CometColumnarExchange
Input [1]: [count#12]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(29) CometHashAggregate
Input [1]: [count#12]
Keys: []
Functions [1]: [count(1)]

(30) ColumnarToRow [codegen id : 10]
Input [1]: [amc#13]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_sold_time_sk#14, ws_ship_hdemo_sk#15, ws_web_page_sk#16, ws_sold_date_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_ship_hdemo_sk), IsNotNull(ws_sold_time_sk), IsNotNull(ws_web_page_sk)]
ReadSchema: struct<ws_sold_time_sk:int,ws_ship_hdemo_sk:int,ws_web_page_sk:int>

(32) CometFilter
Input [4]: [ws_sold_time_sk#14, ws_ship_hdemo_sk#15, ws_web_page_sk#16, ws_sold_date_sk#17]
Condition : ((isnotnull(ws_ship_hdemo_sk#15) AND isnotnull(ws_sold_time_sk#14)) AND isnotnull(ws_web_page_sk#16))

(33) CometProject
Input [4]: [ws_sold_time_sk#14, ws_ship_hdemo_sk#15, ws_web_page_sk#16, ws_sold_date_sk#17]
Arguments: [ws_sold_time_sk#14, ws_ship_hdemo_sk#15, ws_web_page_sk#16], [ws_sold_time_sk#14, ws_ship_hdemo_sk#15, ws_web_page_sk#16]

(34) ColumnarToRow [codegen id : 8]
Input [3]: [ws_sold_time_sk#14, ws_ship_hdemo_sk#15, ws_web_page_sk#16]

(35) ReusedExchange [Reuses operator id: 9]
Output [1]: [hd_demo_sk#18]

(36) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_ship_hdemo_sk#15]
Right keys [1]: [hd_demo_sk#18]
Join type: Inner
Join condition: None

(37) Project [codegen id : 8]
Output [2]: [ws_sold_time_sk#14, ws_web_page_sk#16]
Input [4]: [ws_sold_time_sk#14, ws_ship_hdemo_sk#15, ws_web_page_sk#16, hd_demo_sk#18]

(unknown) Scan parquet spark_catalog.default.time_dim
Output [2]: [t_time_sk#19, t_hour#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/time_dim]
PushedFilters: [IsNotNull(t_hour), GreaterThanOrEqual(t_hour,19), LessThanOrEqual(t_hour,20), IsNotNull(t_time_sk)]
ReadSchema: struct<t_time_sk:int,t_hour:int>

(39) CometFilter
Input [2]: [t_time_sk#19, t_hour#20]
Condition : (((isnotnull(t_hour#20) AND (t_hour#20 >= 19)) AND (t_hour#20 <= 20)) AND isnotnull(t_time_sk#19))

(40) CometProject
Input [2]: [t_time_sk#19, t_hour#20]
Arguments: [t_time_sk#19], [t_time_sk#19]

(41) ColumnarToRow [codegen id : 6]
Input [1]: [t_time_sk#19]

(42) BroadcastExchange
Input [1]: [t_time_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(43) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_sold_time_sk#14]
Right keys [1]: [t_time_sk#19]
Join type: Inner
Join condition: None

(44) Project [codegen id : 8]
Output [1]: [ws_web_page_sk#16]
Input [3]: [ws_sold_time_sk#14, ws_web_page_sk#16, t_time_sk#19]

(45) ReusedExchange [Reuses operator id: 23]
Output [1]: [wp_web_page_sk#21]

(46) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_web_page_sk#16]
Right keys [1]: [wp_web_page_sk#21]
Join type: Inner
Join condition: None

(47) Project [codegen id : 8]
Output: []
Input [2]: [ws_web_page_sk#16, wp_web_page_sk#21]

(48) HashAggregate [codegen id : 8]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#22]
Results [1]: [count#23]

(49) RowToColumnar
Input [1]: [count#23]

(50) CometColumnarExchange
Input [1]: [count#23]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(51) CometHashAggregate
Input [1]: [count#23]
Keys: []
Functions [1]: [count(1)]

(52) ColumnarToRow [codegen id : 9]
Input [1]: [pmc#24]

(53) BroadcastExchange
Input [1]: [pmc#24]
Arguments: IdentityBroadcastMode, [plan_id=7]

(54) BroadcastNestedLoopJoin [codegen id : 10]
Join type: Inner
Join condition: None

(55) Project [codegen id : 10]
Output [1]: [(cast(amc#13 as decimal(15,4)) / cast(pmc#24 as decimal(15,4))) AS am_pm_ratio#25]
Input [2]: [amc#13, pmc#24]

