== Physical Plan ==
* ColumnarToRow (59)
+- CometTakeOrderedAndProject (58)
   +- CometHashAggregate (57)
      +- CometColumnarExchange (56)
         +- CometHashAggregate (55)
            +- CometHashAggregate (54)
               +- CometColumnarExchange (53)
                  +- RowToColumnar (52)
                     +- * HashAggregate (51)
                        +- * Project (50)
                           +- * BroadcastHashJoin Inner BuildRight (49)
                              :- * Project (47)
                              :  +- * BroadcastHashJoin Inner BuildRight (46)
                              :     :- * Project (41)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (40)
                              :     :     :- * Project (35)
                              :     :     :  +- * BroadcastHashJoin Inner BuildRight (34)
                              :     :     :     :- * ColumnarToRow (29)
                              :     :     :     :  +- CometHashAggregate (28)
                              :     :     :     :     +- CometColumnarExchange (27)
                              :     :     :     :        +- RowToColumnar (26)
                              :     :     :     :           +- * HashAggregate (25)
                              :     :     :     :              +- * Project (24)
                              :     :     :     :                 +- * BroadcastHashJoin Inner BuildRight (23)
                              :     :     :     :                    :- * Project (18)
                              :     :     :     :                    :  +- * BroadcastHashJoin Inner BuildRight (17)
                              :     :     :     :                    :     :- * Project (15)
                              :     :     :     :                    :     :  +- * BroadcastHashJoin Inner BuildRight (14)
                              :     :     :     :                    :     :     :- * ColumnarToRow (8)
                              :     :     :     :                    :     :     :  +- CometUnion (7)
                              :     :     :     :                    :     :     :     :- CometProject (3)
                              :     :     :     :                    :     :     :     :  +- CometFilter (2)
                              :     :     :     :                    :     :     :     :     +- CometScan parquet spark_catalog.default.catalog_sales (1)
                              :     :     :     :                    :     :     :     +- CometProject (6)
                              :     :     :     :                    :     :     :        +- CometFilter (5)
                              :     :     :     :                    :     :     :           +- CometScan parquet spark_catalog.default.web_sales (4)
                              :     :     :     :                    :     :     +- BroadcastExchange (13)
                              :     :     :     :                    :     :        +- * ColumnarToRow (12)
                              :     :     :     :                    :     :           +- CometProject (11)
                              :     :     :     :                    :     :              +- CometFilter (10)
                              :     :     :     :                    :     :                 +- CometScan parquet spark_catalog.default.item (9)
                              :     :     :     :                    :     +- ReusedExchange (16)
                              :     :     :     :                    +- BroadcastExchange (22)
                              :     :     :     :                       +- * ColumnarToRow (21)
                              :     :     :     :                          +- CometFilter (20)
                              :     :     :     :                             +- CometScan parquet spark_catalog.default.customer (19)
                              :     :     :     +- BroadcastExchange (33)
                              :     :     :        +- * ColumnarToRow (32)
                              :     :     :           +- CometFilter (31)
                              :     :     :              +- CometScan parquet spark_catalog.default.store_sales (30)
                              :     :     +- BroadcastExchange (39)
                              :     :        +- * ColumnarToRow (38)
                              :     :           +- CometFilter (37)
                              :     :              +- CometScan parquet spark_catalog.default.customer_address (36)
                              :     +- BroadcastExchange (45)
                              :        +- * ColumnarToRow (44)
                              :           +- CometFilter (43)
                              :              +- CometScan parquet spark_catalog.default.store (42)
                              +- ReusedExchange (48)


(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int>

(2) CometFilter
Input [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]
Condition : (isnotnull(cs_item_sk#2) AND isnotnull(cs_bill_customer_sk#1))

(3) CometProject
Input [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]
Arguments: [sold_date_sk#5, customer_sk#6, item_sk#7], [cs_sold_date_sk#3 AS sold_date_sk#5, cs_bill_customer_sk#1 AS customer_sk#6, cs_item_sk#2 AS item_sk#7]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#10), dynamicpruningexpression(ws_sold_date_sk#10 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int>

(5) CometFilter
Input [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]
Condition : (isnotnull(ws_item_sk#8) AND isnotnull(ws_bill_customer_sk#9))

(6) CometProject
Input [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]
Arguments: [sold_date_sk#11, customer_sk#12, item_sk#13], [ws_sold_date_sk#10 AS sold_date_sk#11, ws_bill_customer_sk#9 AS customer_sk#12, ws_item_sk#8 AS item_sk#13]

(7) CometUnion
Child 0 Input [3]: [sold_date_sk#5, customer_sk#6, item_sk#7]
Child 1 Input [3]: [sold_date_sk#11, customer_sk#12, item_sk#13]

(8) ColumnarToRow [codegen id : 4]
Input [3]: [sold_date_sk#5, customer_sk#6, item_sk#7]

(unknown) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#14, i_class#15, i_category#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), IsNotNull(i_class), EqualTo(i_category,Women                                             ), EqualTo(i_class,maternity                                         ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(10) CometFilter
Input [3]: [i_item_sk#14, i_class#15, i_category#16]
Condition : ((((isnotnull(i_category#16) AND isnotnull(i_class#15)) AND (i_category#16 = Women                                             )) AND (i_class#15 = maternity                                         )) AND isnotnull(i_item_sk#14))

(11) CometProject
Input [3]: [i_item_sk#14, i_class#15, i_category#16]
Arguments: [i_item_sk#14], [i_item_sk#14]

(12) ColumnarToRow [codegen id : 1]
Input [1]: [i_item_sk#14]

(13) BroadcastExchange
Input [1]: [i_item_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [item_sk#7]
Right keys [1]: [i_item_sk#14]
Join type: Inner
Join condition: None

(15) Project [codegen id : 4]
Output [2]: [sold_date_sk#5, customer_sk#6]
Input [4]: [sold_date_sk#5, customer_sk#6, item_sk#7, i_item_sk#14]

(16) ReusedExchange [Reuses operator id: 64]
Output [1]: [d_date_sk#17]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [sold_date_sk#5]
Right keys [1]: [d_date_sk#17]
Join type: Inner
Join condition: None

(18) Project [codegen id : 4]
Output [1]: [customer_sk#6]
Input [3]: [sold_date_sk#5, customer_sk#6, d_date_sk#17]

(unknown) Scan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#18, c_current_addr_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(20) CometFilter
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Condition : (isnotnull(c_customer_sk#18) AND isnotnull(c_current_addr_sk#19))

(21) ColumnarToRow [codegen id : 3]
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]

(22) BroadcastExchange
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(23) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [customer_sk#6]
Right keys [1]: [c_customer_sk#18]
Join type: Inner
Join condition: None

(24) Project [codegen id : 4]
Output [2]: [c_customer_sk#18, c_current_addr_sk#19]
Input [3]: [customer_sk#6, c_customer_sk#18, c_current_addr_sk#19]

(25) HashAggregate [codegen id : 4]
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Keys [2]: [c_customer_sk#18, c_current_addr_sk#19]
Functions: []
Aggregate Attributes: []
Results [2]: [c_customer_sk#18, c_current_addr_sk#19]

(26) RowToColumnar
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]

(27) CometColumnarExchange
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Arguments: hashpartitioning(c_customer_sk#18, c_current_addr_sk#19, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(28) CometHashAggregate
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Keys [2]: [c_customer_sk#18, c_current_addr_sk#19]
Functions: []

(29) ColumnarToRow [codegen id : 9]
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_customer_sk#20, ss_ext_sales_price#21, ss_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#22), dynamicpruningexpression(ss_sold_date_sk#22 IN dynamicpruning#23)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_sales_price:decimal(7,2)>

(31) CometFilter
Input [3]: [ss_customer_sk#20, ss_ext_sales_price#21, ss_sold_date_sk#22]
Condition : isnotnull(ss_customer_sk#20)

(32) ColumnarToRow [codegen id : 5]
Input [3]: [ss_customer_sk#20, ss_ext_sales_price#21, ss_sold_date_sk#22]

(33) BroadcastExchange
Input [3]: [ss_customer_sk#20, ss_ext_sales_price#21, ss_sold_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]

(34) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#18]
Right keys [1]: [ss_customer_sk#20]
Join type: Inner
Join condition: None

(35) Project [codegen id : 9]
Output [4]: [c_customer_sk#18, c_current_addr_sk#19, ss_ext_sales_price#21, ss_sold_date_sk#22]
Input [5]: [c_customer_sk#18, c_current_addr_sk#19, ss_customer_sk#20, ss_ext_sales_price#21, ss_sold_date_sk#22]

(unknown) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#24, ca_county#25, ca_state#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string>

(37) CometFilter
Input [3]: [ca_address_sk#24, ca_county#25, ca_state#26]
Condition : ((isnotnull(ca_address_sk#24) AND isnotnull(ca_county#25)) AND isnotnull(ca_state#26))

(38) ColumnarToRow [codegen id : 6]
Input [3]: [ca_address_sk#24, ca_county#25, ca_state#26]

(39) BroadcastExchange
Input [3]: [ca_address_sk#24, ca_county#25, ca_state#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_current_addr_sk#19]
Right keys [1]: [ca_address_sk#24]
Join type: Inner
Join condition: None

(41) Project [codegen id : 9]
Output [5]: [c_customer_sk#18, ss_ext_sales_price#21, ss_sold_date_sk#22, ca_county#25, ca_state#26]
Input [7]: [c_customer_sk#18, c_current_addr_sk#19, ss_ext_sales_price#21, ss_sold_date_sk#22, ca_address_sk#24, ca_county#25, ca_state#26]

(unknown) Scan parquet spark_catalog.default.store
Output [2]: [s_county#27, s_state#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_county), IsNotNull(s_state)]
ReadSchema: struct<s_county:string,s_state:string>

(43) CometFilter
Input [2]: [s_county#27, s_state#28]
Condition : (isnotnull(s_county#27) AND isnotnull(s_state#28))

(44) ColumnarToRow [codegen id : 7]
Input [2]: [s_county#27, s_state#28]

(45) BroadcastExchange
Input [2]: [s_county#27, s_state#28]
Arguments: HashedRelationBroadcastMode(List(input[0, string, false], input[1, string, false]),false), [plan_id=6]

(46) BroadcastHashJoin [codegen id : 9]
Left keys [2]: [ca_county#25, ca_state#26]
Right keys [2]: [s_county#27, s_state#28]
Join type: Inner
Join condition: None

(47) Project [codegen id : 9]
Output [3]: [c_customer_sk#18, ss_ext_sales_price#21, ss_sold_date_sk#22]
Input [7]: [c_customer_sk#18, ss_ext_sales_price#21, ss_sold_date_sk#22, ca_county#25, ca_state#26, s_county#27, s_state#28]

(48) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#29]

(49) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#22]
Right keys [1]: [d_date_sk#29]
Join type: Inner
Join condition: None

(50) Project [codegen id : 9]
Output [2]: [c_customer_sk#18, ss_ext_sales_price#21]
Input [4]: [c_customer_sk#18, ss_ext_sales_price#21, ss_sold_date_sk#22, d_date_sk#29]

(51) HashAggregate [codegen id : 9]
Input [2]: [c_customer_sk#18, ss_ext_sales_price#21]
Keys [1]: [c_customer_sk#18]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#21))]
Aggregate Attributes [1]: [sum#30]
Results [2]: [c_customer_sk#18, sum#31]

(52) RowToColumnar
Input [2]: [c_customer_sk#18, sum#31]

(53) CometColumnarExchange
Input [2]: [c_customer_sk#18, sum#31]
Arguments: hashpartitioning(c_customer_sk#18, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(54) CometHashAggregate
Input [2]: [c_customer_sk#18, sum#31]
Keys [1]: [c_customer_sk#18]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#21))]

(55) CometHashAggregate
Input [1]: [segment#32]
Keys [1]: [segment#32]
Functions [1]: [partial_count(1)]

(56) CometColumnarExchange
Input [2]: [segment#32, count#33]
Arguments: hashpartitioning(segment#32, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=8]

(57) CometHashAggregate
Input [2]: [segment#32, count#33]
Keys [1]: [segment#32]
Functions [1]: [count(1)]

(58) CometTakeOrderedAndProject
Input [3]: [segment#32, num_customers#34, segment_base#35]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[segment#32 ASC NULLS FIRST,num_customers#34 ASC NULLS FIRST], output=[segment#32,num_customers#34,segment_base#35]), 100, [segment#32 ASC NULLS FIRST, num_customers#34 ASC NULLS FIRST], [segment#32, num_customers#34, segment_base#35]

(59) ColumnarToRow [codegen id : 10]
Input [3]: [segment#32, num_customers#34, segment_base#35]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (64)
+- * ColumnarToRow (63)
   +- CometProject (62)
      +- CometFilter (61)
         +- CometScan parquet spark_catalog.default.date_dim (60)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#17, d_year#36, d_moy#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(61) CometFilter
Input [3]: [d_date_sk#17, d_year#36, d_moy#37]
Condition : ((((isnotnull(d_moy#37) AND isnotnull(d_year#36)) AND (d_moy#37 = 12)) AND (d_year#36 = 1998)) AND isnotnull(d_date_sk#17))

(62) CometProject
Input [3]: [d_date_sk#17, d_year#36, d_moy#37]
Arguments: [d_date_sk#17], [d_date_sk#17]

(63) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#17]

(64) BroadcastExchange
Input [1]: [d_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

Subquery:2 Hosting operator id = 4 Hosting Expression = ws_sold_date_sk#10 IN dynamicpruning#4

Subquery:3 Hosting operator id = 30 Hosting Expression = ss_sold_date_sk#22 IN dynamicpruning#23
BroadcastExchange (69)
+- * ColumnarToRow (68)
   +- CometProject (67)
      +- CometFilter (66)
         +- CometScan parquet spark_catalog.default.date_dim (65)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#29, d_month_seq#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(66) CometFilter
Input [2]: [d_date_sk#29, d_month_seq#38]
Condition : (((isnotnull(d_month_seq#38) AND (d_month_seq#38 >= Subquery scalar-subquery#39, [id=#40])) AND (d_month_seq#38 <= Subquery scalar-subquery#41, [id=#42])) AND isnotnull(d_date_sk#29))

(67) CometProject
Input [2]: [d_date_sk#29, d_month_seq#38]
Arguments: [d_date_sk#29], [d_date_sk#29]

(68) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#29]

(69) BroadcastExchange
Input [1]: [d_date_sk#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]

Subquery:4 Hosting operator id = 66 Hosting Expression = Subquery scalar-subquery#39, [id=#40]
* ColumnarToRow (76)
+- CometHashAggregate (75)
   +- CometColumnarExchange (74)
      +- CometHashAggregate (73)
         +- CometProject (72)
            +- CometFilter (71)
               +- CometScan parquet spark_catalog.default.date_dim (70)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_month_seq#43, d_year#44, d_moy#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(71) CometFilter
Input [3]: [d_month_seq#43, d_year#44, d_moy#45]
Condition : (((isnotnull(d_year#44) AND isnotnull(d_moy#45)) AND (d_year#44 = 1998)) AND (d_moy#45 = 12))

(72) CometProject
Input [3]: [d_month_seq#43, d_year#44, d_moy#45]
Arguments: [(d_month_seq + 1)#46], [(d_month_seq#43 + 1) AS (d_month_seq + 1)#46]

(73) CometHashAggregate
Input [1]: [(d_month_seq + 1)#46]
Keys [1]: [(d_month_seq + 1)#46]
Functions: []

(74) CometColumnarExchange
Input [1]: [(d_month_seq + 1)#46]
Arguments: hashpartitioning((d_month_seq + 1)#46, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=11]

(75) CometHashAggregate
Input [1]: [(d_month_seq + 1)#46]
Keys [1]: [(d_month_seq + 1)#46]
Functions: []

(76) ColumnarToRow [codegen id : 1]
Input [1]: [(d_month_seq + 1)#46]

Subquery:5 Hosting operator id = 66 Hosting Expression = Subquery scalar-subquery#41, [id=#42]
* ColumnarToRow (83)
+- CometHashAggregate (82)
   +- CometColumnarExchange (81)
      +- CometHashAggregate (80)
         +- CometProject (79)
            +- CometFilter (78)
               +- CometScan parquet spark_catalog.default.date_dim (77)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_month_seq#47, d_year#48, d_moy#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(78) CometFilter
Input [3]: [d_month_seq#47, d_year#48, d_moy#49]
Condition : (((isnotnull(d_year#48) AND isnotnull(d_moy#49)) AND (d_year#48 = 1998)) AND (d_moy#49 = 12))

(79) CometProject
Input [3]: [d_month_seq#47, d_year#48, d_moy#49]
Arguments: [(d_month_seq + 3)#50], [(d_month_seq#47 + 3) AS (d_month_seq + 3)#50]

(80) CometHashAggregate
Input [1]: [(d_month_seq + 3)#50]
Keys [1]: [(d_month_seq + 3)#50]
Functions: []

(81) CometColumnarExchange
Input [1]: [(d_month_seq + 3)#50]
Arguments: hashpartitioning((d_month_seq + 3)#50, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=12]

(82) CometHashAggregate
Input [1]: [(d_month_seq + 3)#50]
Keys [1]: [(d_month_seq + 3)#50]
Functions: []

(83) ColumnarToRow [codegen id : 1]
Input [1]: [(d_month_seq + 3)#50]


