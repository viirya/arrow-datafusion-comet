== Physical Plan ==
TakeOrderedAndProject (120)
+- * Project (119)
   +- * BroadcastHashJoin Inner BuildRight (118)
      :- * Project (99)
      :  +- * BroadcastHashJoin Inner BuildRight (98)
      :     :- * Project (78)
      :     :  +- * BroadcastHashJoin Inner BuildRight (77)
      :     :     :- * Project (58)
      :     :     :  +- * BroadcastHashJoin Inner BuildRight (57)
      :     :     :     :- * BroadcastHashJoin Inner BuildRight (37)
      :     :     :     :  :- * ColumnarToRow (18)
      :     :     :     :  :  +- CometFilter (17)
      :     :     :     :  :     +- CometHashAggregate (16)
      :     :     :     :  :        +- CometColumnarExchange (15)
      :     :     :     :  :           +- RowToColumnar (14)
      :     :     :     :  :              +- * HashAggregate (13)
      :     :     :     :  :                 +- * Project (12)
      :     :     :     :  :                    +- * BroadcastHashJoin Inner BuildRight (11)
      :     :     :     :  :                       :- * Project (9)
      :     :     :     :  :                       :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :     :     :  :                       :     :- * ColumnarToRow (3)
      :     :     :     :  :                       :     :  +- CometFilter (2)
      :     :     :     :  :                       :     :     +- CometScan parquet spark_catalog.default.customer (1)
      :     :     :     :  :                       :     +- BroadcastExchange (7)
      :     :     :     :  :                       :        +- * ColumnarToRow (6)
      :     :     :     :  :                       :           +- CometFilter (5)
      :     :     :     :  :                       :              +- CometScan parquet spark_catalog.default.store_sales (4)
      :     :     :     :  :                       +- ReusedExchange (10)
      :     :     :     :  +- BroadcastExchange (36)
      :     :     :     :     +- * ColumnarToRow (35)
      :     :     :     :        +- CometHashAggregate (34)
      :     :     :     :           +- CometColumnarExchange (33)
      :     :     :     :              +- RowToColumnar (32)
      :     :     :     :                 +- * HashAggregate (31)
      :     :     :     :                    +- * Project (30)
      :     :     :     :                       +- * BroadcastHashJoin Inner BuildRight (29)
      :     :     :     :                          :- * Project (27)
      :     :     :     :                          :  +- * BroadcastHashJoin Inner BuildRight (26)
      :     :     :     :                          :     :- * ColumnarToRow (21)
      :     :     :     :                          :     :  +- CometFilter (20)
      :     :     :     :                          :     :     +- CometScan parquet spark_catalog.default.customer (19)
      :     :     :     :                          :     +- BroadcastExchange (25)
      :     :     :     :                          :        +- * ColumnarToRow (24)
      :     :     :     :                          :           +- CometFilter (23)
      :     :     :     :                          :              +- CometScan parquet spark_catalog.default.store_sales (22)
      :     :     :     :                          +- ReusedExchange (28)
      :     :     :     +- BroadcastExchange (56)
      :     :     :        +- * ColumnarToRow (55)
      :     :     :           +- CometFilter (54)
      :     :     :              +- CometHashAggregate (53)
      :     :     :                 +- CometColumnarExchange (52)
      :     :     :                    +- RowToColumnar (51)
      :     :     :                       +- * HashAggregate (50)
      :     :     :                          +- * Project (49)
      :     :     :                             +- * BroadcastHashJoin Inner BuildRight (48)
      :     :     :                                :- * Project (46)
      :     :     :                                :  +- * BroadcastHashJoin Inner BuildRight (45)
      :     :     :                                :     :- * ColumnarToRow (40)
      :     :     :                                :     :  +- CometFilter (39)
      :     :     :                                :     :     +- CometScan parquet spark_catalog.default.customer (38)
      :     :     :                                :     +- BroadcastExchange (44)
      :     :     :                                :        +- * ColumnarToRow (43)
      :     :     :                                :           +- CometFilter (42)
      :     :     :                                :              +- CometScan parquet spark_catalog.default.catalog_sales (41)
      :     :     :                                +- ReusedExchange (47)
      :     :     +- BroadcastExchange (76)
      :     :        +- * ColumnarToRow (75)
      :     :           +- CometHashAggregate (74)
      :     :              +- CometColumnarExchange (73)
      :     :                 +- RowToColumnar (72)
      :     :                    +- * HashAggregate (71)
      :     :                       +- * Project (70)
      :     :                          +- * BroadcastHashJoin Inner BuildRight (69)
      :     :                             :- * Project (67)
      :     :                             :  +- * BroadcastHashJoin Inner BuildRight (66)
      :     :                             :     :- * ColumnarToRow (61)
      :     :                             :     :  +- CometFilter (60)
      :     :                             :     :     +- CometScan parquet spark_catalog.default.customer (59)
      :     :                             :     +- BroadcastExchange (65)
      :     :                             :        +- * ColumnarToRow (64)
      :     :                             :           +- CometFilter (63)
      :     :                             :              +- CometScan parquet spark_catalog.default.catalog_sales (62)
      :     :                             +- ReusedExchange (68)
      :     +- BroadcastExchange (97)
      :        +- * ColumnarToRow (96)
      :           +- CometFilter (95)
      :              +- CometHashAggregate (94)
      :                 +- CometColumnarExchange (93)
      :                    +- RowToColumnar (92)
      :                       +- * HashAggregate (91)
      :                          +- * Project (90)
      :                             +- * BroadcastHashJoin Inner BuildRight (89)
      :                                :- * Project (87)
      :                                :  +- * BroadcastHashJoin Inner BuildRight (86)
      :                                :     :- * ColumnarToRow (81)
      :                                :     :  +- CometFilter (80)
      :                                :     :     +- CometScan parquet spark_catalog.default.customer (79)
      :                                :     +- BroadcastExchange (85)
      :                                :        +- * ColumnarToRow (84)
      :                                :           +- CometFilter (83)
      :                                :              +- CometScan parquet spark_catalog.default.web_sales (82)
      :                                +- ReusedExchange (88)
      +- BroadcastExchange (117)
         +- * ColumnarToRow (116)
            +- CometHashAggregate (115)
               +- CometColumnarExchange (114)
                  +- RowToColumnar (113)
                     +- * HashAggregate (112)
                        +- * Project (111)
                           +- * BroadcastHashJoin Inner BuildRight (110)
                              :- * Project (108)
                              :  +- * BroadcastHashJoin Inner BuildRight (107)
                              :     :- * ColumnarToRow (102)
                              :     :  +- CometFilter (101)
                              :     :     +- CometScan parquet spark_catalog.default.customer (100)
                              :     +- BroadcastExchange (106)
                              :        +- * ColumnarToRow (105)
                              :           +- CometFilter (104)
                              :              +- CometScan parquet spark_catalog.default.web_sales (103)
                              +- ReusedExchange (109)


(unknown) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(2) CometFilter
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(3) ColumnarToRow [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#14), dynamicpruningexpression(ss_sold_date_sk#14 IN dynamicpruning#15)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(5) CometFilter
Input [6]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]
Condition : isnotnull(ss_customer_sk#9)

(6) ColumnarToRow [codegen id : 1]
Input [6]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]

(7) BroadcastExchange
Input [6]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#9]
Join type: Inner
Join condition: None

(9) Project [codegen id : 3]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]

(10) ReusedExchange [Reuses operator id: 124]
Output [2]: [d_date_sk#16, d_year#17]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#14]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, d_year#17]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14, d_date_sk#16, d_year#17]

(13) HashAggregate [codegen id : 3]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, d_year#17]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [partial_sum(((((ss_ext_list_price#13 - ss_ext_wholesale_cost#12) - ss_ext_discount_amt#10) + ss_ext_sales_price#11) / 2))]
Aggregate Attributes [2]: [sum#18, isEmpty#19]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#20, isEmpty#21]

(14) RowToColumnar
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#20, isEmpty#21]

(15) CometColumnarExchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#20, isEmpty#21]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(16) CometHashAggregate
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#20, isEmpty#21]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [sum(((((ss_ext_list_price#13 - ss_ext_wholesale_cost#12) - ss_ext_discount_amt#10) + ss_ext_sales_price#11) / 2))]

(17) CometFilter
Input [2]: [customer_id#22, year_total#23]
Condition : (isnotnull(year_total#23) AND (year_total#23 > 0.000000))

(18) ColumnarToRow [codegen id : 24]
Input [2]: [customer_id#22, year_total#23]

(unknown) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#24, c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(20) CometFilter
Input [8]: [c_customer_sk#24, c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31]
Condition : (isnotnull(c_customer_sk#24) AND isnotnull(c_customer_id#25))

(21) ColumnarToRow [codegen id : 6]
Input [8]: [c_customer_sk#24, c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_customer_sk#32, ss_ext_discount_amt#33, ss_ext_sales_price#34, ss_ext_wholesale_cost#35, ss_ext_list_price#36, ss_sold_date_sk#37]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#37), dynamicpruningexpression(ss_sold_date_sk#37 IN dynamicpruning#38)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(23) CometFilter
Input [6]: [ss_customer_sk#32, ss_ext_discount_amt#33, ss_ext_sales_price#34, ss_ext_wholesale_cost#35, ss_ext_list_price#36, ss_sold_date_sk#37]
Condition : isnotnull(ss_customer_sk#32)

(24) ColumnarToRow [codegen id : 4]
Input [6]: [ss_customer_sk#32, ss_ext_discount_amt#33, ss_ext_sales_price#34, ss_ext_wholesale_cost#35, ss_ext_list_price#36, ss_sold_date_sk#37]

(25) BroadcastExchange
Input [6]: [ss_customer_sk#32, ss_ext_discount_amt#33, ss_ext_sales_price#34, ss_ext_wholesale_cost#35, ss_ext_list_price#36, ss_sold_date_sk#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#24]
Right keys [1]: [ss_customer_sk#32]
Join type: Inner
Join condition: None

(27) Project [codegen id : 6]
Output [12]: [c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31, ss_ext_discount_amt#33, ss_ext_sales_price#34, ss_ext_wholesale_cost#35, ss_ext_list_price#36, ss_sold_date_sk#37]
Input [14]: [c_customer_sk#24, c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31, ss_customer_sk#32, ss_ext_discount_amt#33, ss_ext_sales_price#34, ss_ext_wholesale_cost#35, ss_ext_list_price#36, ss_sold_date_sk#37]

(28) ReusedExchange [Reuses operator id: 128]
Output [2]: [d_date_sk#39, d_year#40]

(29) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#37]
Right keys [1]: [d_date_sk#39]
Join type: Inner
Join condition: None

(30) Project [codegen id : 6]
Output [12]: [c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31, ss_ext_discount_amt#33, ss_ext_sales_price#34, ss_ext_wholesale_cost#35, ss_ext_list_price#36, d_year#40]
Input [14]: [c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31, ss_ext_discount_amt#33, ss_ext_sales_price#34, ss_ext_wholesale_cost#35, ss_ext_list_price#36, ss_sold_date_sk#37, d_date_sk#39, d_year#40]

(31) HashAggregate [codegen id : 6]
Input [12]: [c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31, ss_ext_discount_amt#33, ss_ext_sales_price#34, ss_ext_wholesale_cost#35, ss_ext_list_price#36, d_year#40]
Keys [8]: [c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31, d_year#40]
Functions [1]: [partial_sum(((((ss_ext_list_price#36 - ss_ext_wholesale_cost#35) - ss_ext_discount_amt#33) + ss_ext_sales_price#34) / 2))]
Aggregate Attributes [2]: [sum#41, isEmpty#42]
Results [10]: [c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31, d_year#40, sum#43, isEmpty#44]

(32) RowToColumnar
Input [10]: [c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31, d_year#40, sum#43, isEmpty#44]

(33) CometColumnarExchange
Input [10]: [c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31, d_year#40, sum#43, isEmpty#44]
Arguments: hashpartitioning(c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31, d_year#40, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(34) CometHashAggregate
Input [10]: [c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31, d_year#40, sum#43, isEmpty#44]
Keys [8]: [c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31, d_year#40]
Functions [1]: [sum(((((ss_ext_list_price#36 - ss_ext_wholesale_cost#35) - ss_ext_discount_amt#33) + ss_ext_sales_price#34) / 2))]

(35) ColumnarToRow [codegen id : 7]
Input [8]: [customer_id#45, customer_first_name#46, customer_last_name#47, customer_preferred_cust_flag#48, customer_birth_country#49, customer_login#50, customer_email_address#51, year_total#52]

(36) BroadcastExchange
Input [8]: [customer_id#45, customer_first_name#46, customer_last_name#47, customer_preferred_cust_flag#48, customer_birth_country#49, customer_login#50, customer_email_address#51, year_total#52]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=5]

(37) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#22]
Right keys [1]: [customer_id#45]
Join type: Inner
Join condition: None

(unknown) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#53, c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(39) CometFilter
Input [8]: [c_customer_sk#53, c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60]
Condition : (isnotnull(c_customer_sk#53) AND isnotnull(c_customer_id#54))

(40) ColumnarToRow [codegen id : 10]
Input [8]: [c_customer_sk#53, c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [6]: [cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, cs_sold_date_sk#66]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#66), dynamicpruningexpression(cs_sold_date_sk#66 IN dynamicpruning#67)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(42) CometFilter
Input [6]: [cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, cs_sold_date_sk#66]
Condition : isnotnull(cs_bill_customer_sk#61)

(43) ColumnarToRow [codegen id : 8]
Input [6]: [cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, cs_sold_date_sk#66]

(44) BroadcastExchange
Input [6]: [cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, cs_sold_date_sk#66]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]

(45) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#53]
Right keys [1]: [cs_bill_customer_sk#61]
Join type: Inner
Join condition: None

(46) Project [codegen id : 10]
Output [12]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, cs_sold_date_sk#66]
Input [14]: [c_customer_sk#53, c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, cs_sold_date_sk#66]

(47) ReusedExchange [Reuses operator id: 124]
Output [2]: [d_date_sk#68, d_year#69]

(48) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#66]
Right keys [1]: [d_date_sk#68]
Join type: Inner
Join condition: None

(49) Project [codegen id : 10]
Output [12]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, d_year#69]
Input [14]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, cs_sold_date_sk#66, d_date_sk#68, d_year#69]

(50) HashAggregate [codegen id : 10]
Input [12]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, d_year#69]
Keys [8]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, d_year#69]
Functions [1]: [partial_sum(((((cs_ext_list_price#65 - cs_ext_wholesale_cost#64) - cs_ext_discount_amt#62) + cs_ext_sales_price#63) / 2))]
Aggregate Attributes [2]: [sum#70, isEmpty#71]
Results [10]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, d_year#69, sum#72, isEmpty#73]

(51) RowToColumnar
Input [10]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, d_year#69, sum#72, isEmpty#73]

(52) CometColumnarExchange
Input [10]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, d_year#69, sum#72, isEmpty#73]
Arguments: hashpartitioning(c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, d_year#69, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(53) CometHashAggregate
Input [10]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, d_year#69, sum#72, isEmpty#73]
Keys [8]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, d_year#69]
Functions [1]: [sum(((((cs_ext_list_price#65 - cs_ext_wholesale_cost#64) - cs_ext_discount_amt#62) + cs_ext_sales_price#63) / 2))]

(54) CometFilter
Input [2]: [customer_id#74, year_total#75]
Condition : (isnotnull(year_total#75) AND (year_total#75 > 0.000000))

(55) ColumnarToRow [codegen id : 11]
Input [2]: [customer_id#74, year_total#75]

(56) BroadcastExchange
Input [2]: [customer_id#74, year_total#75]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=8]

(57) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#22]
Right keys [1]: [customer_id#74]
Join type: Inner
Join condition: None

(58) Project [codegen id : 24]
Output [11]: [customer_id#22, year_total#23, customer_id#45, customer_first_name#46, customer_last_name#47, customer_preferred_cust_flag#48, customer_birth_country#49, customer_login#50, customer_email_address#51, year_total#52, year_total#75]
Input [12]: [customer_id#22, year_total#23, customer_id#45, customer_first_name#46, customer_last_name#47, customer_preferred_cust_flag#48, customer_birth_country#49, customer_login#50, customer_email_address#51, year_total#52, customer_id#74, year_total#75]

(unknown) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#76, c_customer_id#77, c_first_name#78, c_last_name#79, c_preferred_cust_flag#80, c_birth_country#81, c_login#82, c_email_address#83]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(60) CometFilter
Input [8]: [c_customer_sk#76, c_customer_id#77, c_first_name#78, c_last_name#79, c_preferred_cust_flag#80, c_birth_country#81, c_login#82, c_email_address#83]
Condition : (isnotnull(c_customer_sk#76) AND isnotnull(c_customer_id#77))

(61) ColumnarToRow [codegen id : 14]
Input [8]: [c_customer_sk#76, c_customer_id#77, c_first_name#78, c_last_name#79, c_preferred_cust_flag#80, c_birth_country#81, c_login#82, c_email_address#83]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [6]: [cs_bill_customer_sk#84, cs_ext_discount_amt#85, cs_ext_sales_price#86, cs_ext_wholesale_cost#87, cs_ext_list_price#88, cs_sold_date_sk#89]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#89), dynamicpruningexpression(cs_sold_date_sk#89 IN dynamicpruning#90)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(63) CometFilter
Input [6]: [cs_bill_customer_sk#84, cs_ext_discount_amt#85, cs_ext_sales_price#86, cs_ext_wholesale_cost#87, cs_ext_list_price#88, cs_sold_date_sk#89]
Condition : isnotnull(cs_bill_customer_sk#84)

(64) ColumnarToRow [codegen id : 12]
Input [6]: [cs_bill_customer_sk#84, cs_ext_discount_amt#85, cs_ext_sales_price#86, cs_ext_wholesale_cost#87, cs_ext_list_price#88, cs_sold_date_sk#89]

(65) BroadcastExchange
Input [6]: [cs_bill_customer_sk#84, cs_ext_discount_amt#85, cs_ext_sales_price#86, cs_ext_wholesale_cost#87, cs_ext_list_price#88, cs_sold_date_sk#89]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=9]

(66) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#76]
Right keys [1]: [cs_bill_customer_sk#84]
Join type: Inner
Join condition: None

(67) Project [codegen id : 14]
Output [12]: [c_customer_id#77, c_first_name#78, c_last_name#79, c_preferred_cust_flag#80, c_birth_country#81, c_login#82, c_email_address#83, cs_ext_discount_amt#85, cs_ext_sales_price#86, cs_ext_wholesale_cost#87, cs_ext_list_price#88, cs_sold_date_sk#89]
Input [14]: [c_customer_sk#76, c_customer_id#77, c_first_name#78, c_last_name#79, c_preferred_cust_flag#80, c_birth_country#81, c_login#82, c_email_address#83, cs_bill_customer_sk#84, cs_ext_discount_amt#85, cs_ext_sales_price#86, cs_ext_wholesale_cost#87, cs_ext_list_price#88, cs_sold_date_sk#89]

(68) ReusedExchange [Reuses operator id: 128]
Output [2]: [d_date_sk#91, d_year#92]

(69) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [cs_sold_date_sk#89]
Right keys [1]: [d_date_sk#91]
Join type: Inner
Join condition: None

(70) Project [codegen id : 14]
Output [12]: [c_customer_id#77, c_first_name#78, c_last_name#79, c_preferred_cust_flag#80, c_birth_country#81, c_login#82, c_email_address#83, cs_ext_discount_amt#85, cs_ext_sales_price#86, cs_ext_wholesale_cost#87, cs_ext_list_price#88, d_year#92]
Input [14]: [c_customer_id#77, c_first_name#78, c_last_name#79, c_preferred_cust_flag#80, c_birth_country#81, c_login#82, c_email_address#83, cs_ext_discount_amt#85, cs_ext_sales_price#86, cs_ext_wholesale_cost#87, cs_ext_list_price#88, cs_sold_date_sk#89, d_date_sk#91, d_year#92]

(71) HashAggregate [codegen id : 14]
Input [12]: [c_customer_id#77, c_first_name#78, c_last_name#79, c_preferred_cust_flag#80, c_birth_country#81, c_login#82, c_email_address#83, cs_ext_discount_amt#85, cs_ext_sales_price#86, cs_ext_wholesale_cost#87, cs_ext_list_price#88, d_year#92]
Keys [8]: [c_customer_id#77, c_first_name#78, c_last_name#79, c_preferred_cust_flag#80, c_birth_country#81, c_login#82, c_email_address#83, d_year#92]
Functions [1]: [partial_sum(((((cs_ext_list_price#88 - cs_ext_wholesale_cost#87) - cs_ext_discount_amt#85) + cs_ext_sales_price#86) / 2))]
Aggregate Attributes [2]: [sum#93, isEmpty#94]
Results [10]: [c_customer_id#77, c_first_name#78, c_last_name#79, c_preferred_cust_flag#80, c_birth_country#81, c_login#82, c_email_address#83, d_year#92, sum#95, isEmpty#96]

(72) RowToColumnar
Input [10]: [c_customer_id#77, c_first_name#78, c_last_name#79, c_preferred_cust_flag#80, c_birth_country#81, c_login#82, c_email_address#83, d_year#92, sum#95, isEmpty#96]

(73) CometColumnarExchange
Input [10]: [c_customer_id#77, c_first_name#78, c_last_name#79, c_preferred_cust_flag#80, c_birth_country#81, c_login#82, c_email_address#83, d_year#92, sum#95, isEmpty#96]
Arguments: hashpartitioning(c_customer_id#77, c_first_name#78, c_last_name#79, c_preferred_cust_flag#80, c_birth_country#81, c_login#82, c_email_address#83, d_year#92, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(74) CometHashAggregate
Input [10]: [c_customer_id#77, c_first_name#78, c_last_name#79, c_preferred_cust_flag#80, c_birth_country#81, c_login#82, c_email_address#83, d_year#92, sum#95, isEmpty#96]
Keys [8]: [c_customer_id#77, c_first_name#78, c_last_name#79, c_preferred_cust_flag#80, c_birth_country#81, c_login#82, c_email_address#83, d_year#92]
Functions [1]: [sum(((((cs_ext_list_price#88 - cs_ext_wholesale_cost#87) - cs_ext_discount_amt#85) + cs_ext_sales_price#86) / 2))]

(75) ColumnarToRow [codegen id : 15]
Input [2]: [customer_id#97, year_total#98]

(76) BroadcastExchange
Input [2]: [customer_id#97, year_total#98]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=11]

(77) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#22]
Right keys [1]: [customer_id#97]
Join type: Inner
Join condition: (CASE WHEN (year_total#75 > 0.000000) THEN (year_total#98 / year_total#75) END > CASE WHEN (year_total#23 > 0.000000) THEN (year_total#52 / year_total#23) END)

(78) Project [codegen id : 24]
Output [10]: [customer_id#22, customer_id#45, customer_first_name#46, customer_last_name#47, customer_preferred_cust_flag#48, customer_birth_country#49, customer_login#50, customer_email_address#51, year_total#75, year_total#98]
Input [13]: [customer_id#22, year_total#23, customer_id#45, customer_first_name#46, customer_last_name#47, customer_preferred_cust_flag#48, customer_birth_country#49, customer_login#50, customer_email_address#51, year_total#52, year_total#75, customer_id#97, year_total#98]

(unknown) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#99, c_customer_id#100, c_first_name#101, c_last_name#102, c_preferred_cust_flag#103, c_birth_country#104, c_login#105, c_email_address#106]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(80) CometFilter
Input [8]: [c_customer_sk#99, c_customer_id#100, c_first_name#101, c_last_name#102, c_preferred_cust_flag#103, c_birth_country#104, c_login#105, c_email_address#106]
Condition : (isnotnull(c_customer_sk#99) AND isnotnull(c_customer_id#100))

(81) ColumnarToRow [codegen id : 18]
Input [8]: [c_customer_sk#99, c_customer_id#100, c_first_name#101, c_last_name#102, c_preferred_cust_flag#103, c_birth_country#104, c_login#105, c_email_address#106]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [6]: [ws_bill_customer_sk#107, ws_ext_discount_amt#108, ws_ext_sales_price#109, ws_ext_wholesale_cost#110, ws_ext_list_price#111, ws_sold_date_sk#112]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#112), dynamicpruningexpression(ws_sold_date_sk#112 IN dynamicpruning#113)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(83) CometFilter
Input [6]: [ws_bill_customer_sk#107, ws_ext_discount_amt#108, ws_ext_sales_price#109, ws_ext_wholesale_cost#110, ws_ext_list_price#111, ws_sold_date_sk#112]
Condition : isnotnull(ws_bill_customer_sk#107)

(84) ColumnarToRow [codegen id : 16]
Input [6]: [ws_bill_customer_sk#107, ws_ext_discount_amt#108, ws_ext_sales_price#109, ws_ext_wholesale_cost#110, ws_ext_list_price#111, ws_sold_date_sk#112]

(85) BroadcastExchange
Input [6]: [ws_bill_customer_sk#107, ws_ext_discount_amt#108, ws_ext_sales_price#109, ws_ext_wholesale_cost#110, ws_ext_list_price#111, ws_sold_date_sk#112]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=12]

(86) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [c_customer_sk#99]
Right keys [1]: [ws_bill_customer_sk#107]
Join type: Inner
Join condition: None

(87) Project [codegen id : 18]
Output [12]: [c_customer_id#100, c_first_name#101, c_last_name#102, c_preferred_cust_flag#103, c_birth_country#104, c_login#105, c_email_address#106, ws_ext_discount_amt#108, ws_ext_sales_price#109, ws_ext_wholesale_cost#110, ws_ext_list_price#111, ws_sold_date_sk#112]
Input [14]: [c_customer_sk#99, c_customer_id#100, c_first_name#101, c_last_name#102, c_preferred_cust_flag#103, c_birth_country#104, c_login#105, c_email_address#106, ws_bill_customer_sk#107, ws_ext_discount_amt#108, ws_ext_sales_price#109, ws_ext_wholesale_cost#110, ws_ext_list_price#111, ws_sold_date_sk#112]

(88) ReusedExchange [Reuses operator id: 124]
Output [2]: [d_date_sk#114, d_year#115]

(89) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [ws_sold_date_sk#112]
Right keys [1]: [d_date_sk#114]
Join type: Inner
Join condition: None

(90) Project [codegen id : 18]
Output [12]: [c_customer_id#100, c_first_name#101, c_last_name#102, c_preferred_cust_flag#103, c_birth_country#104, c_login#105, c_email_address#106, ws_ext_discount_amt#108, ws_ext_sales_price#109, ws_ext_wholesale_cost#110, ws_ext_list_price#111, d_year#115]
Input [14]: [c_customer_id#100, c_first_name#101, c_last_name#102, c_preferred_cust_flag#103, c_birth_country#104, c_login#105, c_email_address#106, ws_ext_discount_amt#108, ws_ext_sales_price#109, ws_ext_wholesale_cost#110, ws_ext_list_price#111, ws_sold_date_sk#112, d_date_sk#114, d_year#115]

(91) HashAggregate [codegen id : 18]
Input [12]: [c_customer_id#100, c_first_name#101, c_last_name#102, c_preferred_cust_flag#103, c_birth_country#104, c_login#105, c_email_address#106, ws_ext_discount_amt#108, ws_ext_sales_price#109, ws_ext_wholesale_cost#110, ws_ext_list_price#111, d_year#115]
Keys [8]: [c_customer_id#100, c_first_name#101, c_last_name#102, c_preferred_cust_flag#103, c_birth_country#104, c_login#105, c_email_address#106, d_year#115]
Functions [1]: [partial_sum(((((ws_ext_list_price#111 - ws_ext_wholesale_cost#110) - ws_ext_discount_amt#108) + ws_ext_sales_price#109) / 2))]
Aggregate Attributes [2]: [sum#116, isEmpty#117]
Results [10]: [c_customer_id#100, c_first_name#101, c_last_name#102, c_preferred_cust_flag#103, c_birth_country#104, c_login#105, c_email_address#106, d_year#115, sum#118, isEmpty#119]

(92) RowToColumnar
Input [10]: [c_customer_id#100, c_first_name#101, c_last_name#102, c_preferred_cust_flag#103, c_birth_country#104, c_login#105, c_email_address#106, d_year#115, sum#118, isEmpty#119]

(93) CometColumnarExchange
Input [10]: [c_customer_id#100, c_first_name#101, c_last_name#102, c_preferred_cust_flag#103, c_birth_country#104, c_login#105, c_email_address#106, d_year#115, sum#118, isEmpty#119]
Arguments: hashpartitioning(c_customer_id#100, c_first_name#101, c_last_name#102, c_preferred_cust_flag#103, c_birth_country#104, c_login#105, c_email_address#106, d_year#115, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=13]

(94) CometHashAggregate
Input [10]: [c_customer_id#100, c_first_name#101, c_last_name#102, c_preferred_cust_flag#103, c_birth_country#104, c_login#105, c_email_address#106, d_year#115, sum#118, isEmpty#119]
Keys [8]: [c_customer_id#100, c_first_name#101, c_last_name#102, c_preferred_cust_flag#103, c_birth_country#104, c_login#105, c_email_address#106, d_year#115]
Functions [1]: [sum(((((ws_ext_list_price#111 - ws_ext_wholesale_cost#110) - ws_ext_discount_amt#108) + ws_ext_sales_price#109) / 2))]

(95) CometFilter
Input [2]: [customer_id#120, year_total#121]
Condition : (isnotnull(year_total#121) AND (year_total#121 > 0.000000))

(96) ColumnarToRow [codegen id : 19]
Input [2]: [customer_id#120, year_total#121]

(97) BroadcastExchange
Input [2]: [customer_id#120, year_total#121]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=14]

(98) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#22]
Right keys [1]: [customer_id#120]
Join type: Inner
Join condition: None

(99) Project [codegen id : 24]
Output [11]: [customer_id#22, customer_id#45, customer_first_name#46, customer_last_name#47, customer_preferred_cust_flag#48, customer_birth_country#49, customer_login#50, customer_email_address#51, year_total#75, year_total#98, year_total#121]
Input [12]: [customer_id#22, customer_id#45, customer_first_name#46, customer_last_name#47, customer_preferred_cust_flag#48, customer_birth_country#49, customer_login#50, customer_email_address#51, year_total#75, year_total#98, customer_id#120, year_total#121]

(unknown) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#122, c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(101) CometFilter
Input [8]: [c_customer_sk#122, c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129]
Condition : (isnotnull(c_customer_sk#122) AND isnotnull(c_customer_id#123))

(102) ColumnarToRow [codegen id : 22]
Input [8]: [c_customer_sk#122, c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [6]: [ws_bill_customer_sk#130, ws_ext_discount_amt#131, ws_ext_sales_price#132, ws_ext_wholesale_cost#133, ws_ext_list_price#134, ws_sold_date_sk#135]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#135), dynamicpruningexpression(ws_sold_date_sk#135 IN dynamicpruning#136)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(104) CometFilter
Input [6]: [ws_bill_customer_sk#130, ws_ext_discount_amt#131, ws_ext_sales_price#132, ws_ext_wholesale_cost#133, ws_ext_list_price#134, ws_sold_date_sk#135]
Condition : isnotnull(ws_bill_customer_sk#130)

(105) ColumnarToRow [codegen id : 20]
Input [6]: [ws_bill_customer_sk#130, ws_ext_discount_amt#131, ws_ext_sales_price#132, ws_ext_wholesale_cost#133, ws_ext_list_price#134, ws_sold_date_sk#135]

(106) BroadcastExchange
Input [6]: [ws_bill_customer_sk#130, ws_ext_discount_amt#131, ws_ext_sales_price#132, ws_ext_wholesale_cost#133, ws_ext_list_price#134, ws_sold_date_sk#135]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=15]

(107) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [c_customer_sk#122]
Right keys [1]: [ws_bill_customer_sk#130]
Join type: Inner
Join condition: None

(108) Project [codegen id : 22]
Output [12]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, ws_ext_discount_amt#131, ws_ext_sales_price#132, ws_ext_wholesale_cost#133, ws_ext_list_price#134, ws_sold_date_sk#135]
Input [14]: [c_customer_sk#122, c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, ws_bill_customer_sk#130, ws_ext_discount_amt#131, ws_ext_sales_price#132, ws_ext_wholesale_cost#133, ws_ext_list_price#134, ws_sold_date_sk#135]

(109) ReusedExchange [Reuses operator id: 128]
Output [2]: [d_date_sk#137, d_year#138]

(110) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_sold_date_sk#135]
Right keys [1]: [d_date_sk#137]
Join type: Inner
Join condition: None

(111) Project [codegen id : 22]
Output [12]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, ws_ext_discount_amt#131, ws_ext_sales_price#132, ws_ext_wholesale_cost#133, ws_ext_list_price#134, d_year#138]
Input [14]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, ws_ext_discount_amt#131, ws_ext_sales_price#132, ws_ext_wholesale_cost#133, ws_ext_list_price#134, ws_sold_date_sk#135, d_date_sk#137, d_year#138]

(112) HashAggregate [codegen id : 22]
Input [12]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, ws_ext_discount_amt#131, ws_ext_sales_price#132, ws_ext_wholesale_cost#133, ws_ext_list_price#134, d_year#138]
Keys [8]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, d_year#138]
Functions [1]: [partial_sum(((((ws_ext_list_price#134 - ws_ext_wholesale_cost#133) - ws_ext_discount_amt#131) + ws_ext_sales_price#132) / 2))]
Aggregate Attributes [2]: [sum#139, isEmpty#140]
Results [10]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, d_year#138, sum#141, isEmpty#142]

(113) RowToColumnar
Input [10]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, d_year#138, sum#141, isEmpty#142]

(114) CometColumnarExchange
Input [10]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, d_year#138, sum#141, isEmpty#142]
Arguments: hashpartitioning(c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, d_year#138, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=16]

(115) CometHashAggregate
Input [10]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, d_year#138, sum#141, isEmpty#142]
Keys [8]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, d_year#138]
Functions [1]: [sum(((((ws_ext_list_price#134 - ws_ext_wholesale_cost#133) - ws_ext_discount_amt#131) + ws_ext_sales_price#132) / 2))]

(116) ColumnarToRow [codegen id : 23]
Input [2]: [customer_id#143, year_total#144]

(117) BroadcastExchange
Input [2]: [customer_id#143, year_total#144]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=17]

(118) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#22]
Right keys [1]: [customer_id#143]
Join type: Inner
Join condition: (CASE WHEN (year_total#75 > 0.000000) THEN (year_total#98 / year_total#75) END > CASE WHEN (year_total#121 > 0.000000) THEN (year_total#144 / year_total#121) END)

(119) Project [codegen id : 24]
Output [7]: [customer_id#45, customer_first_name#46, customer_last_name#47, customer_preferred_cust_flag#48, customer_birth_country#49, customer_login#50, customer_email_address#51]
Input [13]: [customer_id#22, customer_id#45, customer_first_name#46, customer_last_name#47, customer_preferred_cust_flag#48, customer_birth_country#49, customer_login#50, customer_email_address#51, year_total#75, year_total#98, year_total#121, customer_id#143, year_total#144]

(120) TakeOrderedAndProject
Input [7]: [customer_id#45, customer_first_name#46, customer_last_name#47, customer_preferred_cust_flag#48, customer_birth_country#49, customer_login#50, customer_email_address#51]
Arguments: 100, [customer_id#45 ASC NULLS FIRST, customer_first_name#46 ASC NULLS FIRST, customer_last_name#47 ASC NULLS FIRST, customer_preferred_cust_flag#48 ASC NULLS FIRST, customer_birth_country#49 ASC NULLS FIRST, customer_login#50 ASC NULLS FIRST, customer_email_address#51 ASC NULLS FIRST], [customer_id#45, customer_first_name#46, customer_last_name#47, customer_preferred_cust_flag#48, customer_birth_country#49, customer_login#50, customer_email_address#51]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#14 IN dynamicpruning#15
BroadcastExchange (124)
+- * ColumnarToRow (123)
   +- CometFilter (122)
      +- CometScan parquet spark_catalog.default.date_dim (121)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#16, d_year#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(122) CometFilter
Input [2]: [d_date_sk#16, d_year#17]
Condition : ((isnotnull(d_year#17) AND (d_year#17 = 2001)) AND isnotnull(d_date_sk#16))

(123) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#16, d_year#17]

(124) BroadcastExchange
Input [2]: [d_date_sk#16, d_year#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=18]

Subquery:2 Hosting operator id = 22 Hosting Expression = ss_sold_date_sk#37 IN dynamicpruning#38
BroadcastExchange (128)
+- * ColumnarToRow (127)
   +- CometFilter (126)
      +- CometScan parquet spark_catalog.default.date_dim (125)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#39, d_year#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(126) CometFilter
Input [2]: [d_date_sk#39, d_year#40]
Condition : ((isnotnull(d_year#40) AND (d_year#40 = 2002)) AND isnotnull(d_date_sk#39))

(127) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#39, d_year#40]

(128) BroadcastExchange
Input [2]: [d_date_sk#39, d_year#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=19]

Subquery:3 Hosting operator id = 41 Hosting Expression = cs_sold_date_sk#66 IN dynamicpruning#15

Subquery:4 Hosting operator id = 62 Hosting Expression = cs_sold_date_sk#89 IN dynamicpruning#38

Subquery:5 Hosting operator id = 82 Hosting Expression = ws_sold_date_sk#112 IN dynamicpruning#15

Subquery:6 Hosting operator id = 103 Hosting Expression = ws_sold_date_sk#135 IN dynamicpruning#38


