== Physical Plan ==
TakeOrderedAndProject (23)
+- * Project (22)
   +- Window (21)
      +- * ColumnarToRow (20)
         +- CometSort (19)
            +- CometColumnarExchange (18)
               +- CometHashAggregate (17)
                  +- CometColumnarExchange (16)
                     +- RowToColumnar (15)
                        +- * HashAggregate (14)
                           +- * Expand (13)
                              +- * Project (12)
                                 +- * BroadcastHashJoin Inner BuildRight (11)
                                    :- * Project (6)
                                    :  +- * BroadcastHashJoin Inner BuildRight (5)
                                    :     :- * ColumnarToRow (3)
                                    :     :  +- CometFilter (2)
                                    :     :     +- CometScan parquet spark_catalog.default.web_sales (1)
                                    :     +- ReusedExchange (4)
                                    +- BroadcastExchange (10)
                                       +- * ColumnarToRow (9)
                                          +- CometFilter (8)
                                             +- CometScan parquet spark_catalog.default.item (7)


(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_net_paid:decimal(7,2)>

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(3) ColumnarToRow [codegen id : 3]
Input [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]

(4) ReusedExchange [Reuses operator id: 28]
Output [1]: [d_date_sk#5]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join type: Inner
Join condition: None

(6) Project [codegen id : 3]
Output [2]: [ws_item_sk#1, ws_net_paid#2]
Input [4]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3, d_date_sk#5]

(unknown) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#6, i_class#7, i_category#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(8) CometFilter
Input [3]: [i_item_sk#6, i_class#7, i_category#8]
Condition : isnotnull(i_item_sk#6)

(9) ColumnarToRow [codegen id : 2]
Input [3]: [i_item_sk#6, i_class#7, i_category#8]

(10) BroadcastExchange
Input [3]: [i_item_sk#6, i_class#7, i_category#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ws_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [3]: [ws_net_paid#2, i_category#8, i_class#7]
Input [5]: [ws_item_sk#1, ws_net_paid#2, i_item_sk#6, i_class#7, i_category#8]

(13) Expand [codegen id : 3]
Input [3]: [ws_net_paid#2, i_category#8, i_class#7]
Arguments: [[ws_net_paid#2, i_category#8, i_class#7, 0], [ws_net_paid#2, i_category#8, null, 1], [ws_net_paid#2, null, null, 3]], [ws_net_paid#2, i_category#9, i_class#10, spark_grouping_id#11]

(14) HashAggregate [codegen id : 3]
Input [4]: [ws_net_paid#2, i_category#9, i_class#10, spark_grouping_id#11]
Keys [3]: [i_category#9, i_class#10, spark_grouping_id#11]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum#12]
Results [4]: [i_category#9, i_class#10, spark_grouping_id#11, sum#13]

(15) RowToColumnar
Input [4]: [i_category#9, i_class#10, spark_grouping_id#11, sum#13]

(16) CometColumnarExchange
Input [4]: [i_category#9, i_class#10, spark_grouping_id#11, sum#13]
Arguments: hashpartitioning(i_category#9, i_class#10, spark_grouping_id#11, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(17) CometHashAggregate
Input [4]: [i_category#9, i_class#10, spark_grouping_id#11, sum#13]
Keys [3]: [i_category#9, i_class#10, spark_grouping_id#11]
Functions [1]: [sum(UnscaledValue(ws_net_paid#2))]

(18) CometColumnarExchange
Input [7]: [total_sum#14, i_category#9, i_class#10, lochierarchy#15, _w0#16, _w1#17, _w2#18]
Arguments: hashpartitioning(_w1#17, _w2#18, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(19) CometSort
Input [7]: [total_sum#14, i_category#9, i_class#10, lochierarchy#15, _w0#16, _w1#17, _w2#18]
Arguments: [total_sum#14, i_category#9, i_class#10, lochierarchy#15, _w0#16, _w1#17, _w2#18], [_w1#17 ASC NULLS FIRST, _w2#18 ASC NULLS FIRST, _w0#16 DESC NULLS LAST]

(20) ColumnarToRow [codegen id : 4]
Input [7]: [total_sum#14, i_category#9, i_class#10, lochierarchy#15, _w0#16, _w1#17, _w2#18]

(21) Window
Input [7]: [total_sum#14, i_category#9, i_class#10, lochierarchy#15, _w0#16, _w1#17, _w2#18]
Arguments: [rank(_w0#16) windowspecdefinition(_w1#17, _w2#18, _w0#16 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#19], [_w1#17, _w2#18], [_w0#16 DESC NULLS LAST]

(22) Project [codegen id : 5]
Output [5]: [total_sum#14, i_category#9, i_class#10, lochierarchy#15, rank_within_parent#19]
Input [8]: [total_sum#14, i_category#9, i_class#10, lochierarchy#15, _w0#16, _w1#17, _w2#18, rank_within_parent#19]

(23) TakeOrderedAndProject
Input [5]: [total_sum#14, i_category#9, i_class#10, lochierarchy#15, rank_within_parent#19]
Arguments: 100, [lochierarchy#15 DESC NULLS LAST, CASE WHEN (lochierarchy#15 = 0) THEN i_category#9 END ASC NULLS FIRST, rank_within_parent#19 ASC NULLS FIRST], [total_sum#14, i_category#9, i_class#10, lochierarchy#15, rank_within_parent#19]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (28)
+- * ColumnarToRow (27)
   +- CometProject (26)
      +- CometFilter (25)
         +- CometScan parquet spark_catalog.default.date_dim (24)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(25) CometFilter
Input [2]: [d_date_sk#5, d_month_seq#20]
Condition : (((isnotnull(d_month_seq#20) AND (d_month_seq#20 >= 1200)) AND (d_month_seq#20 <= 1211)) AND isnotnull(d_date_sk#5))

(26) CometProject
Input [2]: [d_date_sk#5, d_month_seq#20]
Arguments: [d_date_sk#5], [d_date_sk#5]

(27) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#5]

(28) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]


