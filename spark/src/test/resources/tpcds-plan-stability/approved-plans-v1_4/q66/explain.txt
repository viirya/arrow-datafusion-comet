== Physical Plan ==
* ColumnarToRow (55)
+- CometTakeOrderedAndProject (54)
   +- CometHashAggregate (53)
      +- CometColumnarExchange (52)
         +- CometHashAggregate (51)
            +- CometUnion (50)
               :- CometHashAggregate (30)
               :  +- CometColumnarExchange (29)
               :     +- RowToColumnar (28)
               :        +- * HashAggregate (27)
               :           +- * Project (26)
               :              +- * BroadcastHashJoin Inner BuildRight (25)
               :                 :- * Project (19)
               :                 :  +- * BroadcastHashJoin Inner BuildRight (18)
               :                 :     :- * Project (12)
               :                 :     :  +- * BroadcastHashJoin Inner BuildRight (11)
               :                 :     :     :- * Project (9)
               :                 :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
               :                 :     :     :     :- * ColumnarToRow (3)
               :                 :     :     :     :  +- CometFilter (2)
               :                 :     :     :     :     +- CometScan parquet spark_catalog.default.web_sales (1)
               :                 :     :     :     +- BroadcastExchange (7)
               :                 :     :     :        +- * ColumnarToRow (6)
               :                 :     :     :           +- CometFilter (5)
               :                 :     :     :              +- CometScan parquet spark_catalog.default.warehouse (4)
               :                 :     :     +- ReusedExchange (10)
               :                 :     +- BroadcastExchange (17)
               :                 :        +- * ColumnarToRow (16)
               :                 :           +- CometProject (15)
               :                 :              +- CometFilter (14)
               :                 :                 +- CometScan parquet spark_catalog.default.time_dim (13)
               :                 +- BroadcastExchange (24)
               :                    +- * ColumnarToRow (23)
               :                       +- CometProject (22)
               :                          +- CometFilter (21)
               :                             +- CometScan parquet spark_catalog.default.ship_mode (20)
               +- CometHashAggregate (49)
                  +- CometColumnarExchange (48)
                     +- RowToColumnar (47)
                        +- * HashAggregate (46)
                           +- * Project (45)
                              +- * BroadcastHashJoin Inner BuildRight (44)
                                 :- * Project (42)
                                 :  +- * BroadcastHashJoin Inner BuildRight (41)
                                 :     :- * Project (39)
                                 :     :  +- * BroadcastHashJoin Inner BuildRight (38)
                                 :     :     :- * Project (36)
                                 :     :     :  +- * BroadcastHashJoin Inner BuildRight (35)
                                 :     :     :     :- * ColumnarToRow (33)
                                 :     :     :     :  +- CometFilter (32)
                                 :     :     :     :     +- CometScan parquet spark_catalog.default.catalog_sales (31)
                                 :     :     :     +- ReusedExchange (34)
                                 :     :     +- ReusedExchange (37)
                                 :     +- ReusedExchange (40)
                                 +- ReusedExchange (43)


(unknown) Scan parquet spark_catalog.default.web_sales
Output [7]: [ws_sold_time_sk#1, ws_ship_mode_sk#2, ws_warehouse_sk#3, ws_quantity#4, ws_ext_sales_price#5, ws_net_paid#6, ws_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#7), dynamicpruningexpression(ws_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_warehouse_sk), IsNotNull(ws_sold_time_sk), IsNotNull(ws_ship_mode_sk)]
ReadSchema: struct<ws_sold_time_sk:int,ws_ship_mode_sk:int,ws_warehouse_sk:int,ws_quantity:int,ws_ext_sales_price:decimal(7,2),ws_net_paid:decimal(7,2)>

(2) CometFilter
Input [7]: [ws_sold_time_sk#1, ws_ship_mode_sk#2, ws_warehouse_sk#3, ws_quantity#4, ws_ext_sales_price#5, ws_net_paid#6, ws_sold_date_sk#7]
Condition : ((isnotnull(ws_warehouse_sk#3) AND isnotnull(ws_sold_time_sk#1)) AND isnotnull(ws_ship_mode_sk#2))

(3) ColumnarToRow [codegen id : 5]
Input [7]: [ws_sold_time_sk#1, ws_ship_mode_sk#2, ws_warehouse_sk#3, ws_quantity#4, ws_ext_sales_price#5, ws_net_paid#6, ws_sold_date_sk#7]

(unknown) Scan parquet spark_catalog.default.warehouse
Output [7]: [w_warehouse_sk#9, w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string,w_warehouse_sq_ft:int,w_city:string,w_county:string,w_state:string,w_country:string>

(5) CometFilter
Input [7]: [w_warehouse_sk#9, w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15]
Condition : isnotnull(w_warehouse_sk#9)

(6) ColumnarToRow [codegen id : 1]
Input [7]: [w_warehouse_sk#9, w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15]

(7) BroadcastExchange
Input [7]: [w_warehouse_sk#9, w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ws_warehouse_sk#3]
Right keys [1]: [w_warehouse_sk#9]
Join type: Inner
Join condition: None

(9) Project [codegen id : 5]
Output [12]: [ws_sold_time_sk#1, ws_ship_mode_sk#2, ws_quantity#4, ws_ext_sales_price#5, ws_net_paid#6, ws_sold_date_sk#7, w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15]
Input [14]: [ws_sold_time_sk#1, ws_ship_mode_sk#2, ws_warehouse_sk#3, ws_quantity#4, ws_ext_sales_price#5, ws_net_paid#6, ws_sold_date_sk#7, w_warehouse_sk#9, w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15]

(10) ReusedExchange [Reuses operator id: 59]
Output [3]: [d_date_sk#16, d_year#17, d_moy#18]

(11) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ws_sold_date_sk#7]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(12) Project [codegen id : 5]
Output [13]: [ws_sold_time_sk#1, ws_ship_mode_sk#2, ws_quantity#4, ws_ext_sales_price#5, ws_net_paid#6, w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, d_year#17, d_moy#18]
Input [15]: [ws_sold_time_sk#1, ws_ship_mode_sk#2, ws_quantity#4, ws_ext_sales_price#5, ws_net_paid#6, ws_sold_date_sk#7, w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, d_date_sk#16, d_year#17, d_moy#18]

(unknown) Scan parquet spark_catalog.default.time_dim
Output [2]: [t_time_sk#19, t_time#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/time_dim]
PushedFilters: [IsNotNull(t_time), GreaterThanOrEqual(t_time,30838), LessThanOrEqual(t_time,59638), IsNotNull(t_time_sk)]
ReadSchema: struct<t_time_sk:int,t_time:int>

(14) CometFilter
Input [2]: [t_time_sk#19, t_time#20]
Condition : (((isnotnull(t_time#20) AND (t_time#20 >= 30838)) AND (t_time#20 <= 59638)) AND isnotnull(t_time_sk#19))

(15) CometProject
Input [2]: [t_time_sk#19, t_time#20]
Arguments: [t_time_sk#19], [t_time_sk#19]

(16) ColumnarToRow [codegen id : 3]
Input [1]: [t_time_sk#19]

(17) BroadcastExchange
Input [1]: [t_time_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ws_sold_time_sk#1]
Right keys [1]: [t_time_sk#19]
Join type: Inner
Join condition: None

(19) Project [codegen id : 5]
Output [12]: [ws_ship_mode_sk#2, ws_quantity#4, ws_ext_sales_price#5, ws_net_paid#6, w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, d_year#17, d_moy#18]
Input [14]: [ws_sold_time_sk#1, ws_ship_mode_sk#2, ws_quantity#4, ws_ext_sales_price#5, ws_net_paid#6, w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, d_year#17, d_moy#18, t_time_sk#19]

(unknown) Scan parquet spark_catalog.default.ship_mode
Output [2]: [sm_ship_mode_sk#21, sm_carrier#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/ship_mode]
PushedFilters: [In(sm_carrier, [BARIAN              ,DHL                 ]), IsNotNull(sm_ship_mode_sk)]
ReadSchema: struct<sm_ship_mode_sk:int,sm_carrier:string>

(21) CometFilter
Input [2]: [sm_ship_mode_sk#21, sm_carrier#22]
Condition : (sm_carrier#22 IN (DHL                 ,BARIAN              ) AND isnotnull(sm_ship_mode_sk#21))

(22) CometProject
Input [2]: [sm_ship_mode_sk#21, sm_carrier#22]
Arguments: [sm_ship_mode_sk#21], [sm_ship_mode_sk#21]

(23) ColumnarToRow [codegen id : 4]
Input [1]: [sm_ship_mode_sk#21]

(24) BroadcastExchange
Input [1]: [sm_ship_mode_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(25) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ws_ship_mode_sk#2]
Right keys [1]: [sm_ship_mode_sk#21]
Join type: Inner
Join condition: None

(26) Project [codegen id : 5]
Output [11]: [ws_quantity#4, ws_ext_sales_price#5, ws_net_paid#6, w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, d_year#17, d_moy#18]
Input [13]: [ws_ship_mode_sk#2, ws_quantity#4, ws_ext_sales_price#5, ws_net_paid#6, w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, d_year#17, d_moy#18, sm_ship_mode_sk#21]

(27) HashAggregate [codegen id : 5]
Input [11]: [ws_quantity#4, ws_ext_sales_price#5, ws_net_paid#6, w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, d_year#17, d_moy#18]
Keys [7]: [w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, d_year#17]
Functions [24]: [partial_sum(CASE WHEN (d_moy#18 = 1) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 2) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 3) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 4) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 5) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 6) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 7) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 8) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 9) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 10) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 11) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 12) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 1) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 2) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 3) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 4) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 5) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 6) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 7) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 8) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 9) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 10) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 11) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#18 = 12) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END)]
Aggregate Attributes [48]: [sum#23, isEmpty#24, sum#25, isEmpty#26, sum#27, isEmpty#28, sum#29, isEmpty#30, sum#31, isEmpty#32, sum#33, isEmpty#34, sum#35, isEmpty#36, sum#37, isEmpty#38, sum#39, isEmpty#40, sum#41, isEmpty#42, sum#43, isEmpty#44, sum#45, isEmpty#46, sum#47, isEmpty#48, sum#49, isEmpty#50, sum#51, isEmpty#52, sum#53, isEmpty#54, sum#55, isEmpty#56, sum#57, isEmpty#58, sum#59, isEmpty#60, sum#61, isEmpty#62, sum#63, isEmpty#64, sum#65, isEmpty#66, sum#67, isEmpty#68, sum#69, isEmpty#70]
Results [55]: [w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, d_year#17, sum#71, isEmpty#72, sum#73, isEmpty#74, sum#75, isEmpty#76, sum#77, isEmpty#78, sum#79, isEmpty#80, sum#81, isEmpty#82, sum#83, isEmpty#84, sum#85, isEmpty#86, sum#87, isEmpty#88, sum#89, isEmpty#90, sum#91, isEmpty#92, sum#93, isEmpty#94, sum#95, isEmpty#96, sum#97, isEmpty#98, sum#99, isEmpty#100, sum#101, isEmpty#102, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108, sum#109, isEmpty#110, sum#111, isEmpty#112, sum#113, isEmpty#114, sum#115, isEmpty#116, sum#117, isEmpty#118]

(28) RowToColumnar
Input [55]: [w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, d_year#17, sum#71, isEmpty#72, sum#73, isEmpty#74, sum#75, isEmpty#76, sum#77, isEmpty#78, sum#79, isEmpty#80, sum#81, isEmpty#82, sum#83, isEmpty#84, sum#85, isEmpty#86, sum#87, isEmpty#88, sum#89, isEmpty#90, sum#91, isEmpty#92, sum#93, isEmpty#94, sum#95, isEmpty#96, sum#97, isEmpty#98, sum#99, isEmpty#100, sum#101, isEmpty#102, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108, sum#109, isEmpty#110, sum#111, isEmpty#112, sum#113, isEmpty#114, sum#115, isEmpty#116, sum#117, isEmpty#118]

(29) CometColumnarExchange
Input [55]: [w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, d_year#17, sum#71, isEmpty#72, sum#73, isEmpty#74, sum#75, isEmpty#76, sum#77, isEmpty#78, sum#79, isEmpty#80, sum#81, isEmpty#82, sum#83, isEmpty#84, sum#85, isEmpty#86, sum#87, isEmpty#88, sum#89, isEmpty#90, sum#91, isEmpty#92, sum#93, isEmpty#94, sum#95, isEmpty#96, sum#97, isEmpty#98, sum#99, isEmpty#100, sum#101, isEmpty#102, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108, sum#109, isEmpty#110, sum#111, isEmpty#112, sum#113, isEmpty#114, sum#115, isEmpty#116, sum#117, isEmpty#118]
Arguments: hashpartitioning(w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, d_year#17, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(30) CometHashAggregate
Input [55]: [w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, d_year#17, sum#71, isEmpty#72, sum#73, isEmpty#74, sum#75, isEmpty#76, sum#77, isEmpty#78, sum#79, isEmpty#80, sum#81, isEmpty#82, sum#83, isEmpty#84, sum#85, isEmpty#86, sum#87, isEmpty#88, sum#89, isEmpty#90, sum#91, isEmpty#92, sum#93, isEmpty#94, sum#95, isEmpty#96, sum#97, isEmpty#98, sum#99, isEmpty#100, sum#101, isEmpty#102, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108, sum#109, isEmpty#110, sum#111, isEmpty#112, sum#113, isEmpty#114, sum#115, isEmpty#116, sum#117, isEmpty#118]
Keys [7]: [w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, d_year#17]
Functions [24]: [sum(CASE WHEN (d_moy#18 = 1) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 2) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 3) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 4) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 5) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 6) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 7) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 8) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 9) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 10) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 11) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 12) THEN (ws_ext_sales_price#5 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 1) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 2) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 3) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 4) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 5) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 6) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 7) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 8) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 9) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 10) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 11) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#18 = 12) THEN (ws_net_paid#6 * cast(ws_quantity#4 as decimal(10,0))) ELSE 0.00 END)]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [7]: [cs_sold_time_sk#119, cs_ship_mode_sk#120, cs_warehouse_sk#121, cs_quantity#122, cs_sales_price#123, cs_net_paid_inc_tax#124, cs_sold_date_sk#125]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#125), dynamicpruningexpression(cs_sold_date_sk#125 IN dynamicpruning#126)]
PushedFilters: [IsNotNull(cs_warehouse_sk), IsNotNull(cs_sold_time_sk), IsNotNull(cs_ship_mode_sk)]
ReadSchema: struct<cs_sold_time_sk:int,cs_ship_mode_sk:int,cs_warehouse_sk:int,cs_quantity:int,cs_sales_price:decimal(7,2),cs_net_paid_inc_tax:decimal(7,2)>

(32) CometFilter
Input [7]: [cs_sold_time_sk#119, cs_ship_mode_sk#120, cs_warehouse_sk#121, cs_quantity#122, cs_sales_price#123, cs_net_paid_inc_tax#124, cs_sold_date_sk#125]
Condition : ((isnotnull(cs_warehouse_sk#121) AND isnotnull(cs_sold_time_sk#119)) AND isnotnull(cs_ship_mode_sk#120))

(33) ColumnarToRow [codegen id : 10]
Input [7]: [cs_sold_time_sk#119, cs_ship_mode_sk#120, cs_warehouse_sk#121, cs_quantity#122, cs_sales_price#123, cs_net_paid_inc_tax#124, cs_sold_date_sk#125]

(34) ReusedExchange [Reuses operator id: 7]
Output [7]: [w_warehouse_sk#127, w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133]

(35) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_warehouse_sk#121]
Right keys [1]: [w_warehouse_sk#127]
Join type: Inner
Join condition: None

(36) Project [codegen id : 10]
Output [12]: [cs_sold_time_sk#119, cs_ship_mode_sk#120, cs_quantity#122, cs_sales_price#123, cs_net_paid_inc_tax#124, cs_sold_date_sk#125, w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133]
Input [14]: [cs_sold_time_sk#119, cs_ship_mode_sk#120, cs_warehouse_sk#121, cs_quantity#122, cs_sales_price#123, cs_net_paid_inc_tax#124, cs_sold_date_sk#125, w_warehouse_sk#127, w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133]

(37) ReusedExchange [Reuses operator id: 59]
Output [3]: [d_date_sk#134, d_year#135, d_moy#136]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#125]
Right keys [1]: [d_date_sk#134]
Join type: Inner
Join condition: None

(39) Project [codegen id : 10]
Output [13]: [cs_sold_time_sk#119, cs_ship_mode_sk#120, cs_quantity#122, cs_sales_price#123, cs_net_paid_inc_tax#124, w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133, d_year#135, d_moy#136]
Input [15]: [cs_sold_time_sk#119, cs_ship_mode_sk#120, cs_quantity#122, cs_sales_price#123, cs_net_paid_inc_tax#124, cs_sold_date_sk#125, w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133, d_date_sk#134, d_year#135, d_moy#136]

(40) ReusedExchange [Reuses operator id: 17]
Output [1]: [t_time_sk#137]

(41) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_time_sk#119]
Right keys [1]: [t_time_sk#137]
Join type: Inner
Join condition: None

(42) Project [codegen id : 10]
Output [12]: [cs_ship_mode_sk#120, cs_quantity#122, cs_sales_price#123, cs_net_paid_inc_tax#124, w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133, d_year#135, d_moy#136]
Input [14]: [cs_sold_time_sk#119, cs_ship_mode_sk#120, cs_quantity#122, cs_sales_price#123, cs_net_paid_inc_tax#124, w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133, d_year#135, d_moy#136, t_time_sk#137]

(43) ReusedExchange [Reuses operator id: 24]
Output [1]: [sm_ship_mode_sk#138]

(44) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_ship_mode_sk#120]
Right keys [1]: [sm_ship_mode_sk#138]
Join type: Inner
Join condition: None

(45) Project [codegen id : 10]
Output [11]: [cs_quantity#122, cs_sales_price#123, cs_net_paid_inc_tax#124, w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133, d_year#135, d_moy#136]
Input [13]: [cs_ship_mode_sk#120, cs_quantity#122, cs_sales_price#123, cs_net_paid_inc_tax#124, w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133, d_year#135, d_moy#136, sm_ship_mode_sk#138]

(46) HashAggregate [codegen id : 10]
Input [11]: [cs_quantity#122, cs_sales_price#123, cs_net_paid_inc_tax#124, w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133, d_year#135, d_moy#136]
Keys [7]: [w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133, d_year#135]
Functions [24]: [partial_sum(CASE WHEN (d_moy#136 = 1) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 2) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 3) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 4) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 5) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 6) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 7) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 8) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 9) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 10) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 11) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 12) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 1) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 2) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 3) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 4) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 5) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 6) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 7) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 8) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 9) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 10) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 11) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#136 = 12) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END)]
Aggregate Attributes [48]: [sum#139, isEmpty#140, sum#141, isEmpty#142, sum#143, isEmpty#144, sum#145, isEmpty#146, sum#147, isEmpty#148, sum#149, isEmpty#150, sum#151, isEmpty#152, sum#153, isEmpty#154, sum#155, isEmpty#156, sum#157, isEmpty#158, sum#159, isEmpty#160, sum#161, isEmpty#162, sum#163, isEmpty#164, sum#165, isEmpty#166, sum#167, isEmpty#168, sum#169, isEmpty#170, sum#171, isEmpty#172, sum#173, isEmpty#174, sum#175, isEmpty#176, sum#177, isEmpty#178, sum#179, isEmpty#180, sum#181, isEmpty#182, sum#183, isEmpty#184, sum#185, isEmpty#186]
Results [55]: [w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133, d_year#135, sum#187, isEmpty#188, sum#189, isEmpty#190, sum#191, isEmpty#192, sum#193, isEmpty#194, sum#195, isEmpty#196, sum#197, isEmpty#198, sum#199, isEmpty#200, sum#201, isEmpty#202, sum#203, isEmpty#204, sum#205, isEmpty#206, sum#207, isEmpty#208, sum#209, isEmpty#210, sum#211, isEmpty#212, sum#213, isEmpty#214, sum#215, isEmpty#216, sum#217, isEmpty#218, sum#219, isEmpty#220, sum#221, isEmpty#222, sum#223, isEmpty#224, sum#225, isEmpty#226, sum#227, isEmpty#228, sum#229, isEmpty#230, sum#231, isEmpty#232, sum#233, isEmpty#234]

(47) RowToColumnar
Input [55]: [w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133, d_year#135, sum#187, isEmpty#188, sum#189, isEmpty#190, sum#191, isEmpty#192, sum#193, isEmpty#194, sum#195, isEmpty#196, sum#197, isEmpty#198, sum#199, isEmpty#200, sum#201, isEmpty#202, sum#203, isEmpty#204, sum#205, isEmpty#206, sum#207, isEmpty#208, sum#209, isEmpty#210, sum#211, isEmpty#212, sum#213, isEmpty#214, sum#215, isEmpty#216, sum#217, isEmpty#218, sum#219, isEmpty#220, sum#221, isEmpty#222, sum#223, isEmpty#224, sum#225, isEmpty#226, sum#227, isEmpty#228, sum#229, isEmpty#230, sum#231, isEmpty#232, sum#233, isEmpty#234]

(48) CometColumnarExchange
Input [55]: [w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133, d_year#135, sum#187, isEmpty#188, sum#189, isEmpty#190, sum#191, isEmpty#192, sum#193, isEmpty#194, sum#195, isEmpty#196, sum#197, isEmpty#198, sum#199, isEmpty#200, sum#201, isEmpty#202, sum#203, isEmpty#204, sum#205, isEmpty#206, sum#207, isEmpty#208, sum#209, isEmpty#210, sum#211, isEmpty#212, sum#213, isEmpty#214, sum#215, isEmpty#216, sum#217, isEmpty#218, sum#219, isEmpty#220, sum#221, isEmpty#222, sum#223, isEmpty#224, sum#225, isEmpty#226, sum#227, isEmpty#228, sum#229, isEmpty#230, sum#231, isEmpty#232, sum#233, isEmpty#234]
Arguments: hashpartitioning(w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133, d_year#135, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(49) CometHashAggregate
Input [55]: [w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133, d_year#135, sum#187, isEmpty#188, sum#189, isEmpty#190, sum#191, isEmpty#192, sum#193, isEmpty#194, sum#195, isEmpty#196, sum#197, isEmpty#198, sum#199, isEmpty#200, sum#201, isEmpty#202, sum#203, isEmpty#204, sum#205, isEmpty#206, sum#207, isEmpty#208, sum#209, isEmpty#210, sum#211, isEmpty#212, sum#213, isEmpty#214, sum#215, isEmpty#216, sum#217, isEmpty#218, sum#219, isEmpty#220, sum#221, isEmpty#222, sum#223, isEmpty#224, sum#225, isEmpty#226, sum#227, isEmpty#228, sum#229, isEmpty#230, sum#231, isEmpty#232, sum#233, isEmpty#234]
Keys [7]: [w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133, d_year#135]
Functions [24]: [sum(CASE WHEN (d_moy#136 = 1) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 2) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 3) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 4) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 5) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 6) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 7) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 8) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 9) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 10) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 11) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 12) THEN (cs_sales_price#123 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 1) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 2) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 3) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 4) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 5) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 6) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 7) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 8) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 9) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 10) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 11) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#136 = 12) THEN (cs_net_paid_inc_tax#124 * cast(cs_quantity#122 as decimal(10,0))) ELSE 0.00 END)]

(50) CometUnion
Child 0 Input [32]: [w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, ship_carriers#235, year#236, jan_sales#237, feb_sales#238, mar_sales#239, apr_sales#240, may_sales#241, jun_sales#242, jul_sales#243, aug_sales#244, sep_sales#245, oct_sales#246, nov_sales#247, dec_sales#248, jan_net#249, feb_net#250, mar_net#251, apr_net#252, may_net#253, jun_net#254, jul_net#255, aug_net#256, sep_net#257, oct_net#258, nov_net#259, dec_net#260]
Child 1 Input [32]: [w_warehouse_name#128, w_warehouse_sq_ft#129, w_city#130, w_county#131, w_state#132, w_country#133, ship_carriers#261, year#262, jan_sales#263, feb_sales#264, mar_sales#265, apr_sales#266, may_sales#267, jun_sales#268, jul_sales#269, aug_sales#270, sep_sales#271, oct_sales#272, nov_sales#273, dec_sales#274, jan_net#275, feb_net#276, mar_net#277, apr_net#278, may_net#279, jun_net#280, jul_net#281, aug_net#282, sep_net#283, oct_net#284, nov_net#285, dec_net#286]

(51) CometHashAggregate
Input [32]: [w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, ship_carriers#235, year#236, jan_sales#237, feb_sales#238, mar_sales#239, apr_sales#240, may_sales#241, jun_sales#242, jul_sales#243, aug_sales#244, sep_sales#245, oct_sales#246, nov_sales#247, dec_sales#248, jan_net#249, feb_net#250, mar_net#251, apr_net#252, may_net#253, jun_net#254, jul_net#255, aug_net#256, sep_net#257, oct_net#258, nov_net#259, dec_net#260]
Keys [8]: [w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, ship_carriers#235, year#236]
Functions [36]: [partial_sum(jan_sales#237), partial_sum(feb_sales#238), partial_sum(mar_sales#239), partial_sum(apr_sales#240), partial_sum(may_sales#241), partial_sum(jun_sales#242), partial_sum(jul_sales#243), partial_sum(aug_sales#244), partial_sum(sep_sales#245), partial_sum(oct_sales#246), partial_sum(nov_sales#247), partial_sum(dec_sales#248), partial_sum((jan_sales#237 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), partial_sum((feb_sales#238 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), partial_sum((mar_sales#239 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), partial_sum((apr_sales#240 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), partial_sum((may_sales#241 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), partial_sum((jun_sales#242 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), partial_sum((jul_sales#243 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), partial_sum((aug_sales#244 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), partial_sum((sep_sales#245 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), partial_sum((oct_sales#246 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), partial_sum((nov_sales#247 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), partial_sum((dec_sales#248 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), partial_sum(jan_net#249), partial_sum(feb_net#250), partial_sum(mar_net#251), partial_sum(apr_net#252), partial_sum(may_net#253), partial_sum(jun_net#254), partial_sum(jul_net#255), partial_sum(aug_net#256), partial_sum(sep_net#257), partial_sum(oct_net#258), partial_sum(nov_net#259), partial_sum(dec_net#260)]

(52) CometColumnarExchange
Input [80]: [w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, ship_carriers#235, year#236, sum#287, isEmpty#288, sum#289, isEmpty#290, sum#291, isEmpty#292, sum#293, isEmpty#294, sum#295, isEmpty#296, sum#297, isEmpty#298, sum#299, isEmpty#300, sum#301, isEmpty#302, sum#303, isEmpty#304, sum#305, isEmpty#306, sum#307, isEmpty#308, sum#309, isEmpty#310, sum#311, isEmpty#312, sum#313, isEmpty#314, sum#315, isEmpty#316, sum#317, isEmpty#318, sum#319, isEmpty#320, sum#321, isEmpty#322, sum#323, isEmpty#324, sum#325, isEmpty#326, sum#327, isEmpty#328, sum#329, isEmpty#330, sum#331, isEmpty#332, sum#333, isEmpty#334, sum#335, isEmpty#336, sum#337, isEmpty#338, sum#339, isEmpty#340, sum#341, isEmpty#342, sum#343, isEmpty#344, sum#345, isEmpty#346, sum#347, isEmpty#348, sum#349, isEmpty#350, sum#351, isEmpty#352, sum#353, isEmpty#354, sum#355, isEmpty#356, sum#357, isEmpty#358]
Arguments: hashpartitioning(w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, ship_carriers#235, year#236, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(53) CometHashAggregate
Input [80]: [w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, ship_carriers#235, year#236, sum#287, isEmpty#288, sum#289, isEmpty#290, sum#291, isEmpty#292, sum#293, isEmpty#294, sum#295, isEmpty#296, sum#297, isEmpty#298, sum#299, isEmpty#300, sum#301, isEmpty#302, sum#303, isEmpty#304, sum#305, isEmpty#306, sum#307, isEmpty#308, sum#309, isEmpty#310, sum#311, isEmpty#312, sum#313, isEmpty#314, sum#315, isEmpty#316, sum#317, isEmpty#318, sum#319, isEmpty#320, sum#321, isEmpty#322, sum#323, isEmpty#324, sum#325, isEmpty#326, sum#327, isEmpty#328, sum#329, isEmpty#330, sum#331, isEmpty#332, sum#333, isEmpty#334, sum#335, isEmpty#336, sum#337, isEmpty#338, sum#339, isEmpty#340, sum#341, isEmpty#342, sum#343, isEmpty#344, sum#345, isEmpty#346, sum#347, isEmpty#348, sum#349, isEmpty#350, sum#351, isEmpty#352, sum#353, isEmpty#354, sum#355, isEmpty#356, sum#357, isEmpty#358]
Keys [8]: [w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, ship_carriers#235, year#236]
Functions [36]: [sum(jan_sales#237), sum(feb_sales#238), sum(mar_sales#239), sum(apr_sales#240), sum(may_sales#241), sum(jun_sales#242), sum(jul_sales#243), sum(aug_sales#244), sum(sep_sales#245), sum(oct_sales#246), sum(nov_sales#247), sum(dec_sales#248), sum((jan_sales#237 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), sum((feb_sales#238 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), sum((mar_sales#239 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), sum((apr_sales#240 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), sum((may_sales#241 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), sum((jun_sales#242 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), sum((jul_sales#243 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), sum((aug_sales#244 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), sum((sep_sales#245 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), sum((oct_sales#246 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), sum((nov_sales#247 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), sum((dec_sales#248 / cast(w_warehouse_sq_ft#11 as decimal(10,0)))), sum(jan_net#249), sum(feb_net#250), sum(mar_net#251), sum(apr_net#252), sum(may_net#253), sum(jun_net#254), sum(jul_net#255), sum(aug_net#256), sum(sep_net#257), sum(oct_net#258), sum(nov_net#259), sum(dec_net#260)]

(54) CometTakeOrderedAndProject
Input [44]: [w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, ship_carriers#235, year#236, jan_sales#359, feb_sales#360, mar_sales#361, apr_sales#362, may_sales#363, jun_sales#364, jul_sales#365, aug_sales#366, sep_sales#367, oct_sales#368, nov_sales#369, dec_sales#370, jan_sales_per_sq_foot#371, feb_sales_per_sq_foot#372, mar_sales_per_sq_foot#373, apr_sales_per_sq_foot#374, may_sales_per_sq_foot#375, jun_sales_per_sq_foot#376, jul_sales_per_sq_foot#377, aug_sales_per_sq_foot#378, sep_sales_per_sq_foot#379, oct_sales_per_sq_foot#380, nov_sales_per_sq_foot#381, dec_sales_per_sq_foot#382, jan_net#383, feb_net#384, mar_net#385, apr_net#386, may_net#387, jun_net#388, jul_net#389, aug_net#390, sep_net#391, oct_net#392, nov_net#393, dec_net#394]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[w_warehouse_name#10 ASC NULLS FIRST], output=[w_warehouse_name#10,w_warehouse_sq_ft#11,w_city#12,w_county#13,w_state#14,w_country#15,ship_carriers#235,year#236,jan_sales#359,feb_sales#360,mar_sales#361,apr_sales#362,may_sales#363,jun_sales#364,jul_sales#365,aug_sales#366,sep_sales#367,oct_sales#368,nov_sales#369,dec_sales#370,jan_sales_per_sq_foot#371,feb_sales_per_sq_foot#372,mar_sales_per_sq_foot#373,apr_sales_per_sq_foot#374,may_sales_per_sq_foot#375,jun_sales_per_sq_foot#376,jul_sales_per_sq_foot#377,aug_sales_per_sq_foot#378,sep_sales_per_sq_foot#379,oct_sales_per_sq_foot#380,nov_sales_per_sq_foot#381,dec_sales_per_sq_foot#382,jan_net#383,feb_net#384,mar_net#385,apr_net#386,may_net#387,jun_net#388,jul_net#389,aug_net#390,sep_net#391,oct_net#392,nov_net#393,dec_net#394]), 100, [w_warehouse_name#10 ASC NULLS FIRST], [w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, ship_carriers#235, year#236, jan_sales#359, feb_sales#360, mar_sales#361, apr_sales#362, may_sales#363, jun_sales#364, jul_sales#365, aug_sales#366, sep_sales#367, oct_sales#368, nov_sales#369, dec_sales#370, jan_sales_per_sq_foot#371, feb_sales_per_sq_foot#372, mar_sales_per_sq_foot#373, apr_sales_per_sq_foot#374, may_sales_per_sq_foot#375, jun_sales_per_sq_foot#376, jul_sales_per_sq_foot#377, aug_sales_per_sq_foot#378, sep_sales_per_sq_foot#379, oct_sales_per_sq_foot#380, nov_sales_per_sq_foot#381, dec_sales_per_sq_foot#382, jan_net#383, feb_net#384, mar_net#385, apr_net#386, may_net#387, jun_net#388, jul_net#389, aug_net#390, sep_net#391, oct_net#392, nov_net#393, dec_net#394]

(55) ColumnarToRow [codegen id : 11]
Input [44]: [w_warehouse_name#10, w_warehouse_sq_ft#11, w_city#12, w_county#13, w_state#14, w_country#15, ship_carriers#235, year#236, jan_sales#359, feb_sales#360, mar_sales#361, apr_sales#362, may_sales#363, jun_sales#364, jul_sales#365, aug_sales#366, sep_sales#367, oct_sales#368, nov_sales#369, dec_sales#370, jan_sales_per_sq_foot#371, feb_sales_per_sq_foot#372, mar_sales_per_sq_foot#373, apr_sales_per_sq_foot#374, may_sales_per_sq_foot#375, jun_sales_per_sq_foot#376, jul_sales_per_sq_foot#377, aug_sales_per_sq_foot#378, sep_sales_per_sq_foot#379, oct_sales_per_sq_foot#380, nov_sales_per_sq_foot#381, dec_sales_per_sq_foot#382, jan_net#383, feb_net#384, mar_net#385, apr_net#386, may_net#387, jun_net#388, jul_net#389, aug_net#390, sep_net#391, oct_net#392, nov_net#393, dec_net#394]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (59)
+- * ColumnarToRow (58)
   +- CometFilter (57)
      +- CometScan parquet spark_catalog.default.date_dim (56)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#16, d_year#17, d_moy#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(57) CometFilter
Input [3]: [d_date_sk#16, d_year#17, d_moy#18]
Condition : ((isnotnull(d_year#17) AND (d_year#17 = 2001)) AND isnotnull(d_date_sk#16))

(58) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#16, d_year#17, d_moy#18]

(59) BroadcastExchange
Input [3]: [d_date_sk#16, d_year#17, d_moy#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=7]

Subquery:2 Hosting operator id = 31 Hosting Expression = cs_sold_date_sk#125 IN dynamicpruning#8


