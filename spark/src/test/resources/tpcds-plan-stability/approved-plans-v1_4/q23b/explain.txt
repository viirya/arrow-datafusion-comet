== Physical Plan ==
* ColumnarToRow (97)
+- CometTakeOrderedAndProject (96)
   +- CometUnion (95)
      :- CometHashAggregate (68)
      :  +- CometColumnarExchange (67)
      :     +- RowToColumnar (66)
      :        +- * HashAggregate (65)
      :           +- * Project (64)
      :              +- * BroadcastHashJoin Inner BuildRight (63)
      :                 :- * Project (61)
      :                 :  +- * BroadcastHashJoin Inner BuildRight (60)
      :                 :     :- * ColumnarToRow (47)
      :                 :     :  +- CometSortMergeJoin (46)
      :                 :     :     :- CometSort (28)
      :                 :     :     :  +- CometColumnarExchange (27)
      :                 :     :     :     +- RowToColumnar (26)
      :                 :     :     :        +- * Project (25)
      :                 :     :     :           +- * BroadcastHashJoin LeftSemi BuildRight (24)
      :                 :     :     :              :- * ColumnarToRow (3)
      :                 :     :     :              :  +- CometFilter (2)
      :                 :     :     :              :     +- CometScan parquet spark_catalog.default.catalog_sales (1)
      :                 :     :     :              +- BroadcastExchange (23)
      :                 :     :     :                 +- * ColumnarToRow (22)
      :                 :     :     :                    +- CometProject (21)
      :                 :     :     :                       +- CometFilter (20)
      :                 :     :     :                          +- CometHashAggregate (19)
      :                 :     :     :                             +- CometColumnarExchange (18)
      :                 :     :     :                                +- RowToColumnar (17)
      :                 :     :     :                                   +- * HashAggregate (16)
      :                 :     :     :                                      +- * Project (15)
      :                 :     :     :                                         +- * BroadcastHashJoin Inner BuildRight (14)
      :                 :     :     :                                            :- * Project (9)
      :                 :     :     :                                            :  +- * BroadcastHashJoin Inner BuildRight (8)
      :                 :     :     :                                            :     :- * ColumnarToRow (6)
      :                 :     :     :                                            :     :  +- CometFilter (5)
      :                 :     :     :                                            :     :     +- CometScan parquet spark_catalog.default.store_sales (4)
      :                 :     :     :                                            :     +- ReusedExchange (7)
      :                 :     :     :                                            +- BroadcastExchange (13)
      :                 :     :     :                                               +- * ColumnarToRow (12)
      :                 :     :     :                                                  +- CometFilter (11)
      :                 :     :     :                                                     +- CometScan parquet spark_catalog.default.item (10)
      :                 :     :     +- CometSort (45)
      :                 :     :        +- CometProject (44)
      :                 :     :           +- CometFilter (43)
      :                 :     :              +- CometHashAggregate (42)
      :                 :     :                 +- CometColumnarExchange (41)
      :                 :     :                    +- RowToColumnar (40)
      :                 :     :                       +- * HashAggregate (39)
      :                 :     :                          +- * Project (38)
      :                 :     :                             +- * BroadcastHashJoin Inner BuildRight (37)
      :                 :     :                                :- * ColumnarToRow (32)
      :                 :     :                                :  +- CometProject (31)
      :                 :     :                                :     +- CometFilter (30)
      :                 :     :                                :        +- CometScan parquet spark_catalog.default.store_sales (29)
      :                 :     :                                +- BroadcastExchange (36)
      :                 :     :                                   +- * ColumnarToRow (35)
      :                 :     :                                      +- CometFilter (34)
      :                 :     :                                         +- CometScan parquet spark_catalog.default.customer (33)
      :                 :     +- BroadcastExchange (59)
      :                 :        +- * ColumnarToRow (58)
      :                 :           +- CometSortMergeJoin (57)
      :                 :              :- CometSort (51)
      :                 :              :  +- CometColumnarExchange (50)
      :                 :              :     +- CometFilter (49)
      :                 :              :        +- CometScan parquet spark_catalog.default.customer (48)
      :                 :              +- CometSort (56)
      :                 :                 +- CometProject (55)
      :                 :                    +- CometFilter (54)
      :                 :                       +- CometHashAggregate (53)
      :                 :                          +- ReusedExchange (52)
      :                 +- ReusedExchange (62)
      +- CometHashAggregate (94)
         +- CometColumnarExchange (93)
            +- RowToColumnar (92)
               +- * HashAggregate (91)
                  +- * Project (90)
                     +- * BroadcastHashJoin Inner BuildRight (89)
                        :- * Project (87)
                        :  +- * BroadcastHashJoin Inner BuildRight (86)
                        :     :- * ColumnarToRow (84)
                        :     :  +- CometSortMergeJoin (83)
                        :     :     :- CometSort (77)
                        :     :     :  +- CometColumnarExchange (76)
                        :     :     :     +- RowToColumnar (75)
                        :     :     :        +- * Project (74)
                        :     :     :           +- * BroadcastHashJoin LeftSemi BuildRight (73)
                        :     :     :              :- * ColumnarToRow (71)
                        :     :     :              :  +- CometFilter (70)
                        :     :     :              :     +- CometScan parquet spark_catalog.default.web_sales (69)
                        :     :     :              +- ReusedExchange (72)
                        :     :     +- CometSort (82)
                        :     :        +- CometProject (81)
                        :     :           +- CometFilter (80)
                        :     :              +- CometHashAggregate (79)
                        :     :                 +- ReusedExchange (78)
                        :     +- ReusedExchange (85)
                        +- ReusedExchange (88)


(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) CometFilter
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_bill_customer_sk#1)

(3) ColumnarToRow [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(5) CometFilter
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_item_sk#7)

(6) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]

(7) ReusedExchange [Reuses operator id: 107]
Output [2]: [d_date_sk#10, d_date#11]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join type: Inner
Join condition: None

(9) Project [codegen id : 3]
Output [2]: [ss_item_sk#7, d_date#11]
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#10, d_date#11]

(unknown) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#12, i_item_desc#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(11) CometFilter
Input [2]: [i_item_sk#12, i_item_desc#13]
Condition : isnotnull(i_item_sk#12)

(12) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]

(13) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_desc#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#12]
Join type: Inner
Join condition: None

(15) Project [codegen id : 3]
Output [3]: [d_date#11, i_item_sk#12, substr(i_item_desc#13, 1, 30) AS _groupingexpression#14]
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#12, i_item_desc#13]

(16) HashAggregate [codegen id : 3]
Input [3]: [d_date#11, i_item_sk#12, _groupingexpression#14]
Keys [3]: [_groupingexpression#14, i_item_sk#12, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#15]
Results [4]: [_groupingexpression#14, i_item_sk#12, d_date#11, count#16]

(17) RowToColumnar
Input [4]: [_groupingexpression#14, i_item_sk#12, d_date#11, count#16]

(18) CometColumnarExchange
Input [4]: [_groupingexpression#14, i_item_sk#12, d_date#11, count#16]
Arguments: hashpartitioning(_groupingexpression#14, i_item_sk#12, d_date#11, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(19) CometHashAggregate
Input [4]: [_groupingexpression#14, i_item_sk#12, d_date#11, count#16]
Keys [3]: [_groupingexpression#14, i_item_sk#12, d_date#11]
Functions [1]: [count(1)]

(20) CometFilter
Input [2]: [item_sk#17, cnt#18]
Condition : (cnt#18 > 4)

(21) CometProject
Input [2]: [item_sk#17, cnt#18]
Arguments: [item_sk#17], [item_sk#17]

(22) ColumnarToRow [codegen id : 4]
Input [1]: [item_sk#17]

(23) BroadcastExchange
Input [1]: [item_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(24) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#17]
Join type: LeftSemi
Join condition: None

(25) Project [codegen id : 5]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(26) RowToColumnar
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(27) CometColumnarExchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(28) CometSort
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5], [cs_bill_customer_sk#1 ASC NULLS FIRST]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21, ss_sold_date_sk#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(30) CometFilter
Input [4]: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21, ss_sold_date_sk#22]
Condition : isnotnull(ss_customer_sk#19)

(31) CometProject
Input [4]: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21, ss_sold_date_sk#22]
Arguments: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21], [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21]

(32) ColumnarToRow [codegen id : 7]
Input [3]: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21]

(unknown) Scan parquet spark_catalog.default.customer
Output [1]: [c_customer_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(34) CometFilter
Input [1]: [c_customer_sk#23]
Condition : isnotnull(c_customer_sk#23)

(35) ColumnarToRow [codegen id : 6]
Input [1]: [c_customer_sk#23]

(36) BroadcastExchange
Input [1]: [c_customer_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(37) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_customer_sk#19]
Right keys [1]: [c_customer_sk#23]
Join type: Inner
Join condition: None

(38) Project [codegen id : 7]
Output [3]: [ss_quantity#20, ss_sales_price#21, c_customer_sk#23]
Input [4]: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21, c_customer_sk#23]

(39) HashAggregate [codegen id : 7]
Input [3]: [ss_quantity#20, ss_sales_price#21, c_customer_sk#23]
Keys [1]: [c_customer_sk#23]
Functions [1]: [partial_sum((cast(ss_quantity#20 as decimal(10,0)) * ss_sales_price#21))]
Aggregate Attributes [2]: [sum#24, isEmpty#25]
Results [3]: [c_customer_sk#23, sum#26, isEmpty#27]

(40) RowToColumnar
Input [3]: [c_customer_sk#23, sum#26, isEmpty#27]

(41) CometColumnarExchange
Input [3]: [c_customer_sk#23, sum#26, isEmpty#27]
Arguments: hashpartitioning(c_customer_sk#23, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(42) CometHashAggregate
Input [3]: [c_customer_sk#23, sum#26, isEmpty#27]
Keys [1]: [c_customer_sk#23]
Functions [1]: [sum((cast(ss_quantity#20 as decimal(10,0)) * ss_sales_price#21))]

(43) CometFilter
Input [2]: [c_customer_sk#23, ssales#28]
Condition : (isnotnull(ssales#28) AND (cast(ssales#28 as decimal(38,8)) > (0.500000 * Subquery scalar-subquery#29, [id=#30])))

(44) CometProject
Input [2]: [c_customer_sk#23, ssales#28]
Arguments: [c_customer_sk#23], [c_customer_sk#23]

(45) CometSort
Input [1]: [c_customer_sk#23]
Arguments: [c_customer_sk#23], [c_customer_sk#23 ASC NULLS FIRST]

(46) CometSortMergeJoin
Left output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Right output [1]: [c_customer_sk#23]
Arguments: [cs_bill_customer_sk#1], [c_customer_sk#23], LeftSemi

(47) ColumnarToRow [codegen id : 12]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(unknown) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#31, c_first_name#32, c_last_name#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(49) CometFilter
Input [3]: [c_customer_sk#31, c_first_name#32, c_last_name#33]
Condition : isnotnull(c_customer_sk#31)

(50) CometColumnarExchange
Input [3]: [c_customer_sk#31, c_first_name#32, c_last_name#33]
Arguments: hashpartitioning(c_customer_sk#31, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(51) CometSort
Input [3]: [c_customer_sk#31, c_first_name#32, c_last_name#33]
Arguments: [c_customer_sk#31, c_first_name#32, c_last_name#33], [c_customer_sk#31 ASC NULLS FIRST]

(52) ReusedExchange [Reuses operator id: 41]
Output [3]: [c_customer_sk#23, sum#26, isEmpty#27]

(53) CometHashAggregate
Input [3]: [c_customer_sk#23, sum#26, isEmpty#27]
Keys [1]: [c_customer_sk#23]
Functions [1]: [sum((cast(ss_quantity#20 as decimal(10,0)) * ss_sales_price#21))]

(54) CometFilter
Input [2]: [c_customer_sk#23, ssales#28]
Condition : (isnotnull(ssales#28) AND (cast(ssales#28 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#29, [id=#30])))

(55) CometProject
Input [2]: [c_customer_sk#23, ssales#28]
Arguments: [c_customer_sk#23], [c_customer_sk#23]

(56) CometSort
Input [1]: [c_customer_sk#23]
Arguments: [c_customer_sk#23], [c_customer_sk#23 ASC NULLS FIRST]

(57) CometSortMergeJoin
Left output [3]: [c_customer_sk#31, c_first_name#32, c_last_name#33]
Right output [1]: [c_customer_sk#23]
Arguments: [c_customer_sk#31], [c_customer_sk#23], LeftSemi

(58) ColumnarToRow [codegen id : 10]
Input [3]: [c_customer_sk#31, c_first_name#32, c_last_name#33]

(59) BroadcastExchange
Input [3]: [c_customer_sk#31, c_first_name#32, c_last_name#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(60) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#31]
Join type: Inner
Join condition: None

(61) Project [codegen id : 12]
Output [5]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#32, c_last_name#33]
Input [7]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_customer_sk#31, c_first_name#32, c_last_name#33]

(62) ReusedExchange [Reuses operator id: 102]
Output [1]: [d_date_sk#34]

(63) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#34]
Join type: Inner
Join condition: None

(64) Project [codegen id : 12]
Output [4]: [cs_quantity#3, cs_list_price#4, c_first_name#32, c_last_name#33]
Input [6]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#32, c_last_name#33, d_date_sk#34]

(65) HashAggregate [codegen id : 12]
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#32, c_last_name#33]
Keys [2]: [c_last_name#33, c_first_name#32]
Functions [1]: [partial_sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))]
Aggregate Attributes [2]: [sum#35, isEmpty#36]
Results [4]: [c_last_name#33, c_first_name#32, sum#37, isEmpty#38]

(66) RowToColumnar
Input [4]: [c_last_name#33, c_first_name#32, sum#37, isEmpty#38]

(67) CometColumnarExchange
Input [4]: [c_last_name#33, c_first_name#32, sum#37, isEmpty#38]
Arguments: hashpartitioning(c_last_name#33, c_first_name#32, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(68) CometHashAggregate
Input [4]: [c_last_name#33, c_first_name#32, sum#37, isEmpty#38]
Keys [2]: [c_last_name#33, c_first_name#32]
Functions [1]: [sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [5]: [ws_item_sk#39, ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#43), dynamicpruningexpression(ws_sold_date_sk#43 IN dynamicpruning#44)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(70) CometFilter
Input [5]: [ws_item_sk#39, ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]
Condition : isnotnull(ws_bill_customer_sk#40)

(71) ColumnarToRow [codegen id : 17]
Input [5]: [ws_item_sk#39, ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]

(72) ReusedExchange [Reuses operator id: 23]
Output [1]: [item_sk#17]

(73) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_item_sk#39]
Right keys [1]: [item_sk#17]
Join type: LeftSemi
Join condition: None

(74) Project [codegen id : 17]
Output [4]: [ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]
Input [5]: [ws_item_sk#39, ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]

(75) RowToColumnar
Input [4]: [ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]

(76) CometColumnarExchange
Input [4]: [ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]
Arguments: hashpartitioning(ws_bill_customer_sk#40, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(77) CometSort
Input [4]: [ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]
Arguments: [ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43], [ws_bill_customer_sk#40 ASC NULLS FIRST]

(78) ReusedExchange [Reuses operator id: 41]
Output [3]: [c_customer_sk#23, sum#26, isEmpty#27]

(79) CometHashAggregate
Input [3]: [c_customer_sk#23, sum#26, isEmpty#27]
Keys [1]: [c_customer_sk#23]
Functions [1]: [sum((cast(ss_quantity#20 as decimal(10,0)) * ss_sales_price#21))]

(80) CometFilter
Input [2]: [c_customer_sk#23, ssales#28]
Condition : (isnotnull(ssales#28) AND (cast(ssales#28 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#29, [id=#30])))

(81) CometProject
Input [2]: [c_customer_sk#23, ssales#28]
Arguments: [c_customer_sk#23], [c_customer_sk#23]

(82) CometSort
Input [1]: [c_customer_sk#23]
Arguments: [c_customer_sk#23], [c_customer_sk#23 ASC NULLS FIRST]

(83) CometSortMergeJoin
Left output [4]: [ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]
Right output [1]: [c_customer_sk#23]
Arguments: [ws_bill_customer_sk#40], [c_customer_sk#23], LeftSemi

(84) ColumnarToRow [codegen id : 24]
Input [4]: [ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]

(85) ReusedExchange [Reuses operator id: 59]
Output [3]: [c_customer_sk#45, c_first_name#46, c_last_name#47]

(86) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [ws_bill_customer_sk#40]
Right keys [1]: [c_customer_sk#45]
Join type: Inner
Join condition: None

(87) Project [codegen id : 24]
Output [5]: [ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43, c_first_name#46, c_last_name#47]
Input [7]: [ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43, c_customer_sk#45, c_first_name#46, c_last_name#47]

(88) ReusedExchange [Reuses operator id: 102]
Output [1]: [d_date_sk#48]

(89) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [ws_sold_date_sk#43]
Right keys [1]: [d_date_sk#48]
Join type: Inner
Join condition: None

(90) Project [codegen id : 24]
Output [4]: [ws_quantity#41, ws_list_price#42, c_first_name#46, c_last_name#47]
Input [6]: [ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43, c_first_name#46, c_last_name#47, d_date_sk#48]

(91) HashAggregate [codegen id : 24]
Input [4]: [ws_quantity#41, ws_list_price#42, c_first_name#46, c_last_name#47]
Keys [2]: [c_last_name#47, c_first_name#46]
Functions [1]: [partial_sum((cast(ws_quantity#41 as decimal(10,0)) * ws_list_price#42))]
Aggregate Attributes [2]: [sum#49, isEmpty#50]
Results [4]: [c_last_name#47, c_first_name#46, sum#51, isEmpty#52]

(92) RowToColumnar
Input [4]: [c_last_name#47, c_first_name#46, sum#51, isEmpty#52]

(93) CometColumnarExchange
Input [4]: [c_last_name#47, c_first_name#46, sum#51, isEmpty#52]
Arguments: hashpartitioning(c_last_name#47, c_first_name#46, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=11]

(94) CometHashAggregate
Input [4]: [c_last_name#47, c_first_name#46, sum#51, isEmpty#52]
Keys [2]: [c_last_name#47, c_first_name#46]
Functions [1]: [sum((cast(ws_quantity#41 as decimal(10,0)) * ws_list_price#42))]

(95) CometUnion
Child 0 Input [3]: [c_last_name#33, c_first_name#32, sales#53]
Child 1 Input [3]: [c_last_name#47, c_first_name#46, sales#54]

(96) CometTakeOrderedAndProject
Input [3]: [c_last_name#33, c_first_name#32, sales#53]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[c_last_name#33 ASC NULLS FIRST,c_first_name#32 ASC NULLS FIRST,sales#53 ASC NULLS FIRST], output=[c_last_name#33,c_first_name#32,sales#53]), 100, [c_last_name#33 ASC NULLS FIRST, c_first_name#32 ASC NULLS FIRST, sales#53 ASC NULLS FIRST], [c_last_name#33, c_first_name#32, sales#53]

(97) ColumnarToRow [codegen id : 25]
Input [3]: [c_last_name#33, c_first_name#32, sales#53]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (102)
+- * ColumnarToRow (101)
   +- CometProject (100)
      +- CometFilter (99)
         +- CometScan parquet spark_catalog.default.date_dim (98)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#34, d_year#55, d_moy#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(99) CometFilter
Input [3]: [d_date_sk#34, d_year#55, d_moy#56]
Condition : ((((isnotnull(d_year#55) AND isnotnull(d_moy#56)) AND (d_year#55 = 2000)) AND (d_moy#56 = 2)) AND isnotnull(d_date_sk#34))

(100) CometProject
Input [3]: [d_date_sk#34, d_year#55, d_moy#56]
Arguments: [d_date_sk#34], [d_date_sk#34]

(101) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#34]

(102) BroadcastExchange
Input [1]: [d_date_sk#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

Subquery:2 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (107)
+- * ColumnarToRow (106)
   +- CometProject (105)
      +- CometFilter (104)
         +- CometScan parquet spark_catalog.default.date_dim (103)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#57]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(104) CometFilter
Input [3]: [d_date_sk#10, d_date#11, d_year#57]
Condition : (d_year#57 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(105) CometProject
Input [3]: [d_date_sk#10, d_date#11, d_year#57]
Arguments: [d_date_sk#10, d_date#11], [d_date_sk#10, d_date#11]

(106) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_date#11]

(107) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:3 Hosting operator id = 43 Hosting Expression = Subquery scalar-subquery#29, [id=#30]
* ColumnarToRow (124)
+- CometHashAggregate (123)
   +- CometColumnarExchange (122)
      +- CometHashAggregate (121)
         +- CometHashAggregate (120)
            +- CometColumnarExchange (119)
               +- RowToColumnar (118)
                  +- * HashAggregate (117)
                     +- * Project (116)
                        +- * BroadcastHashJoin Inner BuildRight (115)
                           :- * Project (113)
                           :  +- * BroadcastHashJoin Inner BuildRight (112)
                           :     :- * ColumnarToRow (110)
                           :     :  +- CometFilter (109)
                           :     :     +- CometScan parquet spark_catalog.default.store_sales (108)
                           :     +- ReusedExchange (111)
                           +- ReusedExchange (114)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#58, ss_quantity#59, ss_sales_price#60, ss_sold_date_sk#61]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#61), dynamicpruningexpression(ss_sold_date_sk#61 IN dynamicpruning#62)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(109) CometFilter
Input [4]: [ss_customer_sk#58, ss_quantity#59, ss_sales_price#60, ss_sold_date_sk#61]
Condition : isnotnull(ss_customer_sk#58)

(110) ColumnarToRow [codegen id : 3]
Input [4]: [ss_customer_sk#58, ss_quantity#59, ss_sales_price#60, ss_sold_date_sk#61]

(111) ReusedExchange [Reuses operator id: 36]
Output [1]: [c_customer_sk#63]

(112) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#58]
Right keys [1]: [c_customer_sk#63]
Join type: Inner
Join condition: None

(113) Project [codegen id : 3]
Output [4]: [ss_quantity#59, ss_sales_price#60, ss_sold_date_sk#61, c_customer_sk#63]
Input [5]: [ss_customer_sk#58, ss_quantity#59, ss_sales_price#60, ss_sold_date_sk#61, c_customer_sk#63]

(114) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#64]

(115) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#61]
Right keys [1]: [d_date_sk#64]
Join type: Inner
Join condition: None

(116) Project [codegen id : 3]
Output [3]: [ss_quantity#59, ss_sales_price#60, c_customer_sk#63]
Input [5]: [ss_quantity#59, ss_sales_price#60, ss_sold_date_sk#61, c_customer_sk#63, d_date_sk#64]

(117) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#59, ss_sales_price#60, c_customer_sk#63]
Keys [1]: [c_customer_sk#63]
Functions [1]: [partial_sum((cast(ss_quantity#59 as decimal(10,0)) * ss_sales_price#60))]
Aggregate Attributes [2]: [sum#65, isEmpty#66]
Results [3]: [c_customer_sk#63, sum#67, isEmpty#68]

(118) RowToColumnar
Input [3]: [c_customer_sk#63, sum#67, isEmpty#68]

(119) CometColumnarExchange
Input [3]: [c_customer_sk#63, sum#67, isEmpty#68]
Arguments: hashpartitioning(c_customer_sk#63, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=14]

(120) CometHashAggregate
Input [3]: [c_customer_sk#63, sum#67, isEmpty#68]
Keys [1]: [c_customer_sk#63]
Functions [1]: [sum((cast(ss_quantity#59 as decimal(10,0)) * ss_sales_price#60))]

(121) CometHashAggregate
Input [1]: [csales#69]
Keys: []
Functions [1]: [partial_max(csales#69)]

(122) CometColumnarExchange
Input [1]: [max#70]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=15]

(123) CometHashAggregate
Input [1]: [max#70]
Keys: []
Functions [1]: [max(csales#69)]

(124) ColumnarToRow [codegen id : 4]
Input [1]: [tpcds_cmax#71]

Subquery:4 Hosting operator id = 108 Hosting Expression = ss_sold_date_sk#61 IN dynamicpruning#62
BroadcastExchange (129)
+- * ColumnarToRow (128)
   +- CometProject (127)
      +- CometFilter (126)
         +- CometScan parquet spark_catalog.default.date_dim (125)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#64, d_year#72]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(126) CometFilter
Input [2]: [d_date_sk#64, d_year#72]
Condition : (d_year#72 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#64))

(127) CometProject
Input [2]: [d_date_sk#64, d_year#72]
Arguments: [d_date_sk#64], [d_date_sk#64]

(128) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#64]

(129) BroadcastExchange
Input [1]: [d_date_sk#64]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=16]

Subquery:5 Hosting operator id = 54 Hosting Expression = ReusedSubquery Subquery scalar-subquery#29, [id=#30]

Subquery:6 Hosting operator id = 69 Hosting Expression = ws_sold_date_sk#43 IN dynamicpruning#6

Subquery:7 Hosting operator id = 80 Hosting Expression = ReusedSubquery Subquery scalar-subquery#29, [id=#30]


