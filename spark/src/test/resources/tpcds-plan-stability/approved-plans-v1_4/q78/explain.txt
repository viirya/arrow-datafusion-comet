== Physical Plan ==
TakeOrderedAndProject (71)
+- * Project (70)
   +- * ColumnarToRow (69)
      +- CometSortMergeJoin (68)
         :- CometProject (45)
         :  +- CometSortMergeJoin (44)
         :     :- CometSort (21)
         :     :  +- CometHashAggregate (20)
         :     :     +- CometColumnarExchange (19)
         :     :        +- RowToColumnar (18)
         :     :           +- * HashAggregate (17)
         :     :              +- * Project (16)
         :     :                 +- * BroadcastHashJoin Inner BuildRight (15)
         :     :                    :- * ColumnarToRow (13)
         :     :                    :  +- CometProject (12)
         :     :                    :     +- CometFilter (11)
         :     :                    :        +- CometSortMergeJoin (10)
         :     :                    :           :- CometSort (4)
         :     :                    :           :  +- CometColumnarExchange (3)
         :     :                    :           :     +- CometFilter (2)
         :     :                    :           :        +- CometScan parquet spark_catalog.default.store_sales (1)
         :     :                    :           +- CometSort (9)
         :     :                    :              +- CometColumnarExchange (8)
         :     :                    :                 +- CometProject (7)
         :     :                    :                    +- CometFilter (6)
         :     :                    :                       +- CometScan parquet spark_catalog.default.store_returns (5)
         :     :                    +- ReusedExchange (14)
         :     +- CometSort (43)
         :        +- CometFilter (42)
         :           +- CometHashAggregate (41)
         :              +- CometColumnarExchange (40)
         :                 +- RowToColumnar (39)
         :                    +- * HashAggregate (38)
         :                       +- * Project (37)
         :                          +- * BroadcastHashJoin Inner BuildRight (36)
         :                             :- * ColumnarToRow (34)
         :                             :  +- CometProject (33)
         :                             :     +- CometFilter (32)
         :                             :        +- CometSortMergeJoin (31)
         :                             :           :- CometSort (25)
         :                             :           :  +- CometColumnarExchange (24)
         :                             :           :     +- CometFilter (23)
         :                             :           :        +- CometScan parquet spark_catalog.default.web_sales (22)
         :                             :           +- CometSort (30)
         :                             :              +- CometColumnarExchange (29)
         :                             :                 +- CometProject (28)
         :                             :                    +- CometFilter (27)
         :                             :                       +- CometScan parquet spark_catalog.default.web_returns (26)
         :                             +- ReusedExchange (35)
         +- CometSort (67)
            +- CometFilter (66)
               +- CometHashAggregate (65)
                  +- CometColumnarExchange (64)
                     +- RowToColumnar (63)
                        +- * HashAggregate (62)
                           +- * Project (61)
                              +- * BroadcastHashJoin Inner BuildRight (60)
                                 :- * ColumnarToRow (58)
                                 :  +- CometProject (57)
                                 :     +- CometFilter (56)
                                 :        +- CometSortMergeJoin (55)
                                 :           :- CometSort (49)
                                 :           :  +- CometColumnarExchange (48)
                                 :           :     +- CometFilter (47)
                                 :           :        +- CometScan parquet spark_catalog.default.catalog_sales (46)
                                 :           +- CometSort (54)
                                 :              +- CometColumnarExchange (53)
                                 :                 +- CometProject (52)
                                 :                    +- CometFilter (51)
                                 :                       +- CometScan parquet spark_catalog.default.catalog_returns (50)
                                 +- ReusedExchange (59)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_sales_price:decimal(7,2)>

(2) CometFilter
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_customer_sk#2))

(3) CometColumnarExchange
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_ticket_number#3, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(4) CometSort
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7], [ss_ticket_number#3 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST]

(unknown) Scan parquet spark_catalog.default.store_returns
Output [3]: [sr_item_sk#9, sr_ticket_number#10, sr_returned_date_sk#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(6) CometFilter
Input [3]: [sr_item_sk#9, sr_ticket_number#10, sr_returned_date_sk#11]
Condition : (isnotnull(sr_ticket_number#10) AND isnotnull(sr_item_sk#9))

(7) CometProject
Input [3]: [sr_item_sk#9, sr_ticket_number#10, sr_returned_date_sk#11]
Arguments: [sr_item_sk#9, sr_ticket_number#10], [sr_item_sk#9, sr_ticket_number#10]

(8) CometColumnarExchange
Input [2]: [sr_item_sk#9, sr_ticket_number#10]
Arguments: hashpartitioning(sr_ticket_number#10, sr_item_sk#9, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(9) CometSort
Input [2]: [sr_item_sk#9, sr_ticket_number#10]
Arguments: [sr_item_sk#9, sr_ticket_number#10], [sr_ticket_number#10 ASC NULLS FIRST, sr_item_sk#9 ASC NULLS FIRST]

(10) CometSortMergeJoin
Left output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Right output [2]: [sr_item_sk#9, sr_ticket_number#10]
Arguments: [ss_ticket_number#3, ss_item_sk#1], [sr_ticket_number#10, sr_item_sk#9], LeftOuter

(11) CometFilter
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, sr_item_sk#9, sr_ticket_number#10]
Condition : isnull(sr_ticket_number#10)

(12) CometProject
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, sr_item_sk#9, sr_ticket_number#10]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7], [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]

(13) ColumnarToRow [codegen id : 2]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]

(14) ReusedExchange [Reuses operator id: 75]
Output [2]: [d_date_sk#12, d_year#13]

(15) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#12]
Join type: Inner
Join condition: None

(16) Project [codegen id : 2]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, d_year#13]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, d_date_sk#12, d_year#13]

(17) HashAggregate [codegen id : 2]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, d_year#13]
Keys [3]: [d_year#13, ss_item_sk#1, ss_customer_sk#2]
Functions [3]: [partial_sum(ss_quantity#4), partial_sum(UnscaledValue(ss_wholesale_cost#5)), partial_sum(UnscaledValue(ss_sales_price#6))]
Aggregate Attributes [3]: [sum#14, sum#15, sum#16]
Results [6]: [d_year#13, ss_item_sk#1, ss_customer_sk#2, sum#17, sum#18, sum#19]

(18) RowToColumnar
Input [6]: [d_year#13, ss_item_sk#1, ss_customer_sk#2, sum#17, sum#18, sum#19]

(19) CometColumnarExchange
Input [6]: [d_year#13, ss_item_sk#1, ss_customer_sk#2, sum#17, sum#18, sum#19]
Arguments: hashpartitioning(d_year#13, ss_item_sk#1, ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(20) CometHashAggregate
Input [6]: [d_year#13, ss_item_sk#1, ss_customer_sk#2, sum#17, sum#18, sum#19]
Keys [3]: [d_year#13, ss_item_sk#1, ss_customer_sk#2]
Functions [3]: [sum(ss_quantity#4), sum(UnscaledValue(ss_wholesale_cost#5)), sum(UnscaledValue(ss_sales_price#6))]

(21) CometSort
Input [6]: [ss_sold_year#20, ss_item_sk#1, ss_customer_sk#2, ss_qty#21, ss_wc#22, ss_sp#23]
Arguments: [ss_sold_year#20, ss_item_sk#1, ss_customer_sk#2, ss_qty#21, ss_wc#22, ss_sp#23], [ss_sold_year#20 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST, ss_customer_sk#2 ASC NULLS FIRST]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#24, ws_bill_customer_sk#25, ws_order_number#26, ws_quantity#27, ws_wholesale_cost#28, ws_sales_price#29, ws_sold_date_sk#30]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#30), dynamicpruningexpression(ws_sold_date_sk#30 IN dynamicpruning#31)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_order_number:int,ws_quantity:int,ws_wholesale_cost:decimal(7,2),ws_sales_price:decimal(7,2)>

(23) CometFilter
Input [7]: [ws_item_sk#24, ws_bill_customer_sk#25, ws_order_number#26, ws_quantity#27, ws_wholesale_cost#28, ws_sales_price#29, ws_sold_date_sk#30]
Condition : (isnotnull(ws_item_sk#24) AND isnotnull(ws_bill_customer_sk#25))

(24) CometColumnarExchange
Input [7]: [ws_item_sk#24, ws_bill_customer_sk#25, ws_order_number#26, ws_quantity#27, ws_wholesale_cost#28, ws_sales_price#29, ws_sold_date_sk#30]
Arguments: hashpartitioning(ws_order_number#26, ws_item_sk#24, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(25) CometSort
Input [7]: [ws_item_sk#24, ws_bill_customer_sk#25, ws_order_number#26, ws_quantity#27, ws_wholesale_cost#28, ws_sales_price#29, ws_sold_date_sk#30]
Arguments: [ws_item_sk#24, ws_bill_customer_sk#25, ws_order_number#26, ws_quantity#27, ws_wholesale_cost#28, ws_sales_price#29, ws_sold_date_sk#30], [ws_order_number#26 ASC NULLS FIRST, ws_item_sk#24 ASC NULLS FIRST]

(unknown) Scan parquet spark_catalog.default.web_returns
Output [3]: [wr_item_sk#32, wr_order_number#33, wr_returned_date_sk#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int>

(27) CometFilter
Input [3]: [wr_item_sk#32, wr_order_number#33, wr_returned_date_sk#34]
Condition : (isnotnull(wr_order_number#33) AND isnotnull(wr_item_sk#32))

(28) CometProject
Input [3]: [wr_item_sk#32, wr_order_number#33, wr_returned_date_sk#34]
Arguments: [wr_item_sk#32, wr_order_number#33], [wr_item_sk#32, wr_order_number#33]

(29) CometColumnarExchange
Input [2]: [wr_item_sk#32, wr_order_number#33]
Arguments: hashpartitioning(wr_order_number#33, wr_item_sk#32, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(30) CometSort
Input [2]: [wr_item_sk#32, wr_order_number#33]
Arguments: [wr_item_sk#32, wr_order_number#33], [wr_order_number#33 ASC NULLS FIRST, wr_item_sk#32 ASC NULLS FIRST]

(31) CometSortMergeJoin
Left output [7]: [ws_item_sk#24, ws_bill_customer_sk#25, ws_order_number#26, ws_quantity#27, ws_wholesale_cost#28, ws_sales_price#29, ws_sold_date_sk#30]
Right output [2]: [wr_item_sk#32, wr_order_number#33]
Arguments: [ws_order_number#26, ws_item_sk#24], [wr_order_number#33, wr_item_sk#32], LeftOuter

(32) CometFilter
Input [9]: [ws_item_sk#24, ws_bill_customer_sk#25, ws_order_number#26, ws_quantity#27, ws_wholesale_cost#28, ws_sales_price#29, ws_sold_date_sk#30, wr_item_sk#32, wr_order_number#33]
Condition : isnull(wr_order_number#33)

(33) CometProject
Input [9]: [ws_item_sk#24, ws_bill_customer_sk#25, ws_order_number#26, ws_quantity#27, ws_wholesale_cost#28, ws_sales_price#29, ws_sold_date_sk#30, wr_item_sk#32, wr_order_number#33]
Arguments: [ws_item_sk#24, ws_bill_customer_sk#25, ws_quantity#27, ws_wholesale_cost#28, ws_sales_price#29, ws_sold_date_sk#30], [ws_item_sk#24, ws_bill_customer_sk#25, ws_quantity#27, ws_wholesale_cost#28, ws_sales_price#29, ws_sold_date_sk#30]

(34) ColumnarToRow [codegen id : 4]
Input [6]: [ws_item_sk#24, ws_bill_customer_sk#25, ws_quantity#27, ws_wholesale_cost#28, ws_sales_price#29, ws_sold_date_sk#30]

(35) ReusedExchange [Reuses operator id: 75]
Output [2]: [d_date_sk#35, d_year#36]

(36) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ws_sold_date_sk#30]
Right keys [1]: [d_date_sk#35]
Join type: Inner
Join condition: None

(37) Project [codegen id : 4]
Output [6]: [ws_item_sk#24, ws_bill_customer_sk#25, ws_quantity#27, ws_wholesale_cost#28, ws_sales_price#29, d_year#36]
Input [8]: [ws_item_sk#24, ws_bill_customer_sk#25, ws_quantity#27, ws_wholesale_cost#28, ws_sales_price#29, ws_sold_date_sk#30, d_date_sk#35, d_year#36]

(38) HashAggregate [codegen id : 4]
Input [6]: [ws_item_sk#24, ws_bill_customer_sk#25, ws_quantity#27, ws_wholesale_cost#28, ws_sales_price#29, d_year#36]
Keys [3]: [d_year#36, ws_item_sk#24, ws_bill_customer_sk#25]
Functions [3]: [partial_sum(ws_quantity#27), partial_sum(UnscaledValue(ws_wholesale_cost#28)), partial_sum(UnscaledValue(ws_sales_price#29))]
Aggregate Attributes [3]: [sum#37, sum#38, sum#39]
Results [6]: [d_year#36, ws_item_sk#24, ws_bill_customer_sk#25, sum#40, sum#41, sum#42]

(39) RowToColumnar
Input [6]: [d_year#36, ws_item_sk#24, ws_bill_customer_sk#25, sum#40, sum#41, sum#42]

(40) CometColumnarExchange
Input [6]: [d_year#36, ws_item_sk#24, ws_bill_customer_sk#25, sum#40, sum#41, sum#42]
Arguments: hashpartitioning(d_year#36, ws_item_sk#24, ws_bill_customer_sk#25, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(41) CometHashAggregate
Input [6]: [d_year#36, ws_item_sk#24, ws_bill_customer_sk#25, sum#40, sum#41, sum#42]
Keys [3]: [d_year#36, ws_item_sk#24, ws_bill_customer_sk#25]
Functions [3]: [sum(ws_quantity#27), sum(UnscaledValue(ws_wholesale_cost#28)), sum(UnscaledValue(ws_sales_price#29))]

(42) CometFilter
Input [6]: [ws_sold_year#43, ws_item_sk#24, ws_customer_sk#44, ws_qty#45, ws_wc#46, ws_sp#47]
Condition : (coalesce(ws_qty#45, 0) > 0)

(43) CometSort
Input [6]: [ws_sold_year#43, ws_item_sk#24, ws_customer_sk#44, ws_qty#45, ws_wc#46, ws_sp#47]
Arguments: [ws_sold_year#43, ws_item_sk#24, ws_customer_sk#44, ws_qty#45, ws_wc#46, ws_sp#47], [ws_sold_year#43 ASC NULLS FIRST, ws_item_sk#24 ASC NULLS FIRST, ws_customer_sk#44 ASC NULLS FIRST]

(44) CometSortMergeJoin
Left output [6]: [ss_sold_year#20, ss_item_sk#1, ss_customer_sk#2, ss_qty#21, ss_wc#22, ss_sp#23]
Right output [6]: [ws_sold_year#43, ws_item_sk#24, ws_customer_sk#44, ws_qty#45, ws_wc#46, ws_sp#47]
Arguments: [ss_sold_year#20, ss_item_sk#1, ss_customer_sk#2], [ws_sold_year#43, ws_item_sk#24, ws_customer_sk#44], Inner

(45) CometProject
Input [12]: [ss_sold_year#20, ss_item_sk#1, ss_customer_sk#2, ss_qty#21, ss_wc#22, ss_sp#23, ws_sold_year#43, ws_item_sk#24, ws_customer_sk#44, ws_qty#45, ws_wc#46, ws_sp#47]
Arguments: [ss_sold_year#20, ss_item_sk#1, ss_customer_sk#2, ss_qty#21, ss_wc#22, ss_sp#23, ws_qty#45, ws_wc#46, ws_sp#47], [ss_sold_year#20, ss_item_sk#1, ss_customer_sk#2, ss_qty#21, ss_wc#22, ss_sp#23, ws_qty#45, ws_wc#46, ws_sp#47]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [7]: [cs_bill_customer_sk#48, cs_item_sk#49, cs_order_number#50, cs_quantity#51, cs_wholesale_cost#52, cs_sales_price#53, cs_sold_date_sk#54]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#54), dynamicpruningexpression(cs_sold_date_sk#54 IN dynamicpruning#55)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_wholesale_cost:decimal(7,2),cs_sales_price:decimal(7,2)>

(47) CometFilter
Input [7]: [cs_bill_customer_sk#48, cs_item_sk#49, cs_order_number#50, cs_quantity#51, cs_wholesale_cost#52, cs_sales_price#53, cs_sold_date_sk#54]
Condition : (isnotnull(cs_item_sk#49) AND isnotnull(cs_bill_customer_sk#48))

(48) CometColumnarExchange
Input [7]: [cs_bill_customer_sk#48, cs_item_sk#49, cs_order_number#50, cs_quantity#51, cs_wholesale_cost#52, cs_sales_price#53, cs_sold_date_sk#54]
Arguments: hashpartitioning(cs_order_number#50, cs_item_sk#49, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(49) CometSort
Input [7]: [cs_bill_customer_sk#48, cs_item_sk#49, cs_order_number#50, cs_quantity#51, cs_wholesale_cost#52, cs_sales_price#53, cs_sold_date_sk#54]
Arguments: [cs_bill_customer_sk#48, cs_item_sk#49, cs_order_number#50, cs_quantity#51, cs_wholesale_cost#52, cs_sales_price#53, cs_sold_date_sk#54], [cs_order_number#50 ASC NULLS FIRST, cs_item_sk#49 ASC NULLS FIRST]

(unknown) Scan parquet spark_catalog.default.catalog_returns
Output [3]: [cr_item_sk#56, cr_order_number#57, cr_returned_date_sk#58]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int>

(51) CometFilter
Input [3]: [cr_item_sk#56, cr_order_number#57, cr_returned_date_sk#58]
Condition : (isnotnull(cr_order_number#57) AND isnotnull(cr_item_sk#56))

(52) CometProject
Input [3]: [cr_item_sk#56, cr_order_number#57, cr_returned_date_sk#58]
Arguments: [cr_item_sk#56, cr_order_number#57], [cr_item_sk#56, cr_order_number#57]

(53) CometColumnarExchange
Input [2]: [cr_item_sk#56, cr_order_number#57]
Arguments: hashpartitioning(cr_order_number#57, cr_item_sk#56, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=8]

(54) CometSort
Input [2]: [cr_item_sk#56, cr_order_number#57]
Arguments: [cr_item_sk#56, cr_order_number#57], [cr_order_number#57 ASC NULLS FIRST, cr_item_sk#56 ASC NULLS FIRST]

(55) CometSortMergeJoin
Left output [7]: [cs_bill_customer_sk#48, cs_item_sk#49, cs_order_number#50, cs_quantity#51, cs_wholesale_cost#52, cs_sales_price#53, cs_sold_date_sk#54]
Right output [2]: [cr_item_sk#56, cr_order_number#57]
Arguments: [cs_order_number#50, cs_item_sk#49], [cr_order_number#57, cr_item_sk#56], LeftOuter

(56) CometFilter
Input [9]: [cs_bill_customer_sk#48, cs_item_sk#49, cs_order_number#50, cs_quantity#51, cs_wholesale_cost#52, cs_sales_price#53, cs_sold_date_sk#54, cr_item_sk#56, cr_order_number#57]
Condition : isnull(cr_order_number#57)

(57) CometProject
Input [9]: [cs_bill_customer_sk#48, cs_item_sk#49, cs_order_number#50, cs_quantity#51, cs_wholesale_cost#52, cs_sales_price#53, cs_sold_date_sk#54, cr_item_sk#56, cr_order_number#57]
Arguments: [cs_bill_customer_sk#48, cs_item_sk#49, cs_quantity#51, cs_wholesale_cost#52, cs_sales_price#53, cs_sold_date_sk#54], [cs_bill_customer_sk#48, cs_item_sk#49, cs_quantity#51, cs_wholesale_cost#52, cs_sales_price#53, cs_sold_date_sk#54]

(58) ColumnarToRow [codegen id : 6]
Input [6]: [cs_bill_customer_sk#48, cs_item_sk#49, cs_quantity#51, cs_wholesale_cost#52, cs_sales_price#53, cs_sold_date_sk#54]

(59) ReusedExchange [Reuses operator id: 75]
Output [2]: [d_date_sk#59, d_year#60]

(60) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#54]
Right keys [1]: [d_date_sk#59]
Join type: Inner
Join condition: None

(61) Project [codegen id : 6]
Output [6]: [cs_bill_customer_sk#48, cs_item_sk#49, cs_quantity#51, cs_wholesale_cost#52, cs_sales_price#53, d_year#60]
Input [8]: [cs_bill_customer_sk#48, cs_item_sk#49, cs_quantity#51, cs_wholesale_cost#52, cs_sales_price#53, cs_sold_date_sk#54, d_date_sk#59, d_year#60]

(62) HashAggregate [codegen id : 6]
Input [6]: [cs_bill_customer_sk#48, cs_item_sk#49, cs_quantity#51, cs_wholesale_cost#52, cs_sales_price#53, d_year#60]
Keys [3]: [d_year#60, cs_item_sk#49, cs_bill_customer_sk#48]
Functions [3]: [partial_sum(cs_quantity#51), partial_sum(UnscaledValue(cs_wholesale_cost#52)), partial_sum(UnscaledValue(cs_sales_price#53))]
Aggregate Attributes [3]: [sum#61, sum#62, sum#63]
Results [6]: [d_year#60, cs_item_sk#49, cs_bill_customer_sk#48, sum#64, sum#65, sum#66]

(63) RowToColumnar
Input [6]: [d_year#60, cs_item_sk#49, cs_bill_customer_sk#48, sum#64, sum#65, sum#66]

(64) CometColumnarExchange
Input [6]: [d_year#60, cs_item_sk#49, cs_bill_customer_sk#48, sum#64, sum#65, sum#66]
Arguments: hashpartitioning(d_year#60, cs_item_sk#49, cs_bill_customer_sk#48, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(65) CometHashAggregate
Input [6]: [d_year#60, cs_item_sk#49, cs_bill_customer_sk#48, sum#64, sum#65, sum#66]
Keys [3]: [d_year#60, cs_item_sk#49, cs_bill_customer_sk#48]
Functions [3]: [sum(cs_quantity#51), sum(UnscaledValue(cs_wholesale_cost#52)), sum(UnscaledValue(cs_sales_price#53))]

(66) CometFilter
Input [6]: [cs_sold_year#67, cs_item_sk#49, cs_customer_sk#68, cs_qty#69, cs_wc#70, cs_sp#71]
Condition : (coalesce(cs_qty#69, 0) > 0)

(67) CometSort
Input [6]: [cs_sold_year#67, cs_item_sk#49, cs_customer_sk#68, cs_qty#69, cs_wc#70, cs_sp#71]
Arguments: [cs_sold_year#67, cs_item_sk#49, cs_customer_sk#68, cs_qty#69, cs_wc#70, cs_sp#71], [cs_sold_year#67 ASC NULLS FIRST, cs_item_sk#49 ASC NULLS FIRST, cs_customer_sk#68 ASC NULLS FIRST]

(68) CometSortMergeJoin
Left output [9]: [ss_sold_year#20, ss_item_sk#1, ss_customer_sk#2, ss_qty#21, ss_wc#22, ss_sp#23, ws_qty#45, ws_wc#46, ws_sp#47]
Right output [6]: [cs_sold_year#67, cs_item_sk#49, cs_customer_sk#68, cs_qty#69, cs_wc#70, cs_sp#71]
Arguments: [ss_sold_year#20, ss_item_sk#1, ss_customer_sk#2], [cs_sold_year#67, cs_item_sk#49, cs_customer_sk#68], Inner

(69) ColumnarToRow [codegen id : 7]
Input [15]: [ss_sold_year#20, ss_item_sk#1, ss_customer_sk#2, ss_qty#21, ss_wc#22, ss_sp#23, ws_qty#45, ws_wc#46, ws_sp#47, cs_sold_year#67, cs_item_sk#49, cs_customer_sk#68, cs_qty#69, cs_wc#70, cs_sp#71]

(70) Project [codegen id : 7]
Output [12]: [round((cast(ss_qty#21 as double) / cast(coalesce((ws_qty#45 + cs_qty#69), 1) as double)), 2) AS ratio#72, ss_qty#21 AS store_qty#73, ss_wc#22 AS store_wholesale_cost#74, ss_sp#23 AS store_sales_price#75, (coalesce(ws_qty#45, 0) + coalesce(cs_qty#69, 0)) AS other_chan_qty#76, (coalesce(ws_wc#46, 0.00) + coalesce(cs_wc#70, 0.00)) AS other_chan_wholesale_cost#77, (coalesce(ws_sp#47, 0.00) + coalesce(cs_sp#71, 0.00)) AS other_chan_sales_price#78, ss_qty#21, ss_wc#22, ss_sp#23, ws_qty#45, cs_qty#69]
Input [15]: [ss_sold_year#20, ss_item_sk#1, ss_customer_sk#2, ss_qty#21, ss_wc#22, ss_sp#23, ws_qty#45, ws_wc#46, ws_sp#47, cs_sold_year#67, cs_item_sk#49, cs_customer_sk#68, cs_qty#69, cs_wc#70, cs_sp#71]

(71) TakeOrderedAndProject
Input [12]: [ratio#72, store_qty#73, store_wholesale_cost#74, store_sales_price#75, other_chan_qty#76, other_chan_wholesale_cost#77, other_chan_sales_price#78, ss_qty#21, ss_wc#22, ss_sp#23, ws_qty#45, cs_qty#69]
Arguments: 100, [ratio#72 ASC NULLS FIRST, ss_qty#21 DESC NULLS LAST, ss_wc#22 DESC NULLS LAST, ss_sp#23 DESC NULLS LAST, other_chan_qty#76 ASC NULLS FIRST, other_chan_wholesale_cost#77 ASC NULLS FIRST, other_chan_sales_price#78 ASC NULLS FIRST, round((cast(ss_qty#21 as double) / cast(coalesce((ws_qty#45 + cs_qty#69), 1) as double)), 2) ASC NULLS FIRST], [ratio#72, store_qty#73, store_wholesale_cost#74, store_sales_price#75, other_chan_qty#76, other_chan_wholesale_cost#77, other_chan_sales_price#78]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (75)
+- * ColumnarToRow (74)
   +- CometFilter (73)
      +- CometScan parquet spark_catalog.default.date_dim (72)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(73) CometFilter
Input [2]: [d_date_sk#12, d_year#13]
Condition : ((isnotnull(d_year#13) AND (d_year#13 = 2000)) AND isnotnull(d_date_sk#12))

(74) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]

(75) BroadcastExchange
Input [2]: [d_date_sk#12, d_year#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=10]

Subquery:2 Hosting operator id = 22 Hosting Expression = ws_sold_date_sk#30 IN dynamicpruning#8

Subquery:3 Hosting operator id = 46 Hosting Expression = cs_sold_date_sk#54 IN dynamicpruning#8


