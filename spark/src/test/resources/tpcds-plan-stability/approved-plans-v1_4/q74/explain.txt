== Physical Plan ==
TakeOrderedAndProject (79)
+- * Project (78)
   +- * BroadcastHashJoin Inner BuildRight (77)
      :- * Project (58)
      :  +- * BroadcastHashJoin Inner BuildRight (57)
      :     :- * BroadcastHashJoin Inner BuildRight (37)
      :     :  :- * ColumnarToRow (18)
      :     :  :  +- CometFilter (17)
      :     :  :     +- CometHashAggregate (16)
      :     :  :        +- CometColumnarExchange (15)
      :     :  :           +- RowToColumnar (14)
      :     :  :              +- * HashAggregate (13)
      :     :  :                 +- * Project (12)
      :     :  :                    +- * BroadcastHashJoin Inner BuildRight (11)
      :     :  :                       :- * Project (9)
      :     :  :                       :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :  :                       :     :- * ColumnarToRow (3)
      :     :  :                       :     :  +- CometFilter (2)
      :     :  :                       :     :     +- CometScan parquet spark_catalog.default.customer (1)
      :     :  :                       :     +- BroadcastExchange (7)
      :     :  :                       :        +- * ColumnarToRow (6)
      :     :  :                       :           +- CometFilter (5)
      :     :  :                       :              +- CometScan parquet spark_catalog.default.store_sales (4)
      :     :  :                       +- ReusedExchange (10)
      :     :  +- BroadcastExchange (36)
      :     :     +- * ColumnarToRow (35)
      :     :        +- CometHashAggregate (34)
      :     :           +- CometColumnarExchange (33)
      :     :              +- RowToColumnar (32)
      :     :                 +- * HashAggregate (31)
      :     :                    +- * Project (30)
      :     :                       +- * BroadcastHashJoin Inner BuildRight (29)
      :     :                          :- * Project (27)
      :     :                          :  +- * BroadcastHashJoin Inner BuildRight (26)
      :     :                          :     :- * ColumnarToRow (21)
      :     :                          :     :  +- CometFilter (20)
      :     :                          :     :     +- CometScan parquet spark_catalog.default.customer (19)
      :     :                          :     +- BroadcastExchange (25)
      :     :                          :        +- * ColumnarToRow (24)
      :     :                          :           +- CometFilter (23)
      :     :                          :              +- CometScan parquet spark_catalog.default.store_sales (22)
      :     :                          +- ReusedExchange (28)
      :     +- BroadcastExchange (56)
      :        +- * ColumnarToRow (55)
      :           +- CometFilter (54)
      :              +- CometHashAggregate (53)
      :                 +- CometColumnarExchange (52)
      :                    +- RowToColumnar (51)
      :                       +- * HashAggregate (50)
      :                          +- * Project (49)
      :                             +- * BroadcastHashJoin Inner BuildRight (48)
      :                                :- * Project (46)
      :                                :  +- * BroadcastHashJoin Inner BuildRight (45)
      :                                :     :- * ColumnarToRow (40)
      :                                :     :  +- CometFilter (39)
      :                                :     :     +- CometScan parquet spark_catalog.default.customer (38)
      :                                :     +- BroadcastExchange (44)
      :                                :        +- * ColumnarToRow (43)
      :                                :           +- CometFilter (42)
      :                                :              +- CometScan parquet spark_catalog.default.web_sales (41)
      :                                +- ReusedExchange (47)
      +- BroadcastExchange (76)
         +- * ColumnarToRow (75)
            +- CometHashAggregate (74)
               +- CometColumnarExchange (73)
                  +- RowToColumnar (72)
                     +- * HashAggregate (71)
                        +- * Project (70)
                           +- * BroadcastHashJoin Inner BuildRight (69)
                              :- * Project (67)
                              :  +- * BroadcastHashJoin Inner BuildRight (66)
                              :     :- * ColumnarToRow (61)
                              :     :  +- CometFilter (60)
                              :     :     +- CometScan parquet spark_catalog.default.customer (59)
                              :     +- BroadcastExchange (65)
                              :        +- * ColumnarToRow (64)
                              :           +- CometFilter (63)
                              :              +- CometScan parquet spark_catalog.default.web_sales (62)
                              +- ReusedExchange (68)


(unknown) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(2) CometFilter
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(3) ColumnarToRow [codegen id : 3]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(5) CometFilter
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_customer_sk#5)

(6) ColumnarToRow [codegen id : 1]
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]

(7) BroadcastExchange
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#5]
Join type: Inner
Join condition: None

(9) Project [codegen id : 3]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7]
Input [7]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]

(10) ReusedExchange [Reuses operator id: 83]
Output [2]: [d_date_sk#9, d_year#10]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#10]
Input [7]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7, d_date_sk#9, d_year#10]

(13) HashAggregate [codegen id : 3]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#10]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#6))]
Aggregate Attributes [1]: [sum#11]
Results [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10, sum#12]

(14) RowToColumnar
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10, sum#12]

(15) CometColumnarExchange
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10, sum#12]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(16) CometHashAggregate
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10, sum#12]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10]
Functions [1]: [sum(UnscaledValue(ss_net_paid#6))]

(17) CometFilter
Input [2]: [customer_id#13, year_total#14]
Condition : (isnotnull(year_total#14) AND (year_total#14 > 0.00))

(18) ColumnarToRow [codegen id : 16]
Input [2]: [customer_id#13, year_total#14]

(unknown) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#15, c_customer_id#16, c_first_name#17, c_last_name#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(20) CometFilter
Input [4]: [c_customer_sk#15, c_customer_id#16, c_first_name#17, c_last_name#18]
Condition : (isnotnull(c_customer_sk#15) AND isnotnull(c_customer_id#16))

(21) ColumnarToRow [codegen id : 6]
Input [4]: [c_customer_sk#15, c_customer_id#16, c_first_name#17, c_last_name#18]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_customer_sk#19, ss_net_paid#20, ss_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#21), dynamicpruningexpression(ss_sold_date_sk#21 IN dynamicpruning#22)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(23) CometFilter
Input [3]: [ss_customer_sk#19, ss_net_paid#20, ss_sold_date_sk#21]
Condition : isnotnull(ss_customer_sk#19)

(24) ColumnarToRow [codegen id : 4]
Input [3]: [ss_customer_sk#19, ss_net_paid#20, ss_sold_date_sk#21]

(25) BroadcastExchange
Input [3]: [ss_customer_sk#19, ss_net_paid#20, ss_sold_date_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#15]
Right keys [1]: [ss_customer_sk#19]
Join type: Inner
Join condition: None

(27) Project [codegen id : 6]
Output [5]: [c_customer_id#16, c_first_name#17, c_last_name#18, ss_net_paid#20, ss_sold_date_sk#21]
Input [7]: [c_customer_sk#15, c_customer_id#16, c_first_name#17, c_last_name#18, ss_customer_sk#19, ss_net_paid#20, ss_sold_date_sk#21]

(28) ReusedExchange [Reuses operator id: 87]
Output [2]: [d_date_sk#23, d_year#24]

(29) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#21]
Right keys [1]: [d_date_sk#23]
Join type: Inner
Join condition: None

(30) Project [codegen id : 6]
Output [5]: [c_customer_id#16, c_first_name#17, c_last_name#18, ss_net_paid#20, d_year#24]
Input [7]: [c_customer_id#16, c_first_name#17, c_last_name#18, ss_net_paid#20, ss_sold_date_sk#21, d_date_sk#23, d_year#24]

(31) HashAggregate [codegen id : 6]
Input [5]: [c_customer_id#16, c_first_name#17, c_last_name#18, ss_net_paid#20, d_year#24]
Keys [4]: [c_customer_id#16, c_first_name#17, c_last_name#18, d_year#24]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#20))]
Aggregate Attributes [1]: [sum#25]
Results [5]: [c_customer_id#16, c_first_name#17, c_last_name#18, d_year#24, sum#26]

(32) RowToColumnar
Input [5]: [c_customer_id#16, c_first_name#17, c_last_name#18, d_year#24, sum#26]

(33) CometColumnarExchange
Input [5]: [c_customer_id#16, c_first_name#17, c_last_name#18, d_year#24, sum#26]
Arguments: hashpartitioning(c_customer_id#16, c_first_name#17, c_last_name#18, d_year#24, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(34) CometHashAggregate
Input [5]: [c_customer_id#16, c_first_name#17, c_last_name#18, d_year#24, sum#26]
Keys [4]: [c_customer_id#16, c_first_name#17, c_last_name#18, d_year#24]
Functions [1]: [sum(UnscaledValue(ss_net_paid#20))]

(35) ColumnarToRow [codegen id : 7]
Input [4]: [customer_id#27, customer_first_name#28, customer_last_name#29, year_total#30]

(36) BroadcastExchange
Input [4]: [customer_id#27, customer_first_name#28, customer_last_name#29, year_total#30]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=5]

(37) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#13]
Right keys [1]: [customer_id#27]
Join type: Inner
Join condition: None

(unknown) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#31, c_customer_id#32, c_first_name#33, c_last_name#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(39) CometFilter
Input [4]: [c_customer_sk#31, c_customer_id#32, c_first_name#33, c_last_name#34]
Condition : (isnotnull(c_customer_sk#31) AND isnotnull(c_customer_id#32))

(40) ColumnarToRow [codegen id : 10]
Input [4]: [c_customer_sk#31, c_customer_id#32, c_first_name#33, c_last_name#34]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_customer_sk#35, ws_net_paid#36, ws_sold_date_sk#37]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#37), dynamicpruningexpression(ws_sold_date_sk#37 IN dynamicpruning#38)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(42) CometFilter
Input [3]: [ws_bill_customer_sk#35, ws_net_paid#36, ws_sold_date_sk#37]
Condition : isnotnull(ws_bill_customer_sk#35)

(43) ColumnarToRow [codegen id : 8]
Input [3]: [ws_bill_customer_sk#35, ws_net_paid#36, ws_sold_date_sk#37]

(44) BroadcastExchange
Input [3]: [ws_bill_customer_sk#35, ws_net_paid#36, ws_sold_date_sk#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]

(45) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#31]
Right keys [1]: [ws_bill_customer_sk#35]
Join type: Inner
Join condition: None

(46) Project [codegen id : 10]
Output [5]: [c_customer_id#32, c_first_name#33, c_last_name#34, ws_net_paid#36, ws_sold_date_sk#37]
Input [7]: [c_customer_sk#31, c_customer_id#32, c_first_name#33, c_last_name#34, ws_bill_customer_sk#35, ws_net_paid#36, ws_sold_date_sk#37]

(47) ReusedExchange [Reuses operator id: 83]
Output [2]: [d_date_sk#39, d_year#40]

(48) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#37]
Right keys [1]: [d_date_sk#39]
Join type: Inner
Join condition: None

(49) Project [codegen id : 10]
Output [5]: [c_customer_id#32, c_first_name#33, c_last_name#34, ws_net_paid#36, d_year#40]
Input [7]: [c_customer_id#32, c_first_name#33, c_last_name#34, ws_net_paid#36, ws_sold_date_sk#37, d_date_sk#39, d_year#40]

(50) HashAggregate [codegen id : 10]
Input [5]: [c_customer_id#32, c_first_name#33, c_last_name#34, ws_net_paid#36, d_year#40]
Keys [4]: [c_customer_id#32, c_first_name#33, c_last_name#34, d_year#40]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#36))]
Aggregate Attributes [1]: [sum#41]
Results [5]: [c_customer_id#32, c_first_name#33, c_last_name#34, d_year#40, sum#42]

(51) RowToColumnar
Input [5]: [c_customer_id#32, c_first_name#33, c_last_name#34, d_year#40, sum#42]

(52) CometColumnarExchange
Input [5]: [c_customer_id#32, c_first_name#33, c_last_name#34, d_year#40, sum#42]
Arguments: hashpartitioning(c_customer_id#32, c_first_name#33, c_last_name#34, d_year#40, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(53) CometHashAggregate
Input [5]: [c_customer_id#32, c_first_name#33, c_last_name#34, d_year#40, sum#42]
Keys [4]: [c_customer_id#32, c_first_name#33, c_last_name#34, d_year#40]
Functions [1]: [sum(UnscaledValue(ws_net_paid#36))]

(54) CometFilter
Input [2]: [customer_id#43, year_total#44]
Condition : (isnotnull(year_total#44) AND (year_total#44 > 0.00))

(55) ColumnarToRow [codegen id : 11]
Input [2]: [customer_id#43, year_total#44]

(56) BroadcastExchange
Input [2]: [customer_id#43, year_total#44]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=8]

(57) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#13]
Right keys [1]: [customer_id#43]
Join type: Inner
Join condition: None

(58) Project [codegen id : 16]
Output [7]: [customer_id#13, year_total#14, customer_id#27, customer_first_name#28, customer_last_name#29, year_total#30, year_total#44]
Input [8]: [customer_id#13, year_total#14, customer_id#27, customer_first_name#28, customer_last_name#29, year_total#30, customer_id#43, year_total#44]

(unknown) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#45, c_customer_id#46, c_first_name#47, c_last_name#48]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(60) CometFilter
Input [4]: [c_customer_sk#45, c_customer_id#46, c_first_name#47, c_last_name#48]
Condition : (isnotnull(c_customer_sk#45) AND isnotnull(c_customer_id#46))

(61) ColumnarToRow [codegen id : 14]
Input [4]: [c_customer_sk#45, c_customer_id#46, c_first_name#47, c_last_name#48]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_customer_sk#49, ws_net_paid#50, ws_sold_date_sk#51]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#51), dynamicpruningexpression(ws_sold_date_sk#51 IN dynamicpruning#52)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(63) CometFilter
Input [3]: [ws_bill_customer_sk#49, ws_net_paid#50, ws_sold_date_sk#51]
Condition : isnotnull(ws_bill_customer_sk#49)

(64) ColumnarToRow [codegen id : 12]
Input [3]: [ws_bill_customer_sk#49, ws_net_paid#50, ws_sold_date_sk#51]

(65) BroadcastExchange
Input [3]: [ws_bill_customer_sk#49, ws_net_paid#50, ws_sold_date_sk#51]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=9]

(66) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#45]
Right keys [1]: [ws_bill_customer_sk#49]
Join type: Inner
Join condition: None

(67) Project [codegen id : 14]
Output [5]: [c_customer_id#46, c_first_name#47, c_last_name#48, ws_net_paid#50, ws_sold_date_sk#51]
Input [7]: [c_customer_sk#45, c_customer_id#46, c_first_name#47, c_last_name#48, ws_bill_customer_sk#49, ws_net_paid#50, ws_sold_date_sk#51]

(68) ReusedExchange [Reuses operator id: 87]
Output [2]: [d_date_sk#53, d_year#54]

(69) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#51]
Right keys [1]: [d_date_sk#53]
Join type: Inner
Join condition: None

(70) Project [codegen id : 14]
Output [5]: [c_customer_id#46, c_first_name#47, c_last_name#48, ws_net_paid#50, d_year#54]
Input [7]: [c_customer_id#46, c_first_name#47, c_last_name#48, ws_net_paid#50, ws_sold_date_sk#51, d_date_sk#53, d_year#54]

(71) HashAggregate [codegen id : 14]
Input [5]: [c_customer_id#46, c_first_name#47, c_last_name#48, ws_net_paid#50, d_year#54]
Keys [4]: [c_customer_id#46, c_first_name#47, c_last_name#48, d_year#54]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#50))]
Aggregate Attributes [1]: [sum#55]
Results [5]: [c_customer_id#46, c_first_name#47, c_last_name#48, d_year#54, sum#56]

(72) RowToColumnar
Input [5]: [c_customer_id#46, c_first_name#47, c_last_name#48, d_year#54, sum#56]

(73) CometColumnarExchange
Input [5]: [c_customer_id#46, c_first_name#47, c_last_name#48, d_year#54, sum#56]
Arguments: hashpartitioning(c_customer_id#46, c_first_name#47, c_last_name#48, d_year#54, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(74) CometHashAggregate
Input [5]: [c_customer_id#46, c_first_name#47, c_last_name#48, d_year#54, sum#56]
Keys [4]: [c_customer_id#46, c_first_name#47, c_last_name#48, d_year#54]
Functions [1]: [sum(UnscaledValue(ws_net_paid#50))]

(75) ColumnarToRow [codegen id : 15]
Input [2]: [customer_id#57, year_total#58]

(76) BroadcastExchange
Input [2]: [customer_id#57, year_total#58]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=11]

(77) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#13]
Right keys [1]: [customer_id#57]
Join type: Inner
Join condition: (CASE WHEN (year_total#44 > 0.00) THEN (year_total#58 / year_total#44) END > CASE WHEN (year_total#14 > 0.00) THEN (year_total#30 / year_total#14) END)

(78) Project [codegen id : 16]
Output [3]: [customer_id#27, customer_first_name#28, customer_last_name#29]
Input [9]: [customer_id#13, year_total#14, customer_id#27, customer_first_name#28, customer_last_name#29, year_total#30, year_total#44, customer_id#57, year_total#58]

(79) TakeOrderedAndProject
Input [3]: [customer_id#27, customer_first_name#28, customer_last_name#29]
Arguments: 100, [customer_id#27 ASC NULLS FIRST, customer_id#27 ASC NULLS FIRST, customer_id#27 ASC NULLS FIRST], [customer_id#27, customer_first_name#28, customer_last_name#29]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (83)
+- * ColumnarToRow (82)
   +- CometFilter (81)
      +- CometScan parquet spark_catalog.default.date_dim (80)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#9, d_year#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(81) CometFilter
Input [2]: [d_date_sk#9, d_year#10]
Condition : (((isnotnull(d_year#10) AND (d_year#10 = 2001)) AND d_year#10 IN (2001,2002)) AND isnotnull(d_date_sk#9))

(82) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#10]

(83) BroadcastExchange
Input [2]: [d_date_sk#9, d_year#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=12]

Subquery:2 Hosting operator id = 22 Hosting Expression = ss_sold_date_sk#21 IN dynamicpruning#22
BroadcastExchange (87)
+- * ColumnarToRow (86)
   +- CometFilter (85)
      +- CometScan parquet spark_catalog.default.date_dim (84)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#23, d_year#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(85) CometFilter
Input [2]: [d_date_sk#23, d_year#24]
Condition : (((isnotnull(d_year#24) AND (d_year#24 = 2002)) AND d_year#24 IN (2001,2002)) AND isnotnull(d_date_sk#23))

(86) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#23, d_year#24]

(87) BroadcastExchange
Input [2]: [d_date_sk#23, d_year#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=13]

Subquery:3 Hosting operator id = 41 Hosting Expression = ws_sold_date_sk#37 IN dynamicpruning#8

Subquery:4 Hosting operator id = 62 Hosting Expression = ws_sold_date_sk#51 IN dynamicpruning#22


