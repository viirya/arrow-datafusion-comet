== Physical Plan ==
* ColumnarToRow (36)
+- CometSort (35)
   +- CometColumnarExchange (34)
      +- RowToColumnar (33)
         +- * Project (32)
            +- * BroadcastHashJoin Inner BuildRight (31)
               :- * ColumnarToRow (26)
               :  +- CometFilter (25)
               :     +- CometHashAggregate (24)
               :        +- CometColumnarExchange (23)
               :           +- RowToColumnar (22)
               :              +- * HashAggregate (21)
               :                 +- * Project (20)
               :                    +- * BroadcastHashJoin Inner BuildRight (19)
               :                       :- * Project (13)
               :                       :  +- * BroadcastHashJoin Inner BuildRight (12)
               :                       :     :- * Project (6)
               :                       :     :  +- * BroadcastHashJoin Inner BuildRight (5)
               :                       :     :     :- * ColumnarToRow (3)
               :                       :     :     :  +- CometFilter (2)
               :                       :     :     :     +- CometScan parquet spark_catalog.default.store_sales (1)
               :                       :     :     +- ReusedExchange (4)
               :                       :     +- BroadcastExchange (11)
               :                       :        +- * ColumnarToRow (10)
               :                       :           +- CometProject (9)
               :                       :              +- CometFilter (8)
               :                       :                 +- CometScan parquet spark_catalog.default.store (7)
               :                       +- BroadcastExchange (18)
               :                          +- * ColumnarToRow (17)
               :                             +- CometProject (16)
               :                                +- CometFilter (15)
               :                                   +- CometScan parquet spark_catalog.default.household_demographics (14)
               +- BroadcastExchange (30)
                  +- * ColumnarToRow (29)
                     +- CometFilter (28)
                        +- CometScan parquet spark_catalog.default.customer (27)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_store_sk:int,ss_ticket_number:int>

(2) CometFilter
Input [5]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_sold_date_sk#5]
Condition : ((isnotnull(ss_store_sk#3) AND isnotnull(ss_hdemo_sk#2)) AND isnotnull(ss_customer_sk#1))

(3) ColumnarToRow [codegen id : 4]
Input [5]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_sold_date_sk#5]

(4) ReusedExchange [Reuses operator id: 41]
Output [1]: [d_date_sk#7]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join type: Inner
Join condition: None

(6) Project [codegen id : 4]
Output [4]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_ticket_number#4]
Input [6]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_sold_date_sk#5, d_date_sk#7]

(unknown) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#8, s_county#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [In(s_county, [Bronx County,Franklin Parish,Orange County,Williamson County]), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string>

(8) CometFilter
Input [2]: [s_store_sk#8, s_county#9]
Condition : (s_county#9 IN (Williamson County,Franklin Parish,Bronx County,Orange County) AND isnotnull(s_store_sk#8))

(9) CometProject
Input [2]: [s_store_sk#8, s_county#9]
Arguments: [s_store_sk#8], [s_store_sk#8]

(10) ColumnarToRow [codegen id : 2]
Input [1]: [s_store_sk#8]

(11) BroadcastExchange
Input [1]: [s_store_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#8]
Join type: Inner
Join condition: None

(13) Project [codegen id : 4]
Output [3]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_ticket_number#4]
Input [5]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_ticket_number#4, s_store_sk#8]

(unknown) Scan parquet spark_catalog.default.household_demographics
Output [4]: [hd_demo_sk#10, hd_buy_potential#11, hd_dep_count#12, hd_vehicle_count#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_vehicle_count), Or(EqualTo(hd_buy_potential,>10000         ),EqualTo(hd_buy_potential,unknown        )), GreaterThan(hd_vehicle_count,0), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string,hd_dep_count:int,hd_vehicle_count:int>

(15) CometFilter
Input [4]: [hd_demo_sk#10, hd_buy_potential#11, hd_dep_count#12, hd_vehicle_count#13]
Condition : ((((isnotnull(hd_vehicle_count#13) AND ((hd_buy_potential#11 = >10000         ) OR (hd_buy_potential#11 = unknown        ))) AND (hd_vehicle_count#13 > 0)) AND CASE WHEN (hd_vehicle_count#13 > 0) THEN ((cast(hd_dep_count#12 as double) / cast(hd_vehicle_count#13 as double)) > 1.0) END) AND isnotnull(hd_demo_sk#10))

(16) CometProject
Input [4]: [hd_demo_sk#10, hd_buy_potential#11, hd_dep_count#12, hd_vehicle_count#13]
Arguments: [hd_demo_sk#10], [hd_demo_sk#10]

(17) ColumnarToRow [codegen id : 3]
Input [1]: [hd_demo_sk#10]

(18) BroadcastExchange
Input [1]: [hd_demo_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(19) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_hdemo_sk#2]
Right keys [1]: [hd_demo_sk#10]
Join type: Inner
Join condition: None

(20) Project [codegen id : 4]
Output [2]: [ss_customer_sk#1, ss_ticket_number#4]
Input [4]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_ticket_number#4, hd_demo_sk#10]

(21) HashAggregate [codegen id : 4]
Input [2]: [ss_customer_sk#1, ss_ticket_number#4]
Keys [2]: [ss_ticket_number#4, ss_customer_sk#1]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#14]
Results [3]: [ss_ticket_number#4, ss_customer_sk#1, count#15]

(22) RowToColumnar
Input [3]: [ss_ticket_number#4, ss_customer_sk#1, count#15]

(23) CometColumnarExchange
Input [3]: [ss_ticket_number#4, ss_customer_sk#1, count#15]
Arguments: hashpartitioning(ss_ticket_number#4, ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(24) CometHashAggregate
Input [3]: [ss_ticket_number#4, ss_customer_sk#1, count#15]
Keys [2]: [ss_ticket_number#4, ss_customer_sk#1]
Functions [1]: [count(1)]

(25) CometFilter
Input [3]: [ss_ticket_number#4, ss_customer_sk#1, cnt#16]
Condition : ((cnt#16 >= 1) AND (cnt#16 <= 5))

(26) ColumnarToRow [codegen id : 6]
Input [3]: [ss_ticket_number#4, ss_customer_sk#1, cnt#16]

(unknown) Scan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#17, c_salutation#18, c_first_name#19, c_last_name#20, c_preferred_cust_flag#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string>

(28) CometFilter
Input [5]: [c_customer_sk#17, c_salutation#18, c_first_name#19, c_last_name#20, c_preferred_cust_flag#21]
Condition : isnotnull(c_customer_sk#17)

(29) ColumnarToRow [codegen id : 5]
Input [5]: [c_customer_sk#17, c_salutation#18, c_first_name#19, c_last_name#20, c_preferred_cust_flag#21]

(30) BroadcastExchange
Input [5]: [c_customer_sk#17, c_salutation#18, c_first_name#19, c_last_name#20, c_preferred_cust_flag#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#17]
Join type: Inner
Join condition: None

(32) Project [codegen id : 6]
Output [6]: [c_last_name#20, c_first_name#19, c_salutation#18, c_preferred_cust_flag#21, ss_ticket_number#4, cnt#16]
Input [8]: [ss_ticket_number#4, ss_customer_sk#1, cnt#16, c_customer_sk#17, c_salutation#18, c_first_name#19, c_last_name#20, c_preferred_cust_flag#21]

(33) RowToColumnar
Input [6]: [c_last_name#20, c_first_name#19, c_salutation#18, c_preferred_cust_flag#21, ss_ticket_number#4, cnt#16]

(34) CometColumnarExchange
Input [6]: [c_last_name#20, c_first_name#19, c_salutation#18, c_preferred_cust_flag#21, ss_ticket_number#4, cnt#16]
Arguments: rangepartitioning(cnt#16 DESC NULLS LAST, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(35) CometSort
Input [6]: [c_last_name#20, c_first_name#19, c_salutation#18, c_preferred_cust_flag#21, ss_ticket_number#4, cnt#16]
Arguments: [c_last_name#20, c_first_name#19, c_salutation#18, c_preferred_cust_flag#21, ss_ticket_number#4, cnt#16], [cnt#16 DESC NULLS LAST]

(36) ColumnarToRow [codegen id : 7]
Input [6]: [c_last_name#20, c_first_name#19, c_salutation#18, c_preferred_cust_flag#21, ss_ticket_number#4, cnt#16]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (41)
+- * ColumnarToRow (40)
   +- CometProject (39)
      +- CometFilter (38)
         +- CometScan parquet spark_catalog.default.date_dim (37)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#7, d_year#22, d_dom#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>

(38) CometFilter
Input [3]: [d_date_sk#7, d_year#22, d_dom#23]
Condition : ((((isnotnull(d_dom#23) AND (d_dom#23 >= 1)) AND (d_dom#23 <= 2)) AND d_year#22 IN (1999,2000,2001)) AND isnotnull(d_date_sk#7))

(39) CometProject
Input [3]: [d_date_sk#7, d_year#22, d_dom#23]
Arguments: [d_date_sk#7], [d_date_sk#7]

(40) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#7]

(41) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]


