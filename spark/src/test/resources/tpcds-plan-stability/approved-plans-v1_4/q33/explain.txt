== Physical Plan ==
* ColumnarToRow (67)
+- CometTakeOrderedAndProject (66)
   +- CometHashAggregate (65)
      +- CometColumnarExchange (64)
         +- CometHashAggregate (63)
            +- CometUnion (62)
               :- CometHashAggregate (29)
               :  +- CometColumnarExchange (28)
               :     +- RowToColumnar (27)
               :        +- * HashAggregate (26)
               :           +- * Project (25)
               :              +- * BroadcastHashJoin Inner BuildRight (24)
               :                 :- * Project (13)
               :                 :  +- * BroadcastHashJoin Inner BuildRight (12)
               :                 :     :- * Project (6)
               :                 :     :  +- * BroadcastHashJoin Inner BuildRight (5)
               :                 :     :     :- * ColumnarToRow (3)
               :                 :     :     :  +- CometFilter (2)
               :                 :     :     :     +- CometScan parquet spark_catalog.default.store_sales (1)
               :                 :     :     +- ReusedExchange (4)
               :                 :     +- BroadcastExchange (11)
               :                 :        +- * ColumnarToRow (10)
               :                 :           +- CometProject (9)
               :                 :              +- CometFilter (8)
               :                 :                 +- CometScan parquet spark_catalog.default.customer_address (7)
               :                 +- BroadcastExchange (23)
               :                    +- * BroadcastHashJoin LeftSemi BuildRight (22)
               :                       :- * ColumnarToRow (16)
               :                       :  +- CometFilter (15)
               :                       :     +- CometScan parquet spark_catalog.default.item (14)
               :                       +- BroadcastExchange (21)
               :                          +- * ColumnarToRow (20)
               :                             +- CometProject (19)
               :                                +- CometFilter (18)
               :                                   +- CometScan parquet spark_catalog.default.item (17)
               :- CometHashAggregate (45)
               :  +- CometColumnarExchange (44)
               :     +- RowToColumnar (43)
               :        +- * HashAggregate (42)
               :           +- * Project (41)
               :              +- * BroadcastHashJoin Inner BuildRight (40)
               :                 :- * Project (38)
               :                 :  +- * BroadcastHashJoin Inner BuildRight (37)
               :                 :     :- * Project (35)
               :                 :     :  +- * BroadcastHashJoin Inner BuildRight (34)
               :                 :     :     :- * ColumnarToRow (32)
               :                 :     :     :  +- CometFilter (31)
               :                 :     :     :     +- CometScan parquet spark_catalog.default.catalog_sales (30)
               :                 :     :     +- ReusedExchange (33)
               :                 :     +- ReusedExchange (36)
               :                 +- ReusedExchange (39)
               +- CometHashAggregate (61)
                  +- CometColumnarExchange (60)
                     +- RowToColumnar (59)
                        +- * HashAggregate (58)
                           +- * Project (57)
                              +- * BroadcastHashJoin Inner BuildRight (56)
                                 :- * Project (54)
                                 :  +- * BroadcastHashJoin Inner BuildRight (53)
                                 :     :- * Project (51)
                                 :     :  +- * BroadcastHashJoin Inner BuildRight (50)
                                 :     :     :- * ColumnarToRow (48)
                                 :     :     :  +- CometFilter (47)
                                 :     :     :     +- CometScan parquet spark_catalog.default.web_sales (46)
                                 :     :     +- ReusedExchange (49)
                                 :     +- ReusedExchange (52)
                                 +- ReusedExchange (55)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_addr_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_addr_sk#2) AND isnotnull(ss_item_sk#1))

(3) ColumnarToRow [codegen id : 5]
Input [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]

(4) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(6) Project [codegen id : 5]
Output [3]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3]
Input [5]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4, d_date_sk#6]

(unknown) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#7, ca_gmt_offset#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(8) CometFilter
Input [2]: [ca_address_sk#7, ca_gmt_offset#8]
Condition : ((isnotnull(ca_gmt_offset#8) AND (ca_gmt_offset#8 = -5.00)) AND isnotnull(ca_address_sk#7))

(9) CometProject
Input [2]: [ca_address_sk#7, ca_gmt_offset#8]
Arguments: [ca_address_sk#7], [ca_address_sk#7]

(10) ColumnarToRow [codegen id : 2]
Input [1]: [ca_address_sk#7]

(11) BroadcastExchange
Input [1]: [ca_address_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(12) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_addr_sk#2]
Right keys [1]: [ca_address_sk#7]
Join type: Inner
Join condition: None

(13) Project [codegen id : 5]
Output [2]: [ss_item_sk#1, ss_ext_sales_price#3]
Input [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ca_address_sk#7]

(unknown) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#9, i_manufact_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_manufact_id:int>

(15) CometFilter
Input [2]: [i_item_sk#9, i_manufact_id#10]
Condition : isnotnull(i_item_sk#9)

(16) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#9, i_manufact_id#10]

(unknown) Scan parquet spark_catalog.default.item
Output [2]: [i_category#11, i_manufact_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Electronics                                       )]
ReadSchema: struct<i_category:string,i_manufact_id:int>

(18) CometFilter
Input [2]: [i_category#11, i_manufact_id#12]
Condition : (isnotnull(i_category#11) AND (i_category#11 = Electronics                                       ))

(19) CometProject
Input [2]: [i_category#11, i_manufact_id#12]
Arguments: [i_manufact_id#12], [i_manufact_id#12]

(20) ColumnarToRow [codegen id : 3]
Input [1]: [i_manufact_id#12]

(21) BroadcastExchange
Input [1]: [i_manufact_id#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_manufact_id#10]
Right keys [1]: [i_manufact_id#12]
Join type: LeftSemi
Join condition: None

(23) BroadcastExchange
Input [2]: [i_item_sk#9, i_manufact_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(24) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#9]
Join type: Inner
Join condition: None

(25) Project [codegen id : 5]
Output [2]: [ss_ext_sales_price#3, i_manufact_id#10]
Input [4]: [ss_item_sk#1, ss_ext_sales_price#3, i_item_sk#9, i_manufact_id#10]

(26) HashAggregate [codegen id : 5]
Input [2]: [ss_ext_sales_price#3, i_manufact_id#10]
Keys [1]: [i_manufact_id#10]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum#13]
Results [2]: [i_manufact_id#10, sum#14]

(27) RowToColumnar
Input [2]: [i_manufact_id#10, sum#14]

(28) CometColumnarExchange
Input [2]: [i_manufact_id#10, sum#14]
Arguments: hashpartitioning(i_manufact_id#10, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(29) CometHashAggregate
Input [2]: [i_manufact_id#10, sum#14]
Keys [1]: [i_manufact_id#10]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#3))]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_bill_addr_sk#15, cs_item_sk#16, cs_ext_sales_price#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#19)]
PushedFilters: [IsNotNull(cs_bill_addr_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_addr_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(31) CometFilter
Input [4]: [cs_bill_addr_sk#15, cs_item_sk#16, cs_ext_sales_price#17, cs_sold_date_sk#18]
Condition : (isnotnull(cs_bill_addr_sk#15) AND isnotnull(cs_item_sk#16))

(32) ColumnarToRow [codegen id : 10]
Input [4]: [cs_bill_addr_sk#15, cs_item_sk#16, cs_ext_sales_price#17, cs_sold_date_sk#18]

(33) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#20]

(34) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#20]
Join type: Inner
Join condition: None

(35) Project [codegen id : 10]
Output [3]: [cs_bill_addr_sk#15, cs_item_sk#16, cs_ext_sales_price#17]
Input [5]: [cs_bill_addr_sk#15, cs_item_sk#16, cs_ext_sales_price#17, cs_sold_date_sk#18, d_date_sk#20]

(36) ReusedExchange [Reuses operator id: 11]
Output [1]: [ca_address_sk#21]

(37) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_bill_addr_sk#15]
Right keys [1]: [ca_address_sk#21]
Join type: Inner
Join condition: None

(38) Project [codegen id : 10]
Output [2]: [cs_item_sk#16, cs_ext_sales_price#17]
Input [4]: [cs_bill_addr_sk#15, cs_item_sk#16, cs_ext_sales_price#17, ca_address_sk#21]

(39) ReusedExchange [Reuses operator id: 23]
Output [2]: [i_item_sk#22, i_manufact_id#23]

(40) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_item_sk#16]
Right keys [1]: [i_item_sk#22]
Join type: Inner
Join condition: None

(41) Project [codegen id : 10]
Output [2]: [cs_ext_sales_price#17, i_manufact_id#23]
Input [4]: [cs_item_sk#16, cs_ext_sales_price#17, i_item_sk#22, i_manufact_id#23]

(42) HashAggregate [codegen id : 10]
Input [2]: [cs_ext_sales_price#17, i_manufact_id#23]
Keys [1]: [i_manufact_id#23]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#17))]
Aggregate Attributes [1]: [sum#24]
Results [2]: [i_manufact_id#23, sum#25]

(43) RowToColumnar
Input [2]: [i_manufact_id#23, sum#25]

(44) CometColumnarExchange
Input [2]: [i_manufact_id#23, sum#25]
Arguments: hashpartitioning(i_manufact_id#23, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(45) CometHashAggregate
Input [2]: [i_manufact_id#23, sum#25]
Keys [1]: [i_manufact_id#23]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#17))]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#26, ws_bill_addr_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#29), dynamicpruningexpression(ws_sold_date_sk#29 IN dynamicpruning#30)]
PushedFilters: [IsNotNull(ws_bill_addr_sk), IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(47) CometFilter
Input [4]: [ws_item_sk#26, ws_bill_addr_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29]
Condition : (isnotnull(ws_bill_addr_sk#27) AND isnotnull(ws_item_sk#26))

(48) ColumnarToRow [codegen id : 15]
Input [4]: [ws_item_sk#26, ws_bill_addr_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29]

(49) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#31]

(50) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ws_sold_date_sk#29]
Right keys [1]: [d_date_sk#31]
Join type: Inner
Join condition: None

(51) Project [codegen id : 15]
Output [3]: [ws_item_sk#26, ws_bill_addr_sk#27, ws_ext_sales_price#28]
Input [5]: [ws_item_sk#26, ws_bill_addr_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29, d_date_sk#31]

(52) ReusedExchange [Reuses operator id: 11]
Output [1]: [ca_address_sk#32]

(53) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ws_bill_addr_sk#27]
Right keys [1]: [ca_address_sk#32]
Join type: Inner
Join condition: None

(54) Project [codegen id : 15]
Output [2]: [ws_item_sk#26, ws_ext_sales_price#28]
Input [4]: [ws_item_sk#26, ws_bill_addr_sk#27, ws_ext_sales_price#28, ca_address_sk#32]

(55) ReusedExchange [Reuses operator id: 23]
Output [2]: [i_item_sk#33, i_manufact_id#34]

(56) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ws_item_sk#26]
Right keys [1]: [i_item_sk#33]
Join type: Inner
Join condition: None

(57) Project [codegen id : 15]
Output [2]: [ws_ext_sales_price#28, i_manufact_id#34]
Input [4]: [ws_item_sk#26, ws_ext_sales_price#28, i_item_sk#33, i_manufact_id#34]

(58) HashAggregate [codegen id : 15]
Input [2]: [ws_ext_sales_price#28, i_manufact_id#34]
Keys [1]: [i_manufact_id#34]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#28))]
Aggregate Attributes [1]: [sum#35]
Results [2]: [i_manufact_id#34, sum#36]

(59) RowToColumnar
Input [2]: [i_manufact_id#34, sum#36]

(60) CometColumnarExchange
Input [2]: [i_manufact_id#34, sum#36]
Arguments: hashpartitioning(i_manufact_id#34, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(61) CometHashAggregate
Input [2]: [i_manufact_id#34, sum#36]
Keys [1]: [i_manufact_id#34]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#28))]

(62) CometUnion
Child 0 Input [2]: [i_manufact_id#10, total_sales#37]
Child 1 Input [2]: [i_manufact_id#23, total_sales#38]
Child 2 Input [2]: [i_manufact_id#34, total_sales#39]

(63) CometHashAggregate
Input [2]: [i_manufact_id#10, total_sales#37]
Keys [1]: [i_manufact_id#10]
Functions [1]: [partial_sum(total_sales#37)]

(64) CometColumnarExchange
Input [3]: [i_manufact_id#10, sum#40, isEmpty#41]
Arguments: hashpartitioning(i_manufact_id#10, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(65) CometHashAggregate
Input [3]: [i_manufact_id#10, sum#40, isEmpty#41]
Keys [1]: [i_manufact_id#10]
Functions [1]: [sum(total_sales#37)]

(66) CometTakeOrderedAndProject
Input [2]: [i_manufact_id#10, total_sales#42]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[total_sales#42 ASC NULLS FIRST], output=[i_manufact_id#10,total_sales#42]), 100, [total_sales#42 ASC NULLS FIRST], [i_manufact_id#10, total_sales#42]

(67) ColumnarToRow [codegen id : 16]
Input [2]: [i_manufact_id#10, total_sales#42]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (72)
+- * ColumnarToRow (71)
   +- CometProject (70)
      +- CometFilter (69)
         +- CometScan parquet spark_catalog.default.date_dim (68)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#6, d_year#43, d_moy#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,5), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(69) CometFilter
Input [3]: [d_date_sk#6, d_year#43, d_moy#44]
Condition : ((((isnotnull(d_year#43) AND isnotnull(d_moy#44)) AND (d_year#43 = 1998)) AND (d_moy#44 = 5)) AND isnotnull(d_date_sk#6))

(70) CometProject
Input [3]: [d_date_sk#6, d_year#43, d_moy#44]
Arguments: [d_date_sk#6], [d_date_sk#6]

(71) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#6]

(72) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 30 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#5

Subquery:3 Hosting operator id = 46 Hosting Expression = ws_sold_date_sk#29 IN dynamicpruning#5


