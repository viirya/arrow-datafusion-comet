== Physical Plan ==
TakeOrderedAndProject (71)
+- * HashAggregate (70)
   +- * ColumnarToRow (69)
      +- CometColumnarExchange (68)
         +- RowToColumnar (67)
            +- * HashAggregate (66)
               +- Union (65)
                  :- * HashAggregate (30)
                  :  +- * ColumnarToRow (29)
                  :     +- CometColumnarExchange (28)
                  :        +- RowToColumnar (27)
                  :           +- * HashAggregate (26)
                  :              +- * Project (25)
                  :                 +- * BroadcastHashJoin Inner BuildRight (24)
                  :                    :- * Project (13)
                  :                    :  +- * BroadcastHashJoin Inner BuildRight (12)
                  :                    :     :- * Project (6)
                  :                    :     :  +- * BroadcastHashJoin Inner BuildRight (5)
                  :                    :     :     :- * ColumnarToRow (3)
                  :                    :     :     :  +- CometFilter (2)
                  :                    :     :     :     +- CometScan parquet spark_catalog.default.store_sales (1)
                  :                    :     :     +- ReusedExchange (4)
                  :                    :     +- BroadcastExchange (11)
                  :                    :        +- * ColumnarToRow (10)
                  :                    :           +- CometProject (9)
                  :                    :              +- CometFilter (8)
                  :                    :                 +- CometScan parquet spark_catalog.default.customer_address (7)
                  :                    +- BroadcastExchange (23)
                  :                       +- * BroadcastHashJoin LeftSemi BuildRight (22)
                  :                          :- * ColumnarToRow (16)
                  :                          :  +- CometFilter (15)
                  :                          :     +- CometScan parquet spark_catalog.default.item (14)
                  :                          +- BroadcastExchange (21)
                  :                             +- * ColumnarToRow (20)
                  :                                +- CometProject (19)
                  :                                   +- CometFilter (18)
                  :                                      +- CometScan parquet spark_catalog.default.item (17)
                  :- * HashAggregate (47)
                  :  +- * ColumnarToRow (46)
                  :     +- CometColumnarExchange (45)
                  :        +- RowToColumnar (44)
                  :           +- * HashAggregate (43)
                  :              +- * Project (42)
                  :                 +- * BroadcastHashJoin Inner BuildRight (41)
                  :                    :- * Project (39)
                  :                    :  +- * BroadcastHashJoin Inner BuildRight (38)
                  :                    :     :- * Project (36)
                  :                    :     :  +- * BroadcastHashJoin Inner BuildRight (35)
                  :                    :     :     :- * ColumnarToRow (33)
                  :                    :     :     :  +- CometFilter (32)
                  :                    :     :     :     +- CometScan parquet spark_catalog.default.catalog_sales (31)
                  :                    :     :     +- ReusedExchange (34)
                  :                    :     +- ReusedExchange (37)
                  :                    +- ReusedExchange (40)
                  +- * HashAggregate (64)
                     +- * ColumnarToRow (63)
                        +- CometColumnarExchange (62)
                           +- RowToColumnar (61)
                              +- * HashAggregate (60)
                                 +- * Project (59)
                                    +- * BroadcastHashJoin Inner BuildRight (58)
                                       :- * Project (56)
                                       :  +- * BroadcastHashJoin Inner BuildRight (55)
                                       :     :- * Project (53)
                                       :     :  +- * BroadcastHashJoin Inner BuildRight (52)
                                       :     :     :- * ColumnarToRow (50)
                                       :     :     :  +- CometFilter (49)
                                       :     :     :     +- CometScan parquet spark_catalog.default.web_sales (48)
                                       :     :     +- ReusedExchange (51)
                                       :     +- ReusedExchange (54)
                                       +- ReusedExchange (57)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_addr_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_addr_sk#2) AND isnotnull(ss_item_sk#1))

(3) ColumnarToRow [codegen id : 5]
Input [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]

(4) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(6) Project [codegen id : 5]
Output [3]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3]
Input [5]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4, d_date_sk#6]

(unknown) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#7, ca_gmt_offset#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(8) CometFilter
Input [2]: [ca_address_sk#7, ca_gmt_offset#8]
Condition : ((isnotnull(ca_gmt_offset#8) AND (ca_gmt_offset#8 = -5.00)) AND isnotnull(ca_address_sk#7))

(9) CometProject
Input [2]: [ca_address_sk#7, ca_gmt_offset#8]
Arguments: [ca_address_sk#7], [ca_address_sk#7]

(10) ColumnarToRow [codegen id : 2]
Input [1]: [ca_address_sk#7]

(11) BroadcastExchange
Input [1]: [ca_address_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(12) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_addr_sk#2]
Right keys [1]: [ca_address_sk#7]
Join type: Inner
Join condition: None

(13) Project [codegen id : 5]
Output [2]: [ss_item_sk#1, ss_ext_sales_price#3]
Input [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ca_address_sk#7]

(unknown) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#9, i_item_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(15) CometFilter
Input [2]: [i_item_sk#9, i_item_id#10]
Condition : isnotnull(i_item_sk#9)

(16) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#9, i_item_id#10]

(unknown) Scan parquet spark_catalog.default.item
Output [2]: [i_item_id#11, i_category#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Music                                             )]
ReadSchema: struct<i_item_id:string,i_category:string>

(18) CometFilter
Input [2]: [i_item_id#11, i_category#12]
Condition : (isnotnull(i_category#12) AND (i_category#12 = Music                                             ))

(19) CometProject
Input [2]: [i_item_id#11, i_category#12]
Arguments: [i_item_id#11], [i_item_id#11]

(20) ColumnarToRow [codegen id : 3]
Input [1]: [i_item_id#11]

(21) BroadcastExchange
Input [1]: [i_item_id#11]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=2]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_item_id#10]
Right keys [1]: [i_item_id#11]
Join type: LeftSemi
Join condition: None

(23) BroadcastExchange
Input [2]: [i_item_sk#9, i_item_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(24) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#9]
Join type: Inner
Join condition: None

(25) Project [codegen id : 5]
Output [2]: [ss_ext_sales_price#3, i_item_id#10]
Input [4]: [ss_item_sk#1, ss_ext_sales_price#3, i_item_sk#9, i_item_id#10]

(26) HashAggregate [codegen id : 5]
Input [2]: [ss_ext_sales_price#3, i_item_id#10]
Keys [1]: [i_item_id#10]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum#13]
Results [2]: [i_item_id#10, sum#14]

(27) RowToColumnar
Input [2]: [i_item_id#10, sum#14]

(28) CometColumnarExchange
Input [2]: [i_item_id#10, sum#14]
Arguments: hashpartitioning(i_item_id#10, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(29) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_id#10, sum#14]

(30) HashAggregate [codegen id : 6]
Input [2]: [i_item_id#10, sum#14]
Keys [1]: [i_item_id#10]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#3))#15]
Results [2]: [i_item_id#10, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#15,17,2) AS total_sales#16]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_bill_addr_sk#17, cs_item_sk#18, cs_ext_sales_price#19, cs_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#20), dynamicpruningexpression(cs_sold_date_sk#20 IN dynamicpruning#21)]
PushedFilters: [IsNotNull(cs_bill_addr_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_addr_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(32) CometFilter
Input [4]: [cs_bill_addr_sk#17, cs_item_sk#18, cs_ext_sales_price#19, cs_sold_date_sk#20]
Condition : (isnotnull(cs_bill_addr_sk#17) AND isnotnull(cs_item_sk#18))

(33) ColumnarToRow [codegen id : 11]
Input [4]: [cs_bill_addr_sk#17, cs_item_sk#18, cs_ext_sales_price#19, cs_sold_date_sk#20]

(34) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#22]

(35) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_sold_date_sk#20]
Right keys [1]: [d_date_sk#22]
Join type: Inner
Join condition: None

(36) Project [codegen id : 11]
Output [3]: [cs_bill_addr_sk#17, cs_item_sk#18, cs_ext_sales_price#19]
Input [5]: [cs_bill_addr_sk#17, cs_item_sk#18, cs_ext_sales_price#19, cs_sold_date_sk#20, d_date_sk#22]

(37) ReusedExchange [Reuses operator id: 11]
Output [1]: [ca_address_sk#23]

(38) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_bill_addr_sk#17]
Right keys [1]: [ca_address_sk#23]
Join type: Inner
Join condition: None

(39) Project [codegen id : 11]
Output [2]: [cs_item_sk#18, cs_ext_sales_price#19]
Input [4]: [cs_bill_addr_sk#17, cs_item_sk#18, cs_ext_sales_price#19, ca_address_sk#23]

(40) ReusedExchange [Reuses operator id: 23]
Output [2]: [i_item_sk#24, i_item_id#25]

(41) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#24]
Join type: Inner
Join condition: None

(42) Project [codegen id : 11]
Output [2]: [cs_ext_sales_price#19, i_item_id#25]
Input [4]: [cs_item_sk#18, cs_ext_sales_price#19, i_item_sk#24, i_item_id#25]

(43) HashAggregate [codegen id : 11]
Input [2]: [cs_ext_sales_price#19, i_item_id#25]
Keys [1]: [i_item_id#25]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#19))]
Aggregate Attributes [1]: [sum#26]
Results [2]: [i_item_id#25, sum#27]

(44) RowToColumnar
Input [2]: [i_item_id#25, sum#27]

(45) CometColumnarExchange
Input [2]: [i_item_id#25, sum#27]
Arguments: hashpartitioning(i_item_id#25, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(46) ColumnarToRow [codegen id : 12]
Input [2]: [i_item_id#25, sum#27]

(47) HashAggregate [codegen id : 12]
Input [2]: [i_item_id#25, sum#27]
Keys [1]: [i_item_id#25]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#19))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#19))#28]
Results [2]: [i_item_id#25, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#19))#28,17,2) AS total_sales#29]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#30, ws_bill_addr_sk#31, ws_ext_sales_price#32, ws_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#34)]
PushedFilters: [IsNotNull(ws_bill_addr_sk), IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(49) CometFilter
Input [4]: [ws_item_sk#30, ws_bill_addr_sk#31, ws_ext_sales_price#32, ws_sold_date_sk#33]
Condition : (isnotnull(ws_bill_addr_sk#31) AND isnotnull(ws_item_sk#30))

(50) ColumnarToRow [codegen id : 17]
Input [4]: [ws_item_sk#30, ws_bill_addr_sk#31, ws_ext_sales_price#32, ws_sold_date_sk#33]

(51) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#35]

(52) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#33]
Right keys [1]: [d_date_sk#35]
Join type: Inner
Join condition: None

(53) Project [codegen id : 17]
Output [3]: [ws_item_sk#30, ws_bill_addr_sk#31, ws_ext_sales_price#32]
Input [5]: [ws_item_sk#30, ws_bill_addr_sk#31, ws_ext_sales_price#32, ws_sold_date_sk#33, d_date_sk#35]

(54) ReusedExchange [Reuses operator id: 11]
Output [1]: [ca_address_sk#36]

(55) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_bill_addr_sk#31]
Right keys [1]: [ca_address_sk#36]
Join type: Inner
Join condition: None

(56) Project [codegen id : 17]
Output [2]: [ws_item_sk#30, ws_ext_sales_price#32]
Input [4]: [ws_item_sk#30, ws_bill_addr_sk#31, ws_ext_sales_price#32, ca_address_sk#36]

(57) ReusedExchange [Reuses operator id: 23]
Output [2]: [i_item_sk#37, i_item_id#38]

(58) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_item_sk#30]
Right keys [1]: [i_item_sk#37]
Join type: Inner
Join condition: None

(59) Project [codegen id : 17]
Output [2]: [ws_ext_sales_price#32, i_item_id#38]
Input [4]: [ws_item_sk#30, ws_ext_sales_price#32, i_item_sk#37, i_item_id#38]

(60) HashAggregate [codegen id : 17]
Input [2]: [ws_ext_sales_price#32, i_item_id#38]
Keys [1]: [i_item_id#38]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#32))]
Aggregate Attributes [1]: [sum#39]
Results [2]: [i_item_id#38, sum#40]

(61) RowToColumnar
Input [2]: [i_item_id#38, sum#40]

(62) CometColumnarExchange
Input [2]: [i_item_id#38, sum#40]
Arguments: hashpartitioning(i_item_id#38, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(63) ColumnarToRow [codegen id : 18]
Input [2]: [i_item_id#38, sum#40]

(64) HashAggregate [codegen id : 18]
Input [2]: [i_item_id#38, sum#40]
Keys [1]: [i_item_id#38]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#32))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#32))#41]
Results [2]: [i_item_id#38, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#32))#41,17,2) AS total_sales#42]

(65) Union

(66) HashAggregate [codegen id : 19]
Input [2]: [i_item_id#10, total_sales#16]
Keys [1]: [i_item_id#10]
Functions [1]: [partial_sum(total_sales#16)]
Aggregate Attributes [2]: [sum#43, isEmpty#44]
Results [3]: [i_item_id#10, sum#45, isEmpty#46]

(67) RowToColumnar
Input [3]: [i_item_id#10, sum#45, isEmpty#46]

(68) CometColumnarExchange
Input [3]: [i_item_id#10, sum#45, isEmpty#46]
Arguments: hashpartitioning(i_item_id#10, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(69) ColumnarToRow [codegen id : 20]
Input [3]: [i_item_id#10, sum#45, isEmpty#46]

(70) HashAggregate [codegen id : 20]
Input [3]: [i_item_id#10, sum#45, isEmpty#46]
Keys [1]: [i_item_id#10]
Functions [1]: [sum(total_sales#16)]
Aggregate Attributes [1]: [sum(total_sales#16)#47]
Results [2]: [i_item_id#10, sum(total_sales#16)#47 AS total_sales#48]

(71) TakeOrderedAndProject
Input [2]: [i_item_id#10, total_sales#48]
Arguments: 100, [i_item_id#10 ASC NULLS FIRST, total_sales#48 ASC NULLS FIRST], [i_item_id#10, total_sales#48]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (76)
+- * ColumnarToRow (75)
   +- CometProject (74)
      +- CometFilter (73)
         +- CometScan parquet spark_catalog.default.date_dim (72)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#6, d_year#49, d_moy#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,9), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(73) CometFilter
Input [3]: [d_date_sk#6, d_year#49, d_moy#50]
Condition : ((((isnotnull(d_year#49) AND isnotnull(d_moy#50)) AND (d_year#49 = 1998)) AND (d_moy#50 = 9)) AND isnotnull(d_date_sk#6))

(74) CometProject
Input [3]: [d_date_sk#6, d_year#49, d_moy#50]
Arguments: [d_date_sk#6], [d_date_sk#6]

(75) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#6]

(76) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 31 Hosting Expression = cs_sold_date_sk#20 IN dynamicpruning#5

Subquery:3 Hosting operator id = 48 Hosting Expression = ws_sold_date_sk#33 IN dynamicpruning#5


