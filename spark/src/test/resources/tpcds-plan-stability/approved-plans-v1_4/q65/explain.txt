== Physical Plan ==
TakeOrderedAndProject (43)
+- * Project (42)
   +- * BroadcastHashJoin Inner BuildRight (41)
      :- * Project (24)
      :  +- * BroadcastHashJoin Inner BuildRight (23)
      :     :- * Project (18)
      :     :  +- * BroadcastHashJoin Inner BuildRight (17)
      :     :     :- * ColumnarToRow (3)
      :     :     :  +- CometFilter (2)
      :     :     :     +- CometScan parquet spark_catalog.default.store (1)
      :     :     +- BroadcastExchange (16)
      :     :        +- * ColumnarToRow (15)
      :     :           +- CometFilter (14)
      :     :              +- CometHashAggregate (13)
      :     :                 +- CometColumnarExchange (12)
      :     :                    +- RowToColumnar (11)
      :     :                       +- * HashAggregate (10)
      :     :                          +- * Project (9)
      :     :                             +- * BroadcastHashJoin Inner BuildRight (8)
      :     :                                :- * ColumnarToRow (6)
      :     :                                :  +- CometFilter (5)
      :     :                                :     +- CometScan parquet spark_catalog.default.store_sales (4)
      :     :                                +- ReusedExchange (7)
      :     +- BroadcastExchange (22)
      :        +- * ColumnarToRow (21)
      :           +- CometFilter (20)
      :              +- CometScan parquet spark_catalog.default.item (19)
      +- BroadcastExchange (40)
         +- * ColumnarToRow (39)
            +- CometFilter (38)
               +- CometHashAggregate (37)
                  +- CometColumnarExchange (36)
                     +- CometHashAggregate (35)
                        +- CometHashAggregate (34)
                           +- CometColumnarExchange (33)
                              +- RowToColumnar (32)
                                 +- * HashAggregate (31)
                                    +- * Project (30)
                                       +- * BroadcastHashJoin Inner BuildRight (29)
                                          :- * ColumnarToRow (27)
                                          :  +- CometFilter (26)
                                          :     +- CometScan parquet spark_catalog.default.store_sales (25)
                                          +- ReusedExchange (28)


(unknown) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#1, s_store_name#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(2) CometFilter
Input [2]: [s_store_sk#1, s_store_name#2]
Condition : isnotnull(s_store_sk#1)

(3) ColumnarToRow [codegen id : 8]
Input [2]: [s_store_sk#1, s_store_name#2]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(5) CometFilter
Input [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Condition : (isnotnull(ss_store_sk#4) AND isnotnull(ss_item_sk#3))

(6) ColumnarToRow [codegen id : 2]
Input [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]

(7) ReusedExchange [Reuses operator id: 48]
Output [1]: [d_date_sk#8]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join type: Inner
Join condition: None

(9) Project [codegen id : 2]
Output [3]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]
Input [5]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6, d_date_sk#8]

(10) HashAggregate [codegen id : 2]
Input [3]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#5))]
Aggregate Attributes [1]: [sum#9]
Results [3]: [ss_store_sk#4, ss_item_sk#3, sum#10]

(11) RowToColumnar
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#10]

(12) CometColumnarExchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#10]
Arguments: hashpartitioning(ss_store_sk#4, ss_item_sk#3, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(13) CometHashAggregate
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#10]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [sum(UnscaledValue(ss_sales_price#5))]

(14) CometFilter
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#11]
Condition : isnotnull(revenue#11)

(15) ColumnarToRow [codegen id : 3]
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#11]

(16) BroadcastExchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [s_store_sk#1]
Right keys [1]: [ss_store_sk#4]
Join type: Inner
Join condition: None

(18) Project [codegen id : 8]
Output [4]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#11]
Input [5]: [s_store_sk#1, s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#11]

(unknown) Scan parquet spark_catalog.default.item
Output [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand:string>

(20) CometFilter
Input [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Condition : isnotnull(i_item_sk#12)

(21) ColumnarToRow [codegen id : 4]
Input [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]

(22) BroadcastExchange
Input [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(23) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#3]
Right keys [1]: [i_item_sk#12]
Join type: Inner
Join condition: None

(24) Project [codegen id : 8]
Output [7]: [s_store_name#2, ss_store_sk#4, revenue#11, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Input [9]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#11, i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19, ss_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#20), dynamicpruningexpression(ss_sold_date_sk#20 IN dynamicpruning#21)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(26) CometFilter
Input [4]: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19, ss_sold_date_sk#20]
Condition : isnotnull(ss_store_sk#18)

(27) ColumnarToRow [codegen id : 6]
Input [4]: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19, ss_sold_date_sk#20]

(28) ReusedExchange [Reuses operator id: 48]
Output [1]: [d_date_sk#22]

(29) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#20]
Right keys [1]: [d_date_sk#22]
Join type: Inner
Join condition: None

(30) Project [codegen id : 6]
Output [3]: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19]
Input [5]: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19, ss_sold_date_sk#20, d_date_sk#22]

(31) HashAggregate [codegen id : 6]
Input [3]: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19]
Keys [2]: [ss_store_sk#18, ss_item_sk#17]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#19))]
Aggregate Attributes [1]: [sum#23]
Results [3]: [ss_store_sk#18, ss_item_sk#17, sum#24]

(32) RowToColumnar
Input [3]: [ss_store_sk#18, ss_item_sk#17, sum#24]

(33) CometColumnarExchange
Input [3]: [ss_store_sk#18, ss_item_sk#17, sum#24]
Arguments: hashpartitioning(ss_store_sk#18, ss_item_sk#17, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(34) CometHashAggregate
Input [3]: [ss_store_sk#18, ss_item_sk#17, sum#24]
Keys [2]: [ss_store_sk#18, ss_item_sk#17]
Functions [1]: [sum(UnscaledValue(ss_sales_price#19))]

(35) CometHashAggregate
Input [2]: [ss_store_sk#18, revenue#25]
Keys [1]: [ss_store_sk#18]
Functions [1]: [partial_avg(revenue#25)]

(36) CometColumnarExchange
Input [3]: [ss_store_sk#18, sum#26, count#27]
Arguments: hashpartitioning(ss_store_sk#18, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(37) CometHashAggregate
Input [3]: [ss_store_sk#18, sum#26, count#27]
Keys [1]: [ss_store_sk#18]
Functions [1]: [avg(revenue#25)]

(38) CometFilter
Input [2]: [ss_store_sk#18, ave#28]
Condition : isnotnull(ave#28)

(39) ColumnarToRow [codegen id : 7]
Input [2]: [ss_store_sk#18, ave#28]

(40) BroadcastExchange
Input [2]: [ss_store_sk#18, ave#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(41) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [ss_store_sk#18]
Join type: Inner
Join condition: (cast(revenue#11 as decimal(23,7)) <= (0.1 * ave#28))

(42) Project [codegen id : 8]
Output [6]: [s_store_name#2, i_item_desc#13, revenue#11, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Input [9]: [s_store_name#2, ss_store_sk#4, revenue#11, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16, ss_store_sk#18, ave#28]

(43) TakeOrderedAndProject
Input [6]: [s_store_name#2, i_item_desc#13, revenue#11, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Arguments: 100, [s_store_name#2 ASC NULLS FIRST, i_item_desc#13 ASC NULLS FIRST], [s_store_name#2, i_item_desc#13, revenue#11, i_current_price#14, i_wholesale_cost#15, i_brand#16]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (48)
+- * ColumnarToRow (47)
   +- CometProject (46)
      +- CometFilter (45)
         +- CometScan parquet spark_catalog.default.date_dim (44)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#8, d_month_seq#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1176), LessThanOrEqual(d_month_seq,1187), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(45) CometFilter
Input [2]: [d_date_sk#8, d_month_seq#29]
Condition : (((isnotnull(d_month_seq#29) AND (d_month_seq#29 >= 1176)) AND (d_month_seq#29 <= 1187)) AND isnotnull(d_date_sk#8))

(46) CometProject
Input [2]: [d_date_sk#8, d_month_seq#29]
Arguments: [d_date_sk#8], [d_date_sk#8]

(47) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#8]

(48) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:2 Hosting operator id = 25 Hosting Expression = ss_sold_date_sk#20 IN dynamicpruning#7


