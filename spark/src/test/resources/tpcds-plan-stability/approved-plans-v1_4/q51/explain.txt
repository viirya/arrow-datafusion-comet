== Physical Plan ==
TakeOrderedAndProject (44)
+- * Filter (43)
   +- Window (42)
      +- * ColumnarToRow (41)
         +- CometSort (40)
            +- CometColumnarExchange (39)
               +- CometProject (38)
                  +- CometSortMergeJoin (37)
                     :- CometSort (18)
                     :  +- CometColumnarExchange (17)
                     :     +- RowToColumnar (16)
                     :        +- * Project (15)
                     :           +- Window (14)
                     :              +- * ColumnarToRow (13)
                     :                 +- CometSort (12)
                     :                    +- CometColumnarExchange (11)
                     :                       +- CometHashAggregate (10)
                     :                          +- CometColumnarExchange (9)
                     :                             +- RowToColumnar (8)
                     :                                +- * HashAggregate (7)
                     :                                   +- * Project (6)
                     :                                      +- * BroadcastHashJoin Inner BuildRight (5)
                     :                                         :- * ColumnarToRow (3)
                     :                                         :  +- CometFilter (2)
                     :                                         :     +- CometScan parquet spark_catalog.default.web_sales (1)
                     :                                         +- ReusedExchange (4)
                     +- CometSort (36)
                        +- CometColumnarExchange (35)
                           +- RowToColumnar (34)
                              +- * Project (33)
                                 +- Window (32)
                                    +- * ColumnarToRow (31)
                                       +- CometSort (30)
                                          +- CometColumnarExchange (29)
                                             +- CometHashAggregate (28)
                                                +- CometColumnarExchange (27)
                                                   +- RowToColumnar (26)
                                                      +- * HashAggregate (25)
                                                         +- * Project (24)
                                                            +- * BroadcastHashJoin Inner BuildRight (23)
                                                               :- * ColumnarToRow (21)
                                                               :  +- CometFilter (20)
                                                               :     +- CometScan parquet spark_catalog.default.store_sales (19)
                                                               +- ReusedExchange (22)


(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(3) ColumnarToRow [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]

(4) ReusedExchange [Reuses operator id: 49]
Output [2]: [d_date_sk#5, d_date#6]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#5, d_date#6]

(7) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum#7]
Results [3]: [ws_item_sk#1, d_date#6, sum#8]

(8) RowToColumnar
Input [3]: [ws_item_sk#1, d_date#6, sum#8]

(9) CometColumnarExchange
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Arguments: hashpartitioning(ws_item_sk#1, d_date#6, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(10) CometHashAggregate
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]

(11) CometColumnarExchange
Input [4]: [item_sk#9, d_date#6, _w0#10, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(12) CometSort
Input [4]: [item_sk#9, d_date#6, _w0#10, ws_item_sk#1]
Arguments: [item_sk#9, d_date#6, _w0#10, ws_item_sk#1], [ws_item_sk#1 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST]

(13) ColumnarToRow [codegen id : 3]
Input [4]: [item_sk#9, d_date#6, _w0#10, ws_item_sk#1]

(14) Window
Input [4]: [item_sk#9, d_date#6, _w0#10, ws_item_sk#1]
Arguments: [sum(_w0#10) windowspecdefinition(ws_item_sk#1, d_date#6 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#11], [ws_item_sk#1], [d_date#6 ASC NULLS FIRST]

(15) Project [codegen id : 4]
Output [3]: [item_sk#9, d_date#6, cume_sales#11]
Input [5]: [item_sk#9, d_date#6, _w0#10, ws_item_sk#1, cume_sales#11]

(16) RowToColumnar
Input [3]: [item_sk#9, d_date#6, cume_sales#11]

(17) CometColumnarExchange
Input [3]: [item_sk#9, d_date#6, cume_sales#11]
Arguments: hashpartitioning(item_sk#9, d_date#6, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(18) CometSort
Input [3]: [item_sk#9, d_date#6, cume_sales#11]
Arguments: [item_sk#9, d_date#6, cume_sales#11], [item_sk#9 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#12, ss_sales_price#13, ss_sold_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#14), dynamicpruningexpression(ss_sold_date_sk#14 IN dynamicpruning#15)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>

(20) CometFilter
Input [3]: [ss_item_sk#12, ss_sales_price#13, ss_sold_date_sk#14]
Condition : isnotnull(ss_item_sk#12)

(21) ColumnarToRow [codegen id : 6]
Input [3]: [ss_item_sk#12, ss_sales_price#13, ss_sold_date_sk#14]

(22) ReusedExchange [Reuses operator id: 49]
Output [2]: [d_date_sk#16, d_date#17]

(23) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#14]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(24) Project [codegen id : 6]
Output [3]: [ss_item_sk#12, ss_sales_price#13, d_date#17]
Input [5]: [ss_item_sk#12, ss_sales_price#13, ss_sold_date_sk#14, d_date_sk#16, d_date#17]

(25) HashAggregate [codegen id : 6]
Input [3]: [ss_item_sk#12, ss_sales_price#13, d_date#17]
Keys [2]: [ss_item_sk#12, d_date#17]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#13))]
Aggregate Attributes [1]: [sum#18]
Results [3]: [ss_item_sk#12, d_date#17, sum#19]

(26) RowToColumnar
Input [3]: [ss_item_sk#12, d_date#17, sum#19]

(27) CometColumnarExchange
Input [3]: [ss_item_sk#12, d_date#17, sum#19]
Arguments: hashpartitioning(ss_item_sk#12, d_date#17, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(28) CometHashAggregate
Input [3]: [ss_item_sk#12, d_date#17, sum#19]
Keys [2]: [ss_item_sk#12, d_date#17]
Functions [1]: [sum(UnscaledValue(ss_sales_price#13))]

(29) CometColumnarExchange
Input [4]: [item_sk#20, d_date#17, _w0#21, ss_item_sk#12]
Arguments: hashpartitioning(ss_item_sk#12, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(30) CometSort
Input [4]: [item_sk#20, d_date#17, _w0#21, ss_item_sk#12]
Arguments: [item_sk#20, d_date#17, _w0#21, ss_item_sk#12], [ss_item_sk#12 ASC NULLS FIRST, d_date#17 ASC NULLS FIRST]

(31) ColumnarToRow [codegen id : 7]
Input [4]: [item_sk#20, d_date#17, _w0#21, ss_item_sk#12]

(32) Window
Input [4]: [item_sk#20, d_date#17, _w0#21, ss_item_sk#12]
Arguments: [sum(_w0#21) windowspecdefinition(ss_item_sk#12, d_date#17 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#22], [ss_item_sk#12], [d_date#17 ASC NULLS FIRST]

(33) Project [codegen id : 8]
Output [3]: [item_sk#20, d_date#17, cume_sales#22]
Input [5]: [item_sk#20, d_date#17, _w0#21, ss_item_sk#12, cume_sales#22]

(34) RowToColumnar
Input [3]: [item_sk#20, d_date#17, cume_sales#22]

(35) CometColumnarExchange
Input [3]: [item_sk#20, d_date#17, cume_sales#22]
Arguments: hashpartitioning(item_sk#20, d_date#17, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(36) CometSort
Input [3]: [item_sk#20, d_date#17, cume_sales#22]
Arguments: [item_sk#20, d_date#17, cume_sales#22], [item_sk#20 ASC NULLS FIRST, d_date#17 ASC NULLS FIRST]

(37) CometSortMergeJoin
Left output [3]: [item_sk#9, d_date#6, cume_sales#11]
Right output [3]: [item_sk#20, d_date#17, cume_sales#22]
Arguments: [item_sk#9, d_date#6], [item_sk#20, d_date#17], FullOuter

(38) CometProject
Input [6]: [item_sk#9, d_date#6, cume_sales#11, item_sk#20, d_date#17, cume_sales#22]
Arguments: [item_sk#23, d_date#24, web_sales#25, store_sales#26], [CASE WHEN isnotnull(item_sk#9) THEN item_sk#9 ELSE item_sk#20 END AS item_sk#23, CASE WHEN isnotnull(d_date#6) THEN d_date#6 ELSE d_date#17 END AS d_date#24, cume_sales#11 AS web_sales#25, cume_sales#22 AS store_sales#26]

(39) CometColumnarExchange
Input [4]: [item_sk#23, d_date#24, web_sales#25, store_sales#26]
Arguments: hashpartitioning(item_sk#23, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(40) CometSort
Input [4]: [item_sk#23, d_date#24, web_sales#25, store_sales#26]
Arguments: [item_sk#23, d_date#24, web_sales#25, store_sales#26], [item_sk#23 ASC NULLS FIRST, d_date#24 ASC NULLS FIRST]

(41) ColumnarToRow [codegen id : 9]
Input [4]: [item_sk#23, d_date#24, web_sales#25, store_sales#26]

(42) Window
Input [4]: [item_sk#23, d_date#24, web_sales#25, store_sales#26]
Arguments: [max(web_sales#25) windowspecdefinition(item_sk#23, d_date#24 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#27, max(store_sales#26) windowspecdefinition(item_sk#23, d_date#24 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#28], [item_sk#23], [d_date#24 ASC NULLS FIRST]

(43) Filter [codegen id : 10]
Input [6]: [item_sk#23, d_date#24, web_sales#25, store_sales#26, web_cumulative#27, store_cumulative#28]
Condition : ((isnotnull(web_cumulative#27) AND isnotnull(store_cumulative#28)) AND (web_cumulative#27 > store_cumulative#28))

(44) TakeOrderedAndProject
Input [6]: [item_sk#23, d_date#24, web_sales#25, store_sales#26, web_cumulative#27, store_cumulative#28]
Arguments: 100, [item_sk#23 ASC NULLS FIRST, d_date#24 ASC NULLS FIRST], [item_sk#23, d_date#24, web_sales#25, store_sales#26, web_cumulative#27, store_cumulative#28]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (49)
+- * ColumnarToRow (48)
   +- CometProject (47)
      +- CometFilter (46)
         +- CometScan parquet spark_catalog.default.date_dim (45)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(46) CometFilter
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#29]
Condition : (((isnotnull(d_month_seq#29) AND (d_month_seq#29 >= 1200)) AND (d_month_seq#29 <= 1211)) AND isnotnull(d_date_sk#5))

(47) CometProject
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#29]
Arguments: [d_date_sk#5, d_date#6], [d_date_sk#5, d_date#6]

(48) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_date#6]

(49) BroadcastExchange
Input [2]: [d_date_sk#5, d_date#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 19 Hosting Expression = ss_sold_date_sk#14 IN dynamicpruning#4


