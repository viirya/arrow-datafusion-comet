== Physical Plan ==
TakeOrderedAndProject (48)
+- * Filter (47)
   +- Window (46)
      +- * ColumnarToRow (45)
         +- CometSort (44)
            +- CometColumnarExchange (43)
               +- CometProject (42)
                  +- CometSortMergeJoin (41)
                     :- CometSort (20)
                     :  +- CometColumnarExchange (19)
                     :     +- RowToColumnar (18)
                     :        +- * Project (17)
                     :           +- Window (16)
                     :              +- * ColumnarToRow (15)
                     :                 +- CometSort (14)
                     :                    +- CometColumnarExchange (13)
                     :                       +- RowToColumnar (12)
                     :                          +- * HashAggregate (11)
                     :                             +- * ColumnarToRow (10)
                     :                                +- CometColumnarExchange (9)
                     :                                   +- RowToColumnar (8)
                     :                                      +- * HashAggregate (7)
                     :                                         +- * Project (6)
                     :                                            +- * BroadcastHashJoin Inner BuildRight (5)
                     :                                               :- * ColumnarToRow (3)
                     :                                               :  +- CometFilter (2)
                     :                                               :     +- CometScan parquet spark_catalog.default.web_sales (1)
                     :                                               +- ReusedExchange (4)
                     +- CometSort (40)
                        +- CometColumnarExchange (39)
                           +- RowToColumnar (38)
                              +- * Project (37)
                                 +- Window (36)
                                    +- * ColumnarToRow (35)
                                       +- CometSort (34)
                                          +- CometColumnarExchange (33)
                                             +- RowToColumnar (32)
                                                +- * HashAggregate (31)
                                                   +- * ColumnarToRow (30)
                                                      +- CometColumnarExchange (29)
                                                         +- RowToColumnar (28)
                                                            +- * HashAggregate (27)
                                                               +- * Project (26)
                                                                  +- * BroadcastHashJoin Inner BuildRight (25)
                                                                     :- * ColumnarToRow (23)
                                                                     :  +- CometFilter (22)
                                                                     :     +- CometScan parquet spark_catalog.default.store_sales (21)
                                                                     +- ReusedExchange (24)


(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(3) ColumnarToRow [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]

(4) ReusedExchange [Reuses operator id: 53]
Output [2]: [d_date_sk#5, d_date#6]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#5, d_date#6]

(7) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum#7]
Results [3]: [ws_item_sk#1, d_date#6, sum#8]

(8) RowToColumnar
Input [3]: [ws_item_sk#1, d_date#6, sum#8]

(9) CometColumnarExchange
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Arguments: hashpartitioning(ws_item_sk#1, d_date#6, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(10) ColumnarToRow [codegen id : 3]
Input [3]: [ws_item_sk#1, d_date#6, sum#8]

(11) HashAggregate [codegen id : 3]
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#2))#9]
Results [4]: [ws_item_sk#1 AS item_sk#10, d_date#6, MakeDecimal(sum(UnscaledValue(ws_sales_price#2))#9,17,2) AS _w0#11, ws_item_sk#1]

(12) RowToColumnar
Input [4]: [item_sk#10, d_date#6, _w0#11, ws_item_sk#1]

(13) CometColumnarExchange
Input [4]: [item_sk#10, d_date#6, _w0#11, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(14) CometSort
Input [4]: [item_sk#10, d_date#6, _w0#11, ws_item_sk#1]
Arguments: [item_sk#10, d_date#6, _w0#11, ws_item_sk#1], [ws_item_sk#1 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST]

(15) ColumnarToRow [codegen id : 4]
Input [4]: [item_sk#10, d_date#6, _w0#11, ws_item_sk#1]

(16) Window
Input [4]: [item_sk#10, d_date#6, _w0#11, ws_item_sk#1]
Arguments: [sum(_w0#11) windowspecdefinition(ws_item_sk#1, d_date#6 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#12], [ws_item_sk#1], [d_date#6 ASC NULLS FIRST]

(17) Project [codegen id : 5]
Output [3]: [item_sk#10, d_date#6, cume_sales#12]
Input [5]: [item_sk#10, d_date#6, _w0#11, ws_item_sk#1, cume_sales#12]

(18) RowToColumnar
Input [3]: [item_sk#10, d_date#6, cume_sales#12]

(19) CometColumnarExchange
Input [3]: [item_sk#10, d_date#6, cume_sales#12]
Arguments: hashpartitioning(item_sk#10, d_date#6, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(20) CometSort
Input [3]: [item_sk#10, d_date#6, cume_sales#12]
Arguments: [item_sk#10, d_date#6, cume_sales#12], [item_sk#10 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST]

(unknown) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#13, ss_sales_price#14, ss_sold_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#15), dynamicpruningexpression(ss_sold_date_sk#15 IN dynamicpruning#16)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>

(22) CometFilter
Input [3]: [ss_item_sk#13, ss_sales_price#14, ss_sold_date_sk#15]
Condition : isnotnull(ss_item_sk#13)

(23) ColumnarToRow [codegen id : 7]
Input [3]: [ss_item_sk#13, ss_sales_price#14, ss_sold_date_sk#15]

(24) ReusedExchange [Reuses operator id: 53]
Output [2]: [d_date_sk#17, d_date#18]

(25) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_sold_date_sk#15]
Right keys [1]: [d_date_sk#17]
Join type: Inner
Join condition: None

(26) Project [codegen id : 7]
Output [3]: [ss_item_sk#13, ss_sales_price#14, d_date#18]
Input [5]: [ss_item_sk#13, ss_sales_price#14, ss_sold_date_sk#15, d_date_sk#17, d_date#18]

(27) HashAggregate [codegen id : 7]
Input [3]: [ss_item_sk#13, ss_sales_price#14, d_date#18]
Keys [2]: [ss_item_sk#13, d_date#18]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#14))]
Aggregate Attributes [1]: [sum#19]
Results [3]: [ss_item_sk#13, d_date#18, sum#20]

(28) RowToColumnar
Input [3]: [ss_item_sk#13, d_date#18, sum#20]

(29) CometColumnarExchange
Input [3]: [ss_item_sk#13, d_date#18, sum#20]
Arguments: hashpartitioning(ss_item_sk#13, d_date#18, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(30) ColumnarToRow [codegen id : 8]
Input [3]: [ss_item_sk#13, d_date#18, sum#20]

(31) HashAggregate [codegen id : 8]
Input [3]: [ss_item_sk#13, d_date#18, sum#20]
Keys [2]: [ss_item_sk#13, d_date#18]
Functions [1]: [sum(UnscaledValue(ss_sales_price#14))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#14))#21]
Results [4]: [ss_item_sk#13 AS item_sk#22, d_date#18, MakeDecimal(sum(UnscaledValue(ss_sales_price#14))#21,17,2) AS _w0#23, ss_item_sk#13]

(32) RowToColumnar
Input [4]: [item_sk#22, d_date#18, _w0#23, ss_item_sk#13]

(33) CometColumnarExchange
Input [4]: [item_sk#22, d_date#18, _w0#23, ss_item_sk#13]
Arguments: hashpartitioning(ss_item_sk#13, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(34) CometSort
Input [4]: [item_sk#22, d_date#18, _w0#23, ss_item_sk#13]
Arguments: [item_sk#22, d_date#18, _w0#23, ss_item_sk#13], [ss_item_sk#13 ASC NULLS FIRST, d_date#18 ASC NULLS FIRST]

(35) ColumnarToRow [codegen id : 9]
Input [4]: [item_sk#22, d_date#18, _w0#23, ss_item_sk#13]

(36) Window
Input [4]: [item_sk#22, d_date#18, _w0#23, ss_item_sk#13]
Arguments: [sum(_w0#23) windowspecdefinition(ss_item_sk#13, d_date#18 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#24], [ss_item_sk#13], [d_date#18 ASC NULLS FIRST]

(37) Project [codegen id : 10]
Output [3]: [item_sk#22, d_date#18, cume_sales#24]
Input [5]: [item_sk#22, d_date#18, _w0#23, ss_item_sk#13, cume_sales#24]

(38) RowToColumnar
Input [3]: [item_sk#22, d_date#18, cume_sales#24]

(39) CometColumnarExchange
Input [3]: [item_sk#22, d_date#18, cume_sales#24]
Arguments: hashpartitioning(item_sk#22, d_date#18, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(40) CometSort
Input [3]: [item_sk#22, d_date#18, cume_sales#24]
Arguments: [item_sk#22, d_date#18, cume_sales#24], [item_sk#22 ASC NULLS FIRST, d_date#18 ASC NULLS FIRST]

(41) CometSortMergeJoin
Left output [3]: [item_sk#10, d_date#6, cume_sales#12]
Right output [3]: [item_sk#22, d_date#18, cume_sales#24]
Arguments: [item_sk#10, d_date#6], [item_sk#22, d_date#18], FullOuter

(42) CometProject
Input [6]: [item_sk#10, d_date#6, cume_sales#12, item_sk#22, d_date#18, cume_sales#24]
Arguments: [item_sk#25, d_date#26, web_sales#27, store_sales#28], [CASE WHEN isnotnull(item_sk#10) THEN item_sk#10 ELSE item_sk#22 END AS item_sk#25, CASE WHEN isnotnull(d_date#6) THEN d_date#6 ELSE d_date#18 END AS d_date#26, cume_sales#12 AS web_sales#27, cume_sales#24 AS store_sales#28]

(43) CometColumnarExchange
Input [4]: [item_sk#25, d_date#26, web_sales#27, store_sales#28]
Arguments: hashpartitioning(item_sk#25, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(44) CometSort
Input [4]: [item_sk#25, d_date#26, web_sales#27, store_sales#28]
Arguments: [item_sk#25, d_date#26, web_sales#27, store_sales#28], [item_sk#25 ASC NULLS FIRST, d_date#26 ASC NULLS FIRST]

(45) ColumnarToRow [codegen id : 11]
Input [4]: [item_sk#25, d_date#26, web_sales#27, store_sales#28]

(46) Window
Input [4]: [item_sk#25, d_date#26, web_sales#27, store_sales#28]
Arguments: [max(web_sales#27) windowspecdefinition(item_sk#25, d_date#26 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#29, max(store_sales#28) windowspecdefinition(item_sk#25, d_date#26 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#30], [item_sk#25], [d_date#26 ASC NULLS FIRST]

(47) Filter [codegen id : 12]
Input [6]: [item_sk#25, d_date#26, web_sales#27, store_sales#28, web_cumulative#29, store_cumulative#30]
Condition : ((isnotnull(web_cumulative#29) AND isnotnull(store_cumulative#30)) AND (web_cumulative#29 > store_cumulative#30))

(48) TakeOrderedAndProject
Input [6]: [item_sk#25, d_date#26, web_sales#27, store_sales#28, web_cumulative#29, store_cumulative#30]
Arguments: 100, [item_sk#25 ASC NULLS FIRST, d_date#26 ASC NULLS FIRST], [item_sk#25, d_date#26, web_sales#27, store_sales#28, web_cumulative#29, store_cumulative#30]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (53)
+- * ColumnarToRow (52)
   +- CometProject (51)
      +- CometFilter (50)
         +- CometScan parquet spark_catalog.default.date_dim (49)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(50) CometFilter
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#31]
Condition : (((isnotnull(d_month_seq#31) AND (d_month_seq#31 >= 1200)) AND (d_month_seq#31 <= 1211)) AND isnotnull(d_date_sk#5))

(51) CometProject
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#31]
Arguments: [d_date_sk#5, d_date#6], [d_date_sk#5, d_date#6]

(52) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_date#6]

(53) BroadcastExchange
Input [2]: [d_date_sk#5, d_date#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 21 Hosting Expression = ss_sold_date_sk#15 IN dynamicpruning#4


