== Physical Plan ==
TakeOrderedAndProject (44)
+- * Project (43)
   +- * BroadcastHashJoin Inner BuildRight (42)
      :- * Project (37)
      :  +- * BroadcastHashJoin Inner BuildRight (36)
      :     :- * Project (30)
      :     :  +- * BroadcastHashJoin Inner BuildRight (29)
      :     :     :- * ColumnarToRow (12)
      :     :     :  +- CometFilter (11)
      :     :     :     +- CometHashAggregate (10)
      :     :     :        +- CometColumnarExchange (9)
      :     :     :           +- RowToColumnar (8)
      :     :     :              +- * HashAggregate (7)
      :     :     :                 +- * Project (6)
      :     :     :                    +- * BroadcastHashJoin Inner BuildRight (5)
      :     :     :                       :- * ColumnarToRow (3)
      :     :     :                       :  +- CometFilter (2)
      :     :     :                       :     +- CometScan parquet spark_catalog.default.store_returns (1)
      :     :     :                       +- ReusedExchange (4)
      :     :     +- BroadcastExchange (28)
      :     :        +- * ColumnarToRow (27)
      :     :           +- CometFilter (26)
      :     :              +- CometHashAggregate (25)
      :     :                 +- CometColumnarExchange (24)
      :     :                    +- CometHashAggregate (23)
      :     :                       +- CometHashAggregate (22)
      :     :                          +- CometColumnarExchange (21)
      :     :                             +- RowToColumnar (20)
      :     :                                +- * HashAggregate (19)
      :     :                                   +- * Project (18)
      :     :                                      +- * BroadcastHashJoin Inner BuildRight (17)
      :     :                                         :- * ColumnarToRow (15)
      :     :                                         :  +- CometFilter (14)
      :     :                                         :     +- CometScan parquet spark_catalog.default.store_returns (13)
      :     :                                         +- ReusedExchange (16)
      :     +- BroadcastExchange (35)
      :        +- * ColumnarToRow (34)
      :           +- CometProject (33)
      :              +- CometFilter (32)
      :                 +- CometScan parquet spark_catalog.default.store (31)
      +- BroadcastExchange (41)
         +- * ColumnarToRow (40)
            +- CometFilter (39)
               +- CometScan parquet spark_catalog.default.customer (38)


(unknown) Scan parquet spark_catalog.default.store_returns
Output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#4), dynamicpruningexpression(sr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)]
ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>

(2) CometFilter
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Condition : (isnotnull(sr_store_sk#2) AND isnotnull(sr_customer_sk#1))

(3) ColumnarToRow [codegen id : 2]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]

(4) ReusedExchange [Reuses operator id: 49]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [sr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Input [5]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4, d_date_sk#6]

(7) HashAggregate [codegen id : 2]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum#7]
Results [3]: [sr_customer_sk#1, sr_store_sk#2, sum#8]

(8) RowToColumnar
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#8]

(9) CometColumnarExchange
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#8]
Arguments: hashpartitioning(sr_customer_sk#1, sr_store_sk#2, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(10) CometHashAggregate
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#8]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [sum(UnscaledValue(sr_return_amt#3))]

(11) CometFilter
Input [3]: [ctr_customer_sk#9, ctr_store_sk#10, ctr_total_return#11]
Condition : isnotnull(ctr_total_return#11)

(12) ColumnarToRow [codegen id : 8]
Input [3]: [ctr_customer_sk#9, ctr_store_sk#10, ctr_total_return#11]

(unknown) Scan parquet spark_catalog.default.store_returns
Output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#4), dynamicpruningexpression(sr_returned_date_sk#4 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>

(14) CometFilter
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Condition : isnotnull(sr_store_sk#2)

(15) ColumnarToRow [codegen id : 4]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]

(16) ReusedExchange [Reuses operator id: 49]
Output [1]: [d_date_sk#6]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [sr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(18) Project [codegen id : 4]
Output [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Input [5]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4, d_date_sk#6]

(19) HashAggregate [codegen id : 4]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum#13]
Results [3]: [sr_customer_sk#1, sr_store_sk#2, sum#14]

(20) RowToColumnar
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#14]

(21) CometColumnarExchange
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#14]
Arguments: hashpartitioning(sr_customer_sk#1, sr_store_sk#2, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(22) CometHashAggregate
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#14]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [sum(UnscaledValue(sr_return_amt#3))]

(23) CometHashAggregate
Input [2]: [ctr_store_sk#10, ctr_total_return#11]
Keys [1]: [ctr_store_sk#10]
Functions [1]: [partial_avg(ctr_total_return#11)]

(24) CometColumnarExchange
Input [3]: [ctr_store_sk#10, sum#15, count#16]
Arguments: hashpartitioning(ctr_store_sk#10, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(25) CometHashAggregate
Input [3]: [ctr_store_sk#10, sum#15, count#16]
Keys [1]: [ctr_store_sk#10]
Functions [1]: [avg(ctr_total_return#11)]

(26) CometFilter
Input [2]: [(avg(ctr_total_return) * 1.2)#17, ctr_store_sk#10#18]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#17)

(27) ColumnarToRow [codegen id : 5]
Input [2]: [(avg(ctr_total_return) * 1.2)#17, ctr_store_sk#10#18]

(28) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#17, ctr_store_sk#10#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=4]

(29) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ctr_store_sk#10]
Right keys [1]: [ctr_store_sk#10#18]
Join type: Inner
Join condition: (cast(ctr_total_return#11 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#17)

(30) Project [codegen id : 8]
Output [2]: [ctr_customer_sk#9, ctr_store_sk#10]
Input [5]: [ctr_customer_sk#9, ctr_store_sk#10, ctr_total_return#11, (avg(ctr_total_return) * 1.2)#17, ctr_store_sk#10#18]

(unknown) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#19, s_state#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(32) CometFilter
Input [2]: [s_store_sk#19, s_state#20]
Condition : ((isnotnull(s_state#20) AND (s_state#20 = TN)) AND isnotnull(s_store_sk#19))

(33) CometProject
Input [2]: [s_store_sk#19, s_state#20]
Arguments: [s_store_sk#19], [s_store_sk#19]

(34) ColumnarToRow [codegen id : 6]
Input [1]: [s_store_sk#19]

(35) BroadcastExchange
Input [1]: [s_store_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(36) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ctr_store_sk#10]
Right keys [1]: [s_store_sk#19]
Join type: Inner
Join condition: None

(37) Project [codegen id : 8]
Output [1]: [ctr_customer_sk#9]
Input [3]: [ctr_customer_sk#9, ctr_store_sk#10, s_store_sk#19]

(unknown) Scan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#21, c_customer_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string>

(39) CometFilter
Input [2]: [c_customer_sk#21, c_customer_id#22]
Condition : isnotnull(c_customer_sk#21)

(40) ColumnarToRow [codegen id : 7]
Input [2]: [c_customer_sk#21, c_customer_id#22]

(41) BroadcastExchange
Input [2]: [c_customer_sk#21, c_customer_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]

(42) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ctr_customer_sk#9]
Right keys [1]: [c_customer_sk#21]
Join type: Inner
Join condition: None

(43) Project [codegen id : 8]
Output [1]: [c_customer_id#22]
Input [3]: [ctr_customer_sk#9, c_customer_sk#21, c_customer_id#22]

(44) TakeOrderedAndProject
Input [1]: [c_customer_id#22]
Arguments: 100, [c_customer_id#22 ASC NULLS FIRST], [c_customer_id#22]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = sr_returned_date_sk#4 IN dynamicpruning#5
BroadcastExchange (49)
+- * ColumnarToRow (48)
   +- CometProject (47)
      +- CometFilter (46)
         +- CometScan parquet spark_catalog.default.date_dim (45)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_year#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(46) CometFilter
Input [2]: [d_date_sk#6, d_year#23]
Condition : ((isnotnull(d_year#23) AND (d_year#23 = 2000)) AND isnotnull(d_date_sk#6))

(47) CometProject
Input [2]: [d_date_sk#6, d_year#23]
Arguments: [d_date_sk#6], [d_date_sk#6]

(48) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#6]

(49) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:2 Hosting operator id = 13 Hosting Expression = sr_returned_date_sk#4 IN dynamicpruning#5


