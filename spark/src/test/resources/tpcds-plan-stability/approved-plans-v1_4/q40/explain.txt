== Physical Plan ==
* ColumnarToRow (34)
+- CometTakeOrderedAndProject (33)
   +- CometHashAggregate (32)
      +- CometColumnarExchange (31)
         +- RowToColumnar (30)
            +- * HashAggregate (29)
               +- * Project (28)
                  +- * BroadcastHashJoin Inner BuildRight (27)
                     :- * Project (25)
                     :  +- * BroadcastHashJoin Inner BuildRight (24)
                     :     :- * Project (18)
                     :     :  +- * BroadcastHashJoin Inner BuildRight (17)
                     :     :     :- * ColumnarToRow (12)
                     :     :     :  +- CometProject (11)
                     :     :     :     +- CometSortMergeJoin (10)
                     :     :     :        :- CometSort (4)
                     :     :     :        :  +- CometColumnarExchange (3)
                     :     :     :        :     +- CometFilter (2)
                     :     :     :        :        +- CometScan parquet spark_catalog.default.catalog_sales (1)
                     :     :     :        +- CometSort (9)
                     :     :     :           +- CometColumnarExchange (8)
                     :     :     :              +- CometProject (7)
                     :     :     :                 +- CometFilter (6)
                     :     :     :                    +- CometScan parquet spark_catalog.default.catalog_returns (5)
                     :     :     +- BroadcastExchange (16)
                     :     :        +- * ColumnarToRow (15)
                     :     :           +- CometFilter (14)
                     :     :              +- CometScan parquet spark_catalog.default.warehouse (13)
                     :     +- BroadcastExchange (23)
                     :        +- * ColumnarToRow (22)
                     :           +- CometProject (21)
                     :              +- CometFilter (20)
                     :                 +- CometScan parquet spark_catalog.default.item (19)
                     +- ReusedExchange (26)


(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_warehouse_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_warehouse_sk:int,cs_item_sk:int,cs_order_number:int,cs_sales_price:decimal(7,2)>

(2) CometFilter
Input [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Condition : (isnotnull(cs_warehouse_sk#1) AND isnotnull(cs_item_sk#2))

(3) CometColumnarExchange
Input [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_order_number#3, cs_item_sk#2, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(4) CometSort
Input [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Arguments: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5], [cs_order_number#3 ASC NULLS FIRST, cs_item_sk#2 ASC NULLS FIRST]

(unknown) Scan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9, cr_returned_date_sk#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_refunded_cash:decimal(7,2)>

(6) CometFilter
Input [4]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9, cr_returned_date_sk#10]
Condition : (isnotnull(cr_order_number#8) AND isnotnull(cr_item_sk#7))

(7) CometProject
Input [4]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9, cr_returned_date_sk#10]
Arguments: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9], [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9]

(8) CometColumnarExchange
Input [3]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9]
Arguments: hashpartitioning(cr_order_number#8, cr_item_sk#7, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(9) CometSort
Input [3]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9]
Arguments: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9], [cr_order_number#8 ASC NULLS FIRST, cr_item_sk#7 ASC NULLS FIRST]

(10) CometSortMergeJoin
Left output [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Right output [3]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9]
Arguments: [cs_order_number#3, cs_item_sk#2], [cr_order_number#8, cr_item_sk#7], LeftOuter

(11) CometProject
Input [8]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5, cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9]
Arguments: [cs_warehouse_sk#1, cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9], [cs_warehouse_sk#1, cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9]

(12) ColumnarToRow [codegen id : 4]
Input [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9]

(unknown) Scan parquet spark_catalog.default.warehouse
Output [2]: [w_warehouse_sk#11, w_state#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_state:string>

(14) CometFilter
Input [2]: [w_warehouse_sk#11, w_state#12]
Condition : isnotnull(w_warehouse_sk#11)

(15) ColumnarToRow [codegen id : 1]
Input [2]: [w_warehouse_sk#11, w_state#12]

(16) BroadcastExchange
Input [2]: [w_warehouse_sk#11, w_state#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_warehouse_sk#1]
Right keys [1]: [w_warehouse_sk#11]
Join type: Inner
Join condition: None

(18) Project [codegen id : 4]
Output [5]: [cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#12]
Input [7]: [cs_warehouse_sk#1, cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_warehouse_sk#11, w_state#12]

(unknown) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#13, i_item_id#14, i_current_price#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,0.99), LessThanOrEqual(i_current_price,1.49), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_current_price:decimal(7,2)>

(20) CometFilter
Input [3]: [i_item_sk#13, i_item_id#14, i_current_price#15]
Condition : (((isnotnull(i_current_price#15) AND (i_current_price#15 >= 0.99)) AND (i_current_price#15 <= 1.49)) AND isnotnull(i_item_sk#13))

(21) CometProject
Input [3]: [i_item_sk#13, i_item_id#14, i_current_price#15]
Arguments: [i_item_sk#13, i_item_id#14], [i_item_sk#13, i_item_id#14]

(22) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#13, i_item_id#14]

(23) BroadcastExchange
Input [2]: [i_item_sk#13, i_item_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(24) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [i_item_sk#13]
Join type: Inner
Join condition: None

(25) Project [codegen id : 4]
Output [5]: [cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#12, i_item_id#14]
Input [7]: [cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#12, i_item_sk#13, i_item_id#14]

(26) ReusedExchange [Reuses operator id: 38]
Output [2]: [d_date_sk#16, d_date#17]

(27) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(28) Project [codegen id : 4]
Output [5]: [cs_sales_price#4, cr_refunded_cash#9, w_state#12, i_item_id#14, d_date#17]
Input [7]: [cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#12, i_item_id#14, d_date_sk#16, d_date#17]

(29) HashAggregate [codegen id : 4]
Input [5]: [cs_sales_price#4, cr_refunded_cash#9, w_state#12, i_item_id#14, d_date#17]
Keys [2]: [w_state#12, i_item_id#14]
Functions [2]: [partial_sum(CASE WHEN (d_date#17 < 2000-03-11) THEN (cs_sales_price#4 - coalesce(cast(cr_refunded_cash#9 as decimal(12,2)), 0.00)) ELSE 0.00 END), partial_sum(CASE WHEN (d_date#17 >= 2000-03-11) THEN (cs_sales_price#4 - coalesce(cast(cr_refunded_cash#9 as decimal(12,2)), 0.00)) ELSE 0.00 END)]
Aggregate Attributes [4]: [sum#18, isEmpty#19, sum#20, isEmpty#21]
Results [6]: [w_state#12, i_item_id#14, sum#22, isEmpty#23, sum#24, isEmpty#25]

(30) RowToColumnar
Input [6]: [w_state#12, i_item_id#14, sum#22, isEmpty#23, sum#24, isEmpty#25]

(31) CometColumnarExchange
Input [6]: [w_state#12, i_item_id#14, sum#22, isEmpty#23, sum#24, isEmpty#25]
Arguments: hashpartitioning(w_state#12, i_item_id#14, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(32) CometHashAggregate
Input [6]: [w_state#12, i_item_id#14, sum#22, isEmpty#23, sum#24, isEmpty#25]
Keys [2]: [w_state#12, i_item_id#14]
Functions [2]: [sum(CASE WHEN (d_date#17 < 2000-03-11) THEN (cs_sales_price#4 - coalesce(cast(cr_refunded_cash#9 as decimal(12,2)), 0.00)) ELSE 0.00 END), sum(CASE WHEN (d_date#17 >= 2000-03-11) THEN (cs_sales_price#4 - coalesce(cast(cr_refunded_cash#9 as decimal(12,2)), 0.00)) ELSE 0.00 END)]

(33) CometTakeOrderedAndProject
Input [4]: [w_state#12, i_item_id#14, sales_before#26, sales_after#27]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[w_state#12 ASC NULLS FIRST,i_item_id#14 ASC NULLS FIRST], output=[w_state#12,i_item_id#14,sales_before#26,sales_after#27]), 100, [w_state#12 ASC NULLS FIRST, i_item_id#14 ASC NULLS FIRST], [w_state#12, i_item_id#14, sales_before#26, sales_after#27]

(34) ColumnarToRow [codegen id : 5]
Input [4]: [w_state#12, i_item_id#14, sales_before#26, sales_after#27]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (38)
+- * ColumnarToRow (37)
   +- CometFilter (36)
      +- CometScan parquet spark_catalog.default.date_dim (35)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#16, d_date#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-02-10), LessThanOrEqual(d_date,2000-04-10), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(36) CometFilter
Input [2]: [d_date_sk#16, d_date#17]
Condition : (((isnotnull(d_date#17) AND (d_date#17 >= 2000-02-10)) AND (d_date#17 <= 2000-04-10)) AND isnotnull(d_date_sk#16))

(37) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#16, d_date#17]

(38) BroadcastExchange
Input [2]: [d_date_sk#16, d_date#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]


