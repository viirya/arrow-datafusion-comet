== Physical Plan ==
TakeOrderedAndProject (42)
+- * HashAggregate (41)
   +- * ColumnarToRow (40)
      +- CometColumnarExchange (39)
         +- RowToColumnar (38)
            +- * HashAggregate (37)
               +- * Project (36)
                  +- * BroadcastHashJoin Inner BuildRight (35)
                     :- * Project (30)
                     :  +- * BroadcastHashJoin Inner BuildRight (29)
                     :     :- * Project (24)
                     :     :  +- * BroadcastHashJoin Inner BuildRight (23)
                     :     :     :- * Project (21)
                     :     :     :  +- * BroadcastHashJoin Inner BuildRight (20)
                     :     :     :     :- * Project (18)
                     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (17)
                     :     :     :     :     :- * Project (15)
                     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (14)
                     :     :     :     :     :     :- * Project (9)
                     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
                     :     :     :     :     :     :     :- * ColumnarToRow (3)
                     :     :     :     :     :     :     :  +- CometFilter (2)
                     :     :     :     :     :     :     :     +- CometScan parquet spark_catalog.default.store_sales (1)
                     :     :     :     :     :     :     +- BroadcastExchange (7)
                     :     :     :     :     :     :        +- * ColumnarToRow (6)
                     :     :     :     :     :     :           +- CometFilter (5)
                     :     :     :     :     :     :              +- CometScan parquet spark_catalog.default.store_returns (4)
                     :     :     :     :     :     +- BroadcastExchange (13)
                     :     :     :     :     :        +- * ColumnarToRow (12)
                     :     :     :     :     :           +- CometFilter (11)
                     :     :     :     :     :              +- CometScan parquet spark_catalog.default.catalog_sales (10)
                     :     :     :     :     +- ReusedExchange (16)
                     :     :     :     +- ReusedExchange (19)
                     :     :     +- ReusedExchange (22)
                     :     +- BroadcastExchange (28)
                     :        +- * ColumnarToRow (27)
                     :           +- CometFilter (26)
                     :              +- CometScan parquet spark_catalog.default.store (25)
                     +- BroadcastExchange (34)
                        +- * ColumnarToRow (33)
                           +- CometFilter (32)
                              +- CometScan parquet spark_catalog.default.item (31)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_profit#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_profit#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_customer_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_ticket_number#4)) AND isnotnull(ss_store_sk#3))

(3) ColumnarToRow [codegen id : 8]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_profit#5, ss_sold_date_sk#6]

(unknown) Scan parquet spark_catalog.default.store_returns
Output [5]: [sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_net_loss#11, sr_returned_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#12), dynamicpruningexpression(sr_returned_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:int,sr_net_loss:decimal(7,2)>

(5) CometFilter
Input [5]: [sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_net_loss#11, sr_returned_date_sk#12]
Condition : ((isnotnull(sr_customer_sk#9) AND isnotnull(sr_item_sk#8)) AND isnotnull(sr_ticket_number#10))

(6) ColumnarToRow [codegen id : 1]
Input [5]: [sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_net_loss#11, sr_returned_date_sk#12]

(7) BroadcastExchange
Input [5]: [sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_net_loss#11, sr_returned_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(input[1, int, false], input[0, int, false], input[2, int, false]),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 8]
Left keys [3]: [ss_customer_sk#2, ss_item_sk#1, ss_ticket_number#4]
Right keys [3]: [sr_customer_sk#9, sr_item_sk#8, sr_ticket_number#10]
Join type: Inner
Join condition: None

(9) Project [codegen id : 8]
Output [8]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, ss_sold_date_sk#6, sr_item_sk#8, sr_customer_sk#9, sr_net_loss#11, sr_returned_date_sk#12]
Input [11]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_profit#5, ss_sold_date_sk#6, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_net_loss#11, sr_returned_date_sk#12]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_bill_customer_sk#14, cs_item_sk#15, cs_net_profit#16, cs_sold_date_sk#17]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#17), dynamicpruningexpression(cs_sold_date_sk#17 IN dynamicpruning#18)]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_net_profit:decimal(7,2)>

(11) CometFilter
Input [4]: [cs_bill_customer_sk#14, cs_item_sk#15, cs_net_profit#16, cs_sold_date_sk#17]
Condition : (isnotnull(cs_bill_customer_sk#14) AND isnotnull(cs_item_sk#15))

(12) ColumnarToRow [codegen id : 2]
Input [4]: [cs_bill_customer_sk#14, cs_item_sk#15, cs_net_profit#16, cs_sold_date_sk#17]

(13) BroadcastExchange
Input [4]: [cs_bill_customer_sk#14, cs_item_sk#15, cs_net_profit#16, cs_sold_date_sk#17]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[0, int, false] as bigint), 32) | (cast(input[1, int, false] as bigint) & 4294967295))),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 8]
Left keys [2]: [sr_customer_sk#9, sr_item_sk#8]
Right keys [2]: [cs_bill_customer_sk#14, cs_item_sk#15]
Join type: Inner
Join condition: None

(15) Project [codegen id : 8]
Output [8]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, ss_sold_date_sk#6, sr_net_loss#11, sr_returned_date_sk#12, cs_net_profit#16, cs_sold_date_sk#17]
Input [12]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, ss_sold_date_sk#6, sr_item_sk#8, sr_customer_sk#9, sr_net_loss#11, sr_returned_date_sk#12, cs_bill_customer_sk#14, cs_item_sk#15, cs_net_profit#16, cs_sold_date_sk#17]

(16) ReusedExchange [Reuses operator id: 47]
Output [1]: [d_date_sk#19]

(17) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#19]
Join type: Inner
Join condition: None

(18) Project [codegen id : 8]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, sr_returned_date_sk#12, cs_net_profit#16, cs_sold_date_sk#17]
Input [9]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, ss_sold_date_sk#6, sr_net_loss#11, sr_returned_date_sk#12, cs_net_profit#16, cs_sold_date_sk#17, d_date_sk#19]

(19) ReusedExchange [Reuses operator id: 52]
Output [1]: [d_date_sk#20]

(20) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [sr_returned_date_sk#12]
Right keys [1]: [d_date_sk#20]
Join type: Inner
Join condition: None

(21) Project [codegen id : 8]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, cs_sold_date_sk#17]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, sr_returned_date_sk#12, cs_net_profit#16, cs_sold_date_sk#17, d_date_sk#20]

(22) ReusedExchange [Reuses operator id: 52]
Output [1]: [d_date_sk#21]

(23) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#17]
Right keys [1]: [d_date_sk#21]
Join type: Inner
Join condition: None

(24) Project [codegen id : 8]
Output [5]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16]
Input [7]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, cs_sold_date_sk#17, d_date_sk#21]

(unknown) Scan parquet spark_catalog.default.store
Output [3]: [s_store_sk#22, s_store_id#23, s_store_name#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>

(26) CometFilter
Input [3]: [s_store_sk#22, s_store_id#23, s_store_name#24]
Condition : isnotnull(s_store_sk#22)

(27) ColumnarToRow [codegen id : 6]
Input [3]: [s_store_sk#22, s_store_id#23, s_store_name#24]

(28) BroadcastExchange
Input [3]: [s_store_sk#22, s_store_id#23, s_store_name#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(29) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#22]
Join type: Inner
Join condition: None

(30) Project [codegen id : 8]
Output [6]: [ss_item_sk#1, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, s_store_id#23, s_store_name#24]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, s_store_sk#22, s_store_id#23, s_store_name#24]

(unknown) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#25, i_item_id#26, i_item_desc#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

(32) CometFilter
Input [3]: [i_item_sk#25, i_item_id#26, i_item_desc#27]
Condition : isnotnull(i_item_sk#25)

(33) ColumnarToRow [codegen id : 7]
Input [3]: [i_item_sk#25, i_item_id#26, i_item_desc#27]

(34) BroadcastExchange
Input [3]: [i_item_sk#25, i_item_id#26, i_item_desc#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]

(35) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#25]
Join type: Inner
Join condition: None

(36) Project [codegen id : 8]
Output [7]: [ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, s_store_id#23, s_store_name#24, i_item_id#26, i_item_desc#27]
Input [9]: [ss_item_sk#1, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, s_store_id#23, s_store_name#24, i_item_sk#25, i_item_id#26, i_item_desc#27]

(37) HashAggregate [codegen id : 8]
Input [7]: [ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, s_store_id#23, s_store_name#24, i_item_id#26, i_item_desc#27]
Keys [4]: [i_item_id#26, i_item_desc#27, s_store_id#23, s_store_name#24]
Functions [3]: [partial_sum(UnscaledValue(ss_net_profit#5)), partial_sum(UnscaledValue(sr_net_loss#11)), partial_sum(UnscaledValue(cs_net_profit#16))]
Aggregate Attributes [3]: [sum#28, sum#29, sum#30]
Results [7]: [i_item_id#26, i_item_desc#27, s_store_id#23, s_store_name#24, sum#31, sum#32, sum#33]

(38) RowToColumnar
Input [7]: [i_item_id#26, i_item_desc#27, s_store_id#23, s_store_name#24, sum#31, sum#32, sum#33]

(39) CometColumnarExchange
Input [7]: [i_item_id#26, i_item_desc#27, s_store_id#23, s_store_name#24, sum#31, sum#32, sum#33]
Arguments: hashpartitioning(i_item_id#26, i_item_desc#27, s_store_id#23, s_store_name#24, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(40) ColumnarToRow [codegen id : 9]
Input [7]: [i_item_id#26, i_item_desc#27, s_store_id#23, s_store_name#24, sum#31, sum#32, sum#33]

(41) HashAggregate [codegen id : 9]
Input [7]: [i_item_id#26, i_item_desc#27, s_store_id#23, s_store_name#24, sum#31, sum#32, sum#33]
Keys [4]: [i_item_id#26, i_item_desc#27, s_store_id#23, s_store_name#24]
Functions [3]: [sum(UnscaledValue(ss_net_profit#5)), sum(UnscaledValue(sr_net_loss#11)), sum(UnscaledValue(cs_net_profit#16))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_net_profit#5))#34, sum(UnscaledValue(sr_net_loss#11))#35, sum(UnscaledValue(cs_net_profit#16))#36]
Results [7]: [i_item_id#26, i_item_desc#27, s_store_id#23, s_store_name#24, MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#34,17,2) AS store_sales_profit#37, MakeDecimal(sum(UnscaledValue(sr_net_loss#11))#35,17,2) AS store_returns_loss#38, MakeDecimal(sum(UnscaledValue(cs_net_profit#16))#36,17,2) AS catalog_sales_profit#39]

(42) TakeOrderedAndProject
Input [7]: [i_item_id#26, i_item_desc#27, s_store_id#23, s_store_name#24, store_sales_profit#37, store_returns_loss#38, catalog_sales_profit#39]
Arguments: 100, [i_item_id#26 ASC NULLS FIRST, i_item_desc#27 ASC NULLS FIRST, s_store_id#23 ASC NULLS FIRST, s_store_name#24 ASC NULLS FIRST], [i_item_id#26, i_item_desc#27, s_store_id#23, s_store_name#24, store_sales_profit#37, store_returns_loss#38, catalog_sales_profit#39]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (47)
+- * ColumnarToRow (46)
   +- CometProject (45)
      +- CometFilter (44)
         +- CometScan parquet spark_catalog.default.date_dim (43)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#19, d_year#40, d_moy#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(44) CometFilter
Input [3]: [d_date_sk#19, d_year#40, d_moy#41]
Condition : ((((isnotnull(d_moy#41) AND isnotnull(d_year#40)) AND (d_moy#41 = 4)) AND (d_year#40 = 2001)) AND isnotnull(d_date_sk#19))

(45) CometProject
Input [3]: [d_date_sk#19, d_year#40, d_moy#41]
Arguments: [d_date_sk#19], [d_date_sk#19]

(46) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#19]

(47) BroadcastExchange
Input [1]: [d_date_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

Subquery:2 Hosting operator id = 4 Hosting Expression = sr_returned_date_sk#12 IN dynamicpruning#13
BroadcastExchange (52)
+- * ColumnarToRow (51)
   +- CometProject (50)
      +- CometFilter (49)
         +- CometScan parquet spark_catalog.default.date_dim (48)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#20, d_year#42, d_moy#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,10), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(49) CometFilter
Input [3]: [d_date_sk#20, d_year#42, d_moy#43]
Condition : (((((isnotnull(d_moy#43) AND isnotnull(d_year#42)) AND (d_moy#43 >= 4)) AND (d_moy#43 <= 10)) AND (d_year#42 = 2001)) AND isnotnull(d_date_sk#20))

(50) CometProject
Input [3]: [d_date_sk#20, d_year#42, d_moy#43]
Arguments: [d_date_sk#20], [d_date_sk#20]

(51) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#20]

(52) BroadcastExchange
Input [1]: [d_date_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:3 Hosting operator id = 10 Hosting Expression = cs_sold_date_sk#17 IN dynamicpruning#13


