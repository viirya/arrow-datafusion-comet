== Physical Plan ==
* ColumnarToRow (50)
+- CometSort (49)
   +- CometColumnarExchange (48)
      +- RowToColumnar (47)
         +- * BroadcastHashJoin Inner BuildRight (46)
            :- * Project (25)
            :  +- * Filter (24)
            :     +- * HashAggregate (23)
            :        +- * ColumnarToRow (22)
            :           +- CometColumnarExchange (21)
            :              +- RowToColumnar (20)
            :                 +- * HashAggregate (19)
            :                    +- * Project (18)
            :                       +- * BroadcastHashJoin Inner BuildRight (17)
            :                          :- * Project (15)
            :                          :  +- * BroadcastHashJoin Inner BuildRight (14)
            :                          :     :- * Project (9)
            :                          :     :  +- * BroadcastHashJoin Inner BuildRight (8)
            :                          :     :     :- * ColumnarToRow (3)
            :                          :     :     :  +- CometFilter (2)
            :                          :     :     :     +- CometScan parquet spark_catalog.default.inventory (1)
            :                          :     :     +- BroadcastExchange (7)
            :                          :     :        +- * ColumnarToRow (6)
            :                          :     :           +- CometFilter (5)
            :                          :     :              +- CometScan parquet spark_catalog.default.item (4)
            :                          :     +- BroadcastExchange (13)
            :                          :        +- * ColumnarToRow (12)
            :                          :           +- CometFilter (11)
            :                          :              +- CometScan parquet spark_catalog.default.warehouse (10)
            :                          +- ReusedExchange (16)
            +- BroadcastExchange (45)
               +- * Project (44)
                  +- * Filter (43)
                     +- * HashAggregate (42)
                        +- * ColumnarToRow (41)
                           +- CometColumnarExchange (40)
                              +- RowToColumnar (39)
                                 +- * HashAggregate (38)
                                    +- * Project (37)
                                       +- * BroadcastHashJoin Inner BuildRight (36)
                                          :- * Project (34)
                                          :  +- * BroadcastHashJoin Inner BuildRight (33)
                                          :     :- * Project (31)
                                          :     :  +- * BroadcastHashJoin Inner BuildRight (30)
                                          :     :     :- * ColumnarToRow (28)
                                          :     :     :  +- CometFilter (27)
                                          :     :     :     +- CometScan parquet spark_catalog.default.inventory (26)
                                          :     :     +- ReusedExchange (29)
                                          :     +- ReusedExchange (32)
                                          +- ReusedExchange (35)


(unknown) Scan parquet spark_catalog.default.inventory
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#4), dynamicpruningexpression(inv_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) CometFilter
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Condition : (isnotnull(inv_item_sk#1) AND isnotnull(inv_warehouse_sk#2))

(3) ColumnarToRow [codegen id : 4]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]

(unknown) Scan parquet spark_catalog.default.item
Output [1]: [i_item_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(5) CometFilter
Input [1]: [i_item_sk#6]
Condition : isnotnull(i_item_sk#6)

(6) ColumnarToRow [codegen id : 1]
Input [1]: [i_item_sk#6]

(7) BroadcastExchange
Input [1]: [i_item_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(9) Project [codegen id : 4]
Output [4]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#6]
Input [5]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#6]

(unknown) Scan parquet spark_catalog.default.warehouse
Output [2]: [w_warehouse_sk#7, w_warehouse_name#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(11) CometFilter
Input [2]: [w_warehouse_sk#7, w_warehouse_name#8]
Condition : isnotnull(w_warehouse_sk#7)

(12) ColumnarToRow [codegen id : 2]
Input [2]: [w_warehouse_sk#7, w_warehouse_name#8]

(13) BroadcastExchange
Input [2]: [w_warehouse_sk#7, w_warehouse_name#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_warehouse_sk#2]
Right keys [1]: [w_warehouse_sk#7]
Join type: Inner
Join condition: None

(15) Project [codegen id : 4]
Output [5]: [inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#6, w_warehouse_sk#7, w_warehouse_name#8]
Input [6]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#6, w_warehouse_sk#7, w_warehouse_name#8]

(16) ReusedExchange [Reuses operator id: 55]
Output [2]: [d_date_sk#9, d_moy#10]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_date_sk#4]
Right keys [1]: [d_date_sk#9]
Join type: Inner
Join condition: None

(18) Project [codegen id : 4]
Output [5]: [inv_quantity_on_hand#3, i_item_sk#6, w_warehouse_sk#7, w_warehouse_name#8, d_moy#10]
Input [7]: [inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#6, w_warehouse_sk#7, w_warehouse_name#8, d_date_sk#9, d_moy#10]

(19) HashAggregate [codegen id : 4]
Input [5]: [inv_quantity_on_hand#3, i_item_sk#6, w_warehouse_sk#7, w_warehouse_name#8, d_moy#10]
Keys [4]: [w_warehouse_name#8, w_warehouse_sk#7, i_item_sk#6, d_moy#10]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#3 as double)), partial_avg(inv_quantity_on_hand#3)]
Aggregate Attributes [5]: [n#11, avg#12, m2#13, sum#14, count#15]
Results [9]: [w_warehouse_name#8, w_warehouse_sk#7, i_item_sk#6, d_moy#10, n#16, avg#17, m2#18, sum#19, count#20]

(20) RowToColumnar
Input [9]: [w_warehouse_name#8, w_warehouse_sk#7, i_item_sk#6, d_moy#10, n#16, avg#17, m2#18, sum#19, count#20]

(21) CometColumnarExchange
Input [9]: [w_warehouse_name#8, w_warehouse_sk#7, i_item_sk#6, d_moy#10, n#16, avg#17, m2#18, sum#19, count#20]
Arguments: hashpartitioning(w_warehouse_name#8, w_warehouse_sk#7, i_item_sk#6, d_moy#10, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(22) ColumnarToRow [codegen id : 10]
Input [9]: [w_warehouse_name#8, w_warehouse_sk#7, i_item_sk#6, d_moy#10, n#16, avg#17, m2#18, sum#19, count#20]

(23) HashAggregate [codegen id : 10]
Input [9]: [w_warehouse_name#8, w_warehouse_sk#7, i_item_sk#6, d_moy#10, n#16, avg#17, m2#18, sum#19, count#20]
Keys [4]: [w_warehouse_name#8, w_warehouse_sk#7, i_item_sk#6, d_moy#10]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double)), avg(inv_quantity_on_hand#3)]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double))#21, avg(inv_quantity_on_hand#3)#22]
Results [5]: [w_warehouse_sk#7, i_item_sk#6, d_moy#10, stddev_samp(cast(inv_quantity_on_hand#3 as double))#21 AS stdev#23, avg(inv_quantity_on_hand#3)#22 AS mean#24]

(24) Filter [codegen id : 10]
Input [5]: [w_warehouse_sk#7, i_item_sk#6, d_moy#10, stdev#23, mean#24]
Condition : CASE WHEN (mean#24 = 0.0) THEN false ELSE ((stdev#23 / mean#24) > 1.0) END

(25) Project [codegen id : 10]
Output [5]: [w_warehouse_sk#7, i_item_sk#6, d_moy#10, mean#24, CASE WHEN (mean#24 = 0.0) THEN null ELSE (stdev#23 / mean#24) END AS cov#25]
Input [5]: [w_warehouse_sk#7, i_item_sk#6, d_moy#10, stdev#23, mean#24]

(unknown) Scan parquet spark_catalog.default.inventory
Output [4]: [inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#29), dynamicpruningexpression(inv_date_sk#29 IN dynamicpruning#30)]
PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(27) CometFilter
Input [4]: [inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29]
Condition : (isnotnull(inv_item_sk#26) AND isnotnull(inv_warehouse_sk#27))

(28) ColumnarToRow [codegen id : 8]
Input [4]: [inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29]

(29) ReusedExchange [Reuses operator id: 7]
Output [1]: [i_item_sk#31]

(30) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [inv_item_sk#26]
Right keys [1]: [i_item_sk#31]
Join type: Inner
Join condition: None

(31) Project [codegen id : 8]
Output [4]: [inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29, i_item_sk#31]
Input [5]: [inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29, i_item_sk#31]

(32) ReusedExchange [Reuses operator id: 13]
Output [2]: [w_warehouse_sk#32, w_warehouse_name#33]

(33) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [inv_warehouse_sk#27]
Right keys [1]: [w_warehouse_sk#32]
Join type: Inner
Join condition: None

(34) Project [codegen id : 8]
Output [5]: [inv_quantity_on_hand#28, inv_date_sk#29, i_item_sk#31, w_warehouse_sk#32, w_warehouse_name#33]
Input [6]: [inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29, i_item_sk#31, w_warehouse_sk#32, w_warehouse_name#33]

(35) ReusedExchange [Reuses operator id: 60]
Output [2]: [d_date_sk#34, d_moy#35]

(36) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [inv_date_sk#29]
Right keys [1]: [d_date_sk#34]
Join type: Inner
Join condition: None

(37) Project [codegen id : 8]
Output [5]: [inv_quantity_on_hand#28, i_item_sk#31, w_warehouse_sk#32, w_warehouse_name#33, d_moy#35]
Input [7]: [inv_quantity_on_hand#28, inv_date_sk#29, i_item_sk#31, w_warehouse_sk#32, w_warehouse_name#33, d_date_sk#34, d_moy#35]

(38) HashAggregate [codegen id : 8]
Input [5]: [inv_quantity_on_hand#28, i_item_sk#31, w_warehouse_sk#32, w_warehouse_name#33, d_moy#35]
Keys [4]: [w_warehouse_name#33, w_warehouse_sk#32, i_item_sk#31, d_moy#35]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#28 as double)), partial_avg(inv_quantity_on_hand#28)]
Aggregate Attributes [5]: [n#36, avg#37, m2#38, sum#39, count#40]
Results [9]: [w_warehouse_name#33, w_warehouse_sk#32, i_item_sk#31, d_moy#35, n#41, avg#42, m2#43, sum#44, count#45]

(39) RowToColumnar
Input [9]: [w_warehouse_name#33, w_warehouse_sk#32, i_item_sk#31, d_moy#35, n#41, avg#42, m2#43, sum#44, count#45]

(40) CometColumnarExchange
Input [9]: [w_warehouse_name#33, w_warehouse_sk#32, i_item_sk#31, d_moy#35, n#41, avg#42, m2#43, sum#44, count#45]
Arguments: hashpartitioning(w_warehouse_name#33, w_warehouse_sk#32, i_item_sk#31, d_moy#35, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(41) ColumnarToRow [codegen id : 9]
Input [9]: [w_warehouse_name#33, w_warehouse_sk#32, i_item_sk#31, d_moy#35, n#41, avg#42, m2#43, sum#44, count#45]

(42) HashAggregate [codegen id : 9]
Input [9]: [w_warehouse_name#33, w_warehouse_sk#32, i_item_sk#31, d_moy#35, n#41, avg#42, m2#43, sum#44, count#45]
Keys [4]: [w_warehouse_name#33, w_warehouse_sk#32, i_item_sk#31, d_moy#35]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#28 as double)), avg(inv_quantity_on_hand#28)]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#28 as double))#21, avg(inv_quantity_on_hand#28)#22]
Results [5]: [w_warehouse_sk#32, i_item_sk#31, d_moy#35, stddev_samp(cast(inv_quantity_on_hand#28 as double))#21 AS stdev#23, avg(inv_quantity_on_hand#28)#22 AS mean#24]

(43) Filter [codegen id : 9]
Input [5]: [w_warehouse_sk#32, i_item_sk#31, d_moy#35, stdev#23, mean#24]
Condition : CASE WHEN (mean#24 = 0.0) THEN false ELSE ((stdev#23 / mean#24) > 1.0) END

(44) Project [codegen id : 9]
Output [5]: [w_warehouse_sk#32, i_item_sk#31, d_moy#35, mean#24 AS mean#46, CASE WHEN (mean#24 = 0.0) THEN null ELSE (stdev#23 / mean#24) END AS cov#47]
Input [5]: [w_warehouse_sk#32, i_item_sk#31, d_moy#35, stdev#23, mean#24]

(45) BroadcastExchange
Input [5]: [w_warehouse_sk#32, i_item_sk#31, d_moy#35, mean#46, cov#47]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=5]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [2]: [i_item_sk#6, w_warehouse_sk#7]
Right keys [2]: [i_item_sk#31, w_warehouse_sk#32]
Join type: Inner
Join condition: None

(47) RowToColumnar
Input [10]: [w_warehouse_sk#7, i_item_sk#6, d_moy#10, mean#24, cov#25, w_warehouse_sk#32, i_item_sk#31, d_moy#35, mean#46, cov#47]

(48) CometColumnarExchange
Input [10]: [w_warehouse_sk#7, i_item_sk#6, d_moy#10, mean#24, cov#25, w_warehouse_sk#32, i_item_sk#31, d_moy#35, mean#46, cov#47]
Arguments: rangepartitioning(w_warehouse_sk#7 ASC NULLS FIRST, i_item_sk#6 ASC NULLS FIRST, d_moy#10 ASC NULLS FIRST, mean#24 ASC NULLS FIRST, cov#25 ASC NULLS FIRST, d_moy#35 ASC NULLS FIRST, mean#46 ASC NULLS FIRST, cov#47 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(49) CometSort
Input [10]: [w_warehouse_sk#7, i_item_sk#6, d_moy#10, mean#24, cov#25, w_warehouse_sk#32, i_item_sk#31, d_moy#35, mean#46, cov#47]
Arguments: [w_warehouse_sk#7, i_item_sk#6, d_moy#10, mean#24, cov#25, w_warehouse_sk#32, i_item_sk#31, d_moy#35, mean#46, cov#47], [w_warehouse_sk#7 ASC NULLS FIRST, i_item_sk#6 ASC NULLS FIRST, d_moy#10 ASC NULLS FIRST, mean#24 ASC NULLS FIRST, cov#25 ASC NULLS FIRST, d_moy#35 ASC NULLS FIRST, mean#46 ASC NULLS FIRST, cov#47 ASC NULLS FIRST]

(50) ColumnarToRow [codegen id : 11]
Input [10]: [w_warehouse_sk#7, i_item_sk#6, d_moy#10, mean#24, cov#25, w_warehouse_sk#32, i_item_sk#31, d_moy#35, mean#46, cov#47]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = inv_date_sk#4 IN dynamicpruning#5
BroadcastExchange (55)
+- * ColumnarToRow (54)
   +- CometProject (53)
      +- CometFilter (52)
         +- CometScan parquet spark_catalog.default.date_dim (51)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_year#48, d_moy#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,1), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(52) CometFilter
Input [3]: [d_date_sk#9, d_year#48, d_moy#10]
Condition : ((((isnotnull(d_year#48) AND isnotnull(d_moy#10)) AND (d_year#48 = 2001)) AND (d_moy#10 = 1)) AND isnotnull(d_date_sk#9))

(53) CometProject
Input [3]: [d_date_sk#9, d_year#48, d_moy#10]
Arguments: [d_date_sk#9, d_moy#10], [d_date_sk#9, d_moy#10]

(54) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_moy#10]

(55) BroadcastExchange
Input [2]: [d_date_sk#9, d_moy#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:2 Hosting operator id = 26 Hosting Expression = inv_date_sk#29 IN dynamicpruning#30
BroadcastExchange (60)
+- * ColumnarToRow (59)
   +- CometProject (58)
      +- CometFilter (57)
         +- CometScan parquet spark_catalog.default.date_dim (56)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#34, d_year#49, d_moy#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(57) CometFilter
Input [3]: [d_date_sk#34, d_year#49, d_moy#35]
Condition : ((((isnotnull(d_year#49) AND isnotnull(d_moy#35)) AND (d_year#49 = 2001)) AND (d_moy#35 = 2)) AND isnotnull(d_date_sk#34))

(58) CometProject
Input [3]: [d_date_sk#34, d_year#49, d_moy#35]
Arguments: [d_date_sk#34, d_moy#35], [d_date_sk#34, d_moy#35]

(59) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#34, d_moy#35]

(60) BroadcastExchange
Input [2]: [d_date_sk#34, d_moy#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]


